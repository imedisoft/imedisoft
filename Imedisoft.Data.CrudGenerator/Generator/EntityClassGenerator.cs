using Imedisoft.Data.CrudGenerator.Schema;
using System.Collections.Generic;
using System.Drawing;
using System.Reflection;
using System.Text;

namespace Imedisoft.Data.CrudGenerator.Generator
{
    public static class EntityClassGenerator
    {
		private static List<string> namespaces = new List<string>();

		private static void AddNamespace(string ns)
        {
			foreach (var item in namespaces)
            {
				if (item == ns) return;
            }

			namespaces.Add(ns);
        }

		/// <summary>
		/// Generates the entity class for the specified table.
		/// </summary>
		/// <param name="table">The table.</param>
		/// <returns>The code that defines the entity class.</returns>
		public static string Generate(Table table)
        {
			var stringBuilder = new StringBuilder();

			namespaces.Clear();
			AddNamespace("System");
			AddNamespace("System.Collections");
			AddNamespace("System.Collections.Generic");
			AddNamespace("MySql.Data.MySqlClient");

			foreach (var column in table.Columns)
            {
				AddNamespace(column.Type.Namespace);
            }

			namespaces.Sort();

			stringBuilder.AppendLine("//------------------------------------------------------------------------------");
			stringBuilder.AppendLine("// <auto-generated>");
			stringBuilder.AppendLine("//     This code was generated by a tool.");
			stringBuilder.AppendLine($"//     Runtime Version: {Assembly.GetExecutingAssembly().ImageRuntimeVersion}");
			stringBuilder.AppendLine("//");
			stringBuilder.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
			stringBuilder.AppendLine("//     the code is regenerated.");
			stringBuilder.AppendLine("// </auto-generated>");
			stringBuilder.AppendLine("//------------------------------------------------------------------------------");

			foreach (var ns in namespaces)
            {
				stringBuilder.AppendLine($"using {ns};");
            }
			stringBuilder.AppendLine();

			GenerateHeader(stringBuilder, table);
			GenerateBuilder(stringBuilder, table);
			GenerateSelectOne(stringBuilder, table);
			GenerateSelectMany(stringBuilder, table);
			GenerateCrud(stringBuilder, table);
			GenerateFooter(stringBuilder);

			return stringBuilder.ToString();
        }

		private static void GenerateHeader(StringBuilder stringBuilder, Table table)
        {
			stringBuilder.AppendLine("namespace OpenDentBusiness.Crud");
			stringBuilder.AppendLine("{");
			stringBuilder.AppendLine($"	public class {table.Type.Name}Crud");
			stringBuilder.AppendLine("	{");
		}

		private static void GenerateFooter(StringBuilder stringBuilder)
        {
			stringBuilder.AppendLine("	}");
			stringBuilder.AppendLine("}");
        }

		private static void GenerateSelectOne(StringBuilder stringBuilder, Table table)
        {
			stringBuilder.AppendLine(@"		/// <summary>");
			stringBuilder.AppendLine(@"		/// Selects a single " + table.Type.Name + " object from the database using the specified SQL command.");
			stringBuilder.AppendLine(@"		/// </summary>");
			stringBuilder.AppendLine($"		public static {table.Type.Name} SelectOne(string command)");
			stringBuilder.AppendLine("			=> Db.SelectOne(command, FromReader);");
			stringBuilder.AppendLine("");

			if (table.PrimaryKey != null) GenerateSelectOnePK(stringBuilder, table);
		}

		private static string ParamName(string name) => name.Substring(0, 1).ToLower() + name.Substring(1);

		private static void GenerateSelectOnePK(StringBuilder stringBuilder, Table table)
        {
			var param = ParamName(table.PrimaryKey.Name);
			var command = $"\"SELECT * FROM `{table.Name}` WHERE `{table.PrimaryKey.Name}` = \" + {ConvertValueToSql(param, table.PrimaryKey)}";

			stringBuilder.AppendLine(@"		/// <summary>");
			stringBuilder.AppendLine(@"		/// Selects a single <see cref=""" + table.Type.Name + @"""/> object from the database using the specified SQL command.");
			stringBuilder.AppendLine(@"		/// </summary>");
			stringBuilder.AppendLine($"		public static {table.Type.Name} SelectOne({table.PrimaryKey.Type.Name} {param})");
			stringBuilder.AppendLine($"			=> SelectOne({command});");
			stringBuilder.AppendLine("");
		}

		public static void GenerateSelectMany(StringBuilder stringBuilder, Table table)
		{
			stringBuilder.AppendLine(@"		/// <summary>");
			stringBuilder.AppendLine(@"		/// Selects multiple <see cref=""" + table.Type.Name + @"""/> objects from the database using the specified SQL command.");
			stringBuilder.AppendLine(@"		/// </summary>");
			stringBuilder.AppendLine($"		public static IEnumerable<{table.Type.Name}> SelectMany(string command)");
			stringBuilder.AppendLine("			=> Db.SelectMany(command, FromReader);");
			stringBuilder.AppendLine("");
		}

		private static string GenerateBuilder(StringBuilder stringBuilder, Table table)
        {
			stringBuilder.AppendLine($"		public static {table.Type.Name} FromReader(MySqlDataReader dataReader)");
			stringBuilder.AppendLine("		{");
			stringBuilder.AppendLine($"			return new {table.Type.Name}");
			stringBuilder.AppendLine("			{");

			for (int i = 0; i < table.Columns.Count; i++)
            {
				var column = table.Columns[i];
				var value = $"dataReader[\"{column.Name}\"]";

				stringBuilder.Append($"				{column.FieldName} = {ConvertValueFromSql(value, column)}");
				if (i <= (table.Columns.Count - 2))
                {
					stringBuilder.Append(',');
                }
				stringBuilder.AppendLine();
            }

			stringBuilder.AppendLine("			};");
			stringBuilder.AppendLine("		}");
			stringBuilder.AppendLine();

			return stringBuilder.ToString();
        }

		private static string ConvertValueFromSql(string value, Column column)
        {
			if (column.Type.IsEnum)
            {
				return $"({column.Type.Name})Convert.ToInt32({value})";
            }

			if (column.Type == typeof(bool)) return $"(Convert.ToInt32({value}) == 1)";
			if (column.Type == typeof(byte)) return $"(byte){value}";
			if (column.Type == typeof(sbyte)) return $"(sbyte){value}";
			if (column.Type == typeof(char)) return $"(char){value}";
			if (column.Type == typeof(double)) return $"(double){value}";
			if (column.Type == typeof(float)) return $"(float){value}";
			if (column.Type == typeof(int)) return $"(int){value}";
			if (column.Type == typeof(uint)) return $"(uint){value}";
			if (column.Type == typeof(long)) return $"(long){value}";
			if (column.Type == typeof(ulong)) return $"(ulong){value}";
			if (column.Type == typeof(short)) return $"(short){value}";
			if (column.Type == typeof(ushort)) return $"(ushort){value}";
			if (column.Type == typeof(string)) return $"{value} as string";
			if (column.Type == typeof(Color)) return $"Color.FromArgb((int){value})";

			return value;
        }

		private static string ConvertValueToSql(string value, Column column)
        {
			if (column.Type.IsEnum) return $"(int){value}";
			if (column.Type == typeof(bool)) return $"({value} ? 1 : 0)";
			if (column.Type == typeof(byte)) return value;
			if (column.Type == typeof(sbyte)) return value;
			if (column.Type == typeof(char)) return value;
			if (column.Type == typeof(double)) return $"POut.Double({value})";
			if (column.Type == typeof(float)) return $"POut.Float({value})";
			if (column.Type == typeof(int)) return value;
			if (column.Type == typeof(uint)) return value;
			if (column.Type == typeof(long)) return value;
			if (column.Type == typeof(ulong)) return value;
			if (column.Type == typeof(short)) return value;
			if (column.Type == typeof(ushort)) return value;
			if (column.Type == typeof(string)) return $"POut.String({value})";
			if (column.Type == typeof(Color)) return $"{value}.ToArgb()";

			return value;
		}

		private static void GenerateCrud(StringBuilder stringBuilder, Table table)
        {
			GenerateInsert(stringBuilder, table);
			GenerateUpdate(stringBuilder, table);
			GenerateUpdateCompare(stringBuilder, table);
			GenerateDelete(stringBuilder, table);
		}

		private static void GenerateInsert(StringBuilder stringBuilder, Table table)
        {
			var param = ParamName(table.Type.Name);

			var columns = new List<string>();
			var values = new List<string>();
			foreach (var column in table.Columns)
			{
				if (column.IsPrimaryKey)
                {
					continue;
                }
				columns.Add($"`{column.Name}`");
				
				values.Add(ConvertValueToSql(
					$"{param}.{column.FieldName}", column));
			}

			var queryBuilder = new StringBuilder();
			queryBuilder.AppendLine($"\"INSERT INTO `{table.Name}` \" + ");
			queryBuilder.AppendLine($"				\"({string.Join(", ", columns)}) \" + ");
			queryBuilder.AppendLine($"				\"VALUES (\" + ");
			queryBuilder.AppendLine($"					{string.Join(" + \", \" +\r\n					", values)} + ");
			queryBuilder.Append($"				\")\"");

			stringBuilder.AppendLine(@"		/// <summary>");
			stringBuilder.AppendLine(@"		/// Inserts the specified <see cref=""" + table.Type.Name + @"""/> into the database.");
			stringBuilder.AppendLine(@"		/// </summary>");

			if (table.PrimaryKey != null && table.PrimaryKey.Type == typeof(long))
			{
				stringBuilder.AppendLine($"		public static long Insert({table.Type.Name} {param})");
				stringBuilder.AppendLine($"			=> {param}.{table.PrimaryKey.Name} = Db.NonQ(");
				stringBuilder.AppendLine($"				{queryBuilder}, true, \"{table.PrimaryKey.Name}\", \"{table.Name.ToLower()}\");");
				stringBuilder.AppendLine();
			}
            else
            {
				stringBuilder.AppendLine($"		public static void Insert({table.Type.Name} {param})");
				stringBuilder.AppendLine($"			=> Db.NonQ(");
				stringBuilder.AppendLine($"				{queryBuilder},");
				stringBuilder.AppendLine($"				true, \"{table.PrimaryKey.Name}\", \"{table.Name.ToLower()}\");");
				stringBuilder.AppendLine();
			}
		}

		private static void GenerateUpdate(StringBuilder stringBuilder, Table table)
        {
			if (table.PrimaryKey == null) return;

			var param = ParamName(table.Type.Name);

			var updates = new List<string>();
			foreach (var column in table.Columns)
			{
				if (column.IsPrimaryKey)
				{
					continue;
				}

				updates.Add($"\"`{column.Name}` = \" + {ConvertValueToSql($"{param}.{column.FieldName}", column)}");
			}

			string.Join(" + \", \" + \r\n					", updates);

			var queryBuilder = new StringBuilder();
			queryBuilder.AppendLine($"\"UPDATE `{table.Name}` SET \" + ");
			queryBuilder.AppendLine($"					{string.Join(" + \", \" + \r\n					", updates)} + \" \" + ");
			queryBuilder.Append($"				\"WHERE `{table.PrimaryKey.Name}` = \" + {ConvertValueToSql($"{param}.{table.PrimaryKey.FieldName}", table.PrimaryKey)}");

			stringBuilder.AppendLine(@"		/// <summary>");
			stringBuilder.AppendLine(@"		/// Updates the specified <see cref=""" + table.Type.Name + @"""/> in the database.");
			stringBuilder.AppendLine(@"		/// </summary>");
			stringBuilder.AppendLine($"		public static void Update({table.Type.Name} {param})");
			stringBuilder.AppendLine($"			=> Db.NonQ(");
			stringBuilder.AppendLine($"				{queryBuilder});");
			stringBuilder.AppendLine();
		}


		private static void GenerateUpdateCompare(StringBuilder stringBuilder, Table table)
        {
			var param = ParamName(table.Name);
			var paramNew = param + "New";
			var paramOld = param + "Old";

			stringBuilder.AppendLine(@"		/// <summary>");
			stringBuilder.AppendLine(@"		/// Updates the specified <see cref=""" + table.Type.Name + @"""/> in the database.");
			stringBuilder.AppendLine(@"		/// </summary>");
			stringBuilder.AppendLine($"		public static void Update({table.Type.Name} {paramNew}, {table.Type.Name} {paramOld})");
			stringBuilder.AppendLine(@"		{");
			stringBuilder.AppendLine(@"			var updates = new List<string>();");
			stringBuilder.AppendLine();

			foreach (var column in table.Columns)
            {
				if (column.IsPrimaryKey)
                {
					continue;
                }

				stringBuilder.AppendLine($"			if ({paramNew}.{column.FieldName} != {paramOld}.{column.FieldName})");
				stringBuilder.AppendLine($"				updates.Add(\"`{column.Name}` = \" + " + ConvertValueToSql($"{paramNew}.{column.FieldName}", column) + ");");
			}

			stringBuilder.AppendLine();
			stringBuilder.AppendLine("			if (updates.Count == 0) return;");
			stringBuilder.AppendLine();
			stringBuilder.AppendLine($"			Db.NonQ(\"UPDATE `{table.Name}` \" + ");
			stringBuilder.AppendLine($"				\"SET \" + string.Join(\", \", updates) + \" \" + ");
			stringBuilder.AppendLine($"				\"WHERE `{table.PrimaryKey.Name}` = \" + " + ConvertValueToSql($"{paramNew}.{table.PrimaryKey.FieldName}", table.PrimaryKey) + ");");
			stringBuilder.AppendLine(@"		}");
		}

		private static void GenerateDelete(StringBuilder stringBuilder, Table table)
        {
			if (table.PrimaryKey == null) return;

			var param = ParamName(table.PrimaryKey.Name);
			var command = $"\"DELETE FROM `{table.Name}` WHERE `{table.PrimaryKey.Name}` = \" + " + ConvertValueToSql(param, table.PrimaryKey);

			stringBuilder.AppendLine(@"		/// <summary>");
			stringBuilder.AppendLine(@"		/// Deletes a single <see cref=""" + table.Type.Name + @"""/> object from the database.");
			stringBuilder.AppendLine(@"		/// </summary>");
			stringBuilder.AppendLine($"		public static void Delete({table.PrimaryKey.Type.Name} {param}) => Db.NonQ({command});");
			stringBuilder.AppendLine();

			param = ParamName(table.Type.Name);

			stringBuilder.AppendLine(@"		/// <summary>");
			stringBuilder.AppendLine(@"		/// Deletes the specified <see cref=""" + table.Type.Name + @"""/> object from the database.");
			stringBuilder.AppendLine(@"		/// </summary>");
			stringBuilder.AppendLine($"		public static void Delete({table.Type.Name} {param}) => Delete({param}.{table.PrimaryKey.FieldName});");
		}
	}
}
