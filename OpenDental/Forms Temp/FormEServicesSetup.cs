using CodeBase;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Text;
using System.Windows.Forms;
using OpenDentBusiness;

namespace OpenDental {
	public partial class FormEServicesSetup:ODForm {
		private const int CP_NOCLOSE_BUTTON = 0x200;
		///<summary>Output from HQ initialized in FillForm().</summary>
		WebServiceMainHQProxy.EServiceSetup.SignupOut _signupOut;

		public FormEServicesSetup() {
			InitializeComponent();
			Lan.F(this);
		}

		private void FormEServicesSetup2_Load(object sender,EventArgs e) {
			Action actionCloseProgress=ODProgress.Show(EventCategory.EServices,typeof(EServicesEvent),"Validating eServices...");
			try {
				_signupOut=GetSignupOut();
				actionCloseProgress?.Invoke();
			}
			catch(WebException we) {
				this.ForceBringToFront();
				actionCloseProgress?.Invoke();
				FriendlyException.Show(Lan.G(this,"Could not reach HQ.  Please make sure you have an internet connection and try again or call support."),we);
				//Set the dialog result to Abort so that FormClosing knows to not try and save any changes.
				DialogResult=DialogResult.Abort;
				Close();
			}
			catch(Exception ex) {
				this.ForceBringToFront();
				actionCloseProgress?.Invoke();
				FriendlyException.Show(Lan.G(this,"There was a problem loading the eServices Setup window.  Please try again or call support."),ex);
				//Set the dialog result to Abort so that FormClosing knows to not try and save any changes.
				DialogResult=DialogResult.Abort;
				Close();
			}
			this.ForceBringToFront();
		}

		/// <summary>When the user is trying to send a text message, if sending the text would exceed the users spending limit, this handles that error.
		/// If the user has permission to increase the spending limit, open a new FormEservicesSetup to allow them to increase their spending limit,
		/// otherwise warn them that they do not have permission. Returns true if the error passed in matches the spending limit error, false otherwise. </summary>
		public static bool ProcessSendSmsException(Exception ex) {
			if((ex is ODException) && ((ODException)ex).ErrorCode==1) {
				if(MsgBox.Show(typeof(FormEServicesSetup),MsgBoxButtons.YesNo,ex.Message+" Do you want to increase this spending limit?")) {
					if(Security.IsAuthorized(Permissions.EServicesSetup)) {
						FormEServicesSetup FormESSetup=new FormEServicesSetup();
						FormESSetup.Show();
					}
				}
				return true;
			}
			return false;
		}

		///<summary>Makes a web call to WebServiceMainHQ to get the corresponding EServiceSetupFull information and then attempts to fill each tab.
		///If anything goes wrong within this method a message box will show to the user and then the window will auto close via Abort.</summary>
		public static WebServiceMainHQProxy.EServiceSetup.SignupOut GetSignupOut(WebServiceMainHQProxy.EServiceSetup.SignupOut signupOut=null) {
			if(MiscUtils.TryUpdateIeEmulation()) {
				throw new Exception("Browser emulation version updated.\r\nYou must restart this application before accessing the Signup Portal.");
			}
			//Send light version of clinics to HQ to be used by signup portal below. Get back all args needed from HQ in order to perform the operations of this window.
			SignupPortalPermission perm=GetUserSignupPortalPermissions();
			SecurityLogs.MakeLogEntry(Permissions.Setup,0,$"User {Security.CurrentUser.UserName} entered EService Setup with SignupPortalPermission {perm}");
			if(signupOut==null) { //the first time this loads signupOut will be null, so we won't have a previous state to compare
				signupOut=WebServiceMainHQProxy.GetEServiceSetupFull(perm);
			}
			else { //If we are switching from the signup tab to another this will get called again and we don't want to lose the "diff"
				signupOut=WebServiceMainHQProxy.GetEServiceSetupFull(perm,oldSignupOut:signupOut);
			}
			//Show user any prompts that were generated by GetEServiceSetupFull().
			if(signupOut.Prompts.Count>0) {
				MessageBox.Show(string.Join("\r\n",signupOut.Prompts));//.Select(x => Lans.g(this,x))));
			}
			return signupOut;
		}

		private static SignupPortalPermission GetUserSignupPortalPermissions() {
			SignupPortalPermission perm=SignupPortalPermission.ReadOnly;
			if(Security.IsAuthorized(Permissions.SecurityAdmin,true)) {
				perm=SignupPortalPermission.FullPermission;
			}
			else if(Security.IsAuthorized(Permissions.EServicesSetup,true)) {
				perm=SignupPortalPermission.ReadOnly;
			}
			else {
				perm=SignupPortalPermission.Denied;
			}
			return perm;
		}

		private void butSignup_Click(object sender,EventArgs e) {
			FormEServicesSignup formESSignup2=new FormEServicesSignup(_signupOut);
			formESSignup2.ShowDialog();
			if(formESSignup2.DialogResult==DialogResult.OK) {
				_signupOut=GetSignupOut(_signupOut);
			}
		}

		private void butEConnector_Click(object sender,EventArgs e) {
			FormEServicesEConnector formESEConnector=new FormEServicesEConnector();
			formESEConnector.ShowDialog();
		}

		private void butMobileWeb_Click(object sender,EventArgs e) {
			FormEServicesMobileWeb formESMobileWeb=new FormEServicesMobileWeb(_signupOut);
			formESMobileWeb.ShowDialog();
		}

		private void butPatPortal_Click(object sender,EventArgs e) {
			FormEServicesPatientPortal formESPatPortal=new FormEServicesPatientPortal(_signupOut);
			formESPatPortal.ShowDialog();
		}

		private void butWebSched_Click(object sender,EventArgs e) {
			FormEServicesWebSched formESWebSched=new FormEServicesWebSched(_signupOut);
			formESWebSched.ShowDialog();
		}

		private void butTextingServices_Click(object sender,EventArgs e) {
			FormEServicesTexting formESTexting=new FormEServicesTexting(_signupOut);
			formESTexting.ShowDialog();
		}

		private void butECR_Click(object sender,EventArgs e) {
			FormEServicesAutoMsging formESECR=new FormEServicesAutoMsging(_signupOut);
			formESECR.ShowDialog();
		}

		private void butEClipboard_Click(object sender,EventArgs e) {
			FormEServicesEClipboard formESEClipboard=new FormEServicesEClipboard();
			formESEClipboard.ShowDialog();
		}

		private void butMisc_Click(object sender,EventArgs e) {
			FormEServicesMisc formESMisc=new FormEServicesMisc(_signupOut);
			formESMisc.ShowDialog();
		}

		private void butMassEmail_Click(object sender,EventArgs e) {
			FormEServicesMassEmail formESMassEmail=new FormEServicesMassEmail(_signupOut);
			formESMassEmail.ShowDialog();
		}

		private void butMobileSync_Click(object sender,EventArgs e) {
			FormEServicesMobileSynch formESMobileSync=new FormEServicesMobileSynch();
			formESMobileSync.ShowDialog();
		}

		private void butClose_Click(object sender,EventArgs e) {
			Close();
		}

		private void FormEServicesSetup2_FormClosing(object sender,FormClosingEventArgs e) {
			if(DialogResult==DialogResult.Abort || !Security.IsAuthorized(Permissions.EServicesSetup,true)) {
				return;
			}
			DataValid.SetInvalid(InvalidType.Prefs);
			DataValid.SetInvalid(InvalidType.Providers);//Providers includes clinics.
			//Call this a second time so we can log if any important changes were made to this form.
			//_signupOut gets filled on load and should not be null at this point
			Action actionCloseProgress=ODProgress.Show(EventCategory.EServices,typeof(EServicesEvent),"Saving eServices...");
			WebServiceMainHQProxy.GetEServiceSetupFull(GetUserSignupPortalPermissions(),oldSignupOut:_signupOut);
			actionCloseProgress?.Invoke();
		}
		
		protected override CreateParams CreateParams {
			get {
			   CreateParams cp=base.CreateParams;
			   cp.ClassStyle=cp.ClassStyle | CP_NOCLOSE_BUTTON;
			   return cp;
			}
		}
	}
}