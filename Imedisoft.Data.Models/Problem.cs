using Imedisoft.Data.Annotations;
using System;

namespace Imedisoft.Data.Models
{
    [Table("problems")]
	public class Problem
	{
		[PrimaryKey]
		public long Id;

		[ForeignKey(typeof(ProblemDefinition), nameof(ProblemDefinition.Id))]
		public long ProblemDefId;

		// [ForeignKey(typeof(Patient), nameof(Patient.PatNum))]
		public long PatientId; // TODO: Fix annotation once the Patient model has been moved into this project...

		/// <summary>
		/// Any note about this disease that is specific to this patient.
		/// </summary>
		public string PatientNote;

		public ProblemStatus Status;

		/// <summary>
		/// Used to export EHR CCD functional status and/or cognitive status information only.
		/// </summary>
		public FunctionalStatus FunctionalStatus;

		/// <summary>
		/// Date that the disease was diagnosed. Can be null if unknown.
		/// </summary>
		public DateTime? DateStart;

		/// <summary>
		///		<para>
		///			Date that the disease was set resolved or inactive. Will be null if still active.
		///		</para>
		///		<para>
		///			ProbStatus should be used to determine if it is active or not.
		///		</para>
		/// </summary>
		public DateTime? DateStop;

		/// <summary>
		/// FK to snomed.SnomedCode.
		/// Used in EHR CCD export/import only. 
		/// Must be one of the following SNOMED codes:
		/// Problem/Concern (55607006 or blank), Finding (404684003), Complaint (409586006), Dignosis (282291009), Condition (64572001), FunctionalLimitation (248536006), Symptom (418799008).
		/// </summary>
		public string SnomedProblemType;

		[Column(AutoGenerated = true)]
		public DateTime LastModifiedDate;

		public Problem Copy() => (Problem)MemberwiseClone();
	}

	/// <summary>
	/// Identifies the status of a problem.
	/// </summary>
	public enum ProblemStatus
	{
		Active,
		Resolved,
		Inactive
	}

	/// <summary>
	/// Used in EHR to export patient functional and cognitive statuses on CCD documents.
	/// </summary>
	public enum FunctionalStatus
	{
		/// <summary>
		/// Default value.  If not using EHR, then each diseasedef will use this value.
		/// </summary>
		Problem,

		/// <summary>
		/// This clinical statement contains details of an evaluation or assessment of a patient’s 
		/// cognitive status. The evaluation may include assessment of a patient's mood, memory, 
		/// and ability to make decisions. The statement will include, if present, supporting 
		/// caregivers, non-medical devices, and the time period for which the evaluation and 
		/// assessment were performed.
		/// </summary>
		CognitiveResult,

		/// <summary>
		/// A cognitive status problem observation is a clinical statement that describes a 
		/// patient's cognitive condition, findings or symptoms. Examples of cognitive problem 
		/// observations are inability to recall, amnesia, dementia, and aggressive behavior. A 
		/// cognitive problem observation is a finding or medical condition. This is different from
		/// a cognitive result observation, which is a response to a question that provides insight 
		/// to the patient's cognitive status. It reflects findings that provide information about 
		/// a medical condition, while a result observation reflects responses to questions in a 
		/// cognitive test or those that provide information about a person's judgement, 
		/// comprehension ability, and response speed.
		/// </summary>
		CognitiveProblem,

		/// <summary>
		/// This clinical statement represents details of an evaluation or assessment of a 
		/// patient’s functional status. The evaluation may include assessment of a patient's 
		/// language, vision, hearing, activities of daily living, behavior, general function, 
		/// mobility and self-care status. The statement will include, if present, supporting 
		/// caregivers, non-medical devices, and the time period for which the evaluation and 
		/// assessment were performed.
		/// </summary>
		FunctionalResult,

		/// <summary>
		/// A functional status problem observation is a clinical statement that represents a 
		/// patient’s functional perfomance and ability.
		/// </summary>
		FunctionalProblem,
	}
}
