//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using Imedisoft.Data;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class EhrMeasureEventCrud {
		///<summary>Gets one EhrMeasureEvent object from the database using the primary key.  Returns null if not found.</summary>
		public static EhrMeasureEvent SelectOne(long ehrMeasureEventNum) {
			string command="SELECT * FROM ehrmeasureevent "
				+"WHERE EhrMeasureEventNum = "+POut.Long(ehrMeasureEventNum);
			List<EhrMeasureEvent> list=TableToList(Database.ExecuteDataTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EhrMeasureEvent object from the database using a query.</summary>
		public static EhrMeasureEvent SelectOne(string command) {

			List<EhrMeasureEvent> list=TableToList(Database.ExecuteDataTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EhrMeasureEvent objects from the database using a query.</summary>
		public static List<EhrMeasureEvent> SelectMany(string command) {

			List<EhrMeasureEvent> list=TableToList(Database.ExecuteDataTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EhrMeasureEvent> TableToList(DataTable table) {
			List<EhrMeasureEvent> retVal=new List<EhrMeasureEvent>();
			EhrMeasureEvent ehrMeasureEvent;
			foreach(DataRow row in table.Rows) {
				ehrMeasureEvent=new EhrMeasureEvent();
				ehrMeasureEvent.Id    = PIn.Long  (row["EhrMeasureEventNum"].ToString());
				ehrMeasureEvent.Date            = PIn.Date (row["DateTEvent"].ToString());
				ehrMeasureEvent.Type             = (OpenDentBusiness.EhrMeasureEventType)PIn.Int(row["EventType"].ToString());
				ehrMeasureEvent.PatientId                = PIn.Long  (row["PatNum"].ToString());
				ehrMeasureEvent.MoreInfo              = PIn.String(row["MoreInfo"].ToString());
				ehrMeasureEvent.CodeValueEvent        = PIn.String(row["CodeValueEvent"].ToString());
				ehrMeasureEvent.CodeSystemEvent       = PIn.String(row["CodeSystemEvent"].ToString());
				ehrMeasureEvent.CodeValueResult       = PIn.String(row["CodeValueResult"].ToString());
				ehrMeasureEvent.CodeSystemResult      = PIn.String(row["CodeSystemResult"].ToString());
				ehrMeasureEvent.ObjectId                  = PIn.Long  (row["FKey"].ToString());
				ehrMeasureEvent.TobaccoStartDate      = PIn.Date  (row["DateStartTobacco"].ToString());
				ehrMeasureEvent.TobaccoCessationDesire= PIn.Byte  (row["TobaccoCessationDesire"].ToString());
				retVal.Add(ehrMeasureEvent);
			}
			return retVal;
		}

		///<summary>Converts a list of EhrMeasureEvent into a DataTable.</summary>
		public static DataTable ListToTable(List<EhrMeasureEvent> listEhrMeasureEvents,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EhrMeasureEvent";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EhrMeasureEventNum");
			table.Columns.Add("DateTEvent");
			table.Columns.Add("EventType");
			table.Columns.Add("PatNum");
			table.Columns.Add("MoreInfo");
			table.Columns.Add("CodeValueEvent");
			table.Columns.Add("CodeSystemEvent");
			table.Columns.Add("CodeValueResult");
			table.Columns.Add("CodeSystemResult");
			table.Columns.Add("FKey");
			table.Columns.Add("DateStartTobacco");
			table.Columns.Add("TobaccoCessationDesire");
			foreach(EhrMeasureEvent ehrMeasureEvent in listEhrMeasureEvents) {
				table.Rows.Add(new object[] {
					POut.Long  (ehrMeasureEvent.Id),
					POut.DateT (ehrMeasureEvent.Date,false),
					POut.Int   ((int)ehrMeasureEvent.Type),
					POut.Long  (ehrMeasureEvent.PatientId),
					            ehrMeasureEvent.MoreInfo,
					            ehrMeasureEvent.CodeValueEvent,
					            ehrMeasureEvent.CodeSystemEvent,
					            ehrMeasureEvent.CodeValueResult,
					            ehrMeasureEvent.CodeSystemResult,
					POut.Long  (ehrMeasureEvent.ObjectId??0),
					POut.DateT (ehrMeasureEvent.TobaccoStartDate??DateTime.MinValue,false),
					POut.Byte  (ehrMeasureEvent.TobaccoCessationDesire),
				});
			}
			return table;
		}

		///<summary>Inserts one EhrMeasureEvent into the database.  Returns the new priKey.</summary>
		public static long Insert(EhrMeasureEvent ehrMeasureEvent) {
			return Insert(ehrMeasureEvent,false);
		}

		///<summary>Inserts one EhrMeasureEvent into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EhrMeasureEvent ehrMeasureEvent,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				ehrMeasureEvent.Id=ReplicationServers.GetKey("ehrmeasureevent","EhrMeasureEventNum");
			}
			string command="INSERT INTO ehrmeasureevent (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EhrMeasureEventNum,";
			}
			command+="DateTEvent,EventType,PatNum,MoreInfo,CodeValueEvent,CodeSystemEvent,CodeValueResult,CodeSystemResult,FKey,DateStartTobacco,TobaccoCessationDesire) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(ehrMeasureEvent.Id)+",";
			}
			command+=
				     POut.DateT (ehrMeasureEvent.Date)+","
				+    POut.Int   ((int)ehrMeasureEvent.Type)+","
				+    POut.Long  (ehrMeasureEvent.PatientId)+","
				+"'"+POut.String(ehrMeasureEvent.MoreInfo)+"',"
				+"'"+POut.String(ehrMeasureEvent.CodeValueEvent)+"',"
				+"'"+POut.String(ehrMeasureEvent.CodeSystemEvent)+"',"
				+"'"+POut.String(ehrMeasureEvent.CodeValueResult)+"',"
				+"'"+POut.String(ehrMeasureEvent.CodeSystemResult)+"',"
				+    POut.Long  (ehrMeasureEvent.ObjectId??0)+","
				+    POut.Date  (ehrMeasureEvent.TobaccoStartDate??DateTime.MinValue)+","
				+    POut.Byte  (ehrMeasureEvent.TobaccoCessationDesire)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Database.ExecuteNonQuery(command);
			}
			else {
				ehrMeasureEvent.Id=Database.ExecuteInsert(command);
			}
			return ehrMeasureEvent.Id;
		}

		///<summary>Inserts many EhrMeasureEvents into the database.</summary>
		public static void InsertMany(List<EhrMeasureEvent> listEhrMeasureEvents) {
			InsertMany(listEhrMeasureEvents,false);
		}

		///<summary>Inserts many EhrMeasureEvents into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<EhrMeasureEvent> listEhrMeasureEvents,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				foreach(EhrMeasureEvent ehrMeasureEvent in listEhrMeasureEvents) {
					Insert(ehrMeasureEvent);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				int countRows=0;
				while(index < listEhrMeasureEvents.Count) {
					EhrMeasureEvent ehrMeasureEvent=listEhrMeasureEvents[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO ehrmeasureevent (");
						if(useExistingPK) {
							sbCommands.Append("EhrMeasureEventNum,");
						}
						sbCommands.Append("DateTEvent,EventType,PatNum,MoreInfo,CodeValueEvent,CodeSystemEvent,CodeValueResult,CodeSystemResult,FKey,DateStartTobacco,TobaccoCessationDesire) VALUES ");
						countRows=0;
					}
					else {
						hasComma=true;
					}
					if(useExistingPK) {
						sbRow.Append(POut.Long(ehrMeasureEvent.Id)); sbRow.Append(",");
					}
					sbRow.Append(POut.DateT(ehrMeasureEvent.Date)); sbRow.Append(",");
					sbRow.Append(POut.Int((int)ehrMeasureEvent.Type)); sbRow.Append(",");
					sbRow.Append(POut.Long(ehrMeasureEvent.PatientId)); sbRow.Append(",");
					sbRow.Append("'"+POut.String(ehrMeasureEvent.MoreInfo)+"'"); sbRow.Append(",");
					sbRow.Append("'"+POut.String(ehrMeasureEvent.CodeValueEvent)+"'"); sbRow.Append(",");
					sbRow.Append("'"+POut.String(ehrMeasureEvent.CodeSystemEvent)+"'"); sbRow.Append(",");
					sbRow.Append("'"+POut.String(ehrMeasureEvent.CodeValueResult)+"'"); sbRow.Append(",");
					sbRow.Append("'"+POut.String(ehrMeasureEvent.CodeSystemResult)+"'"); sbRow.Append(",");
					sbRow.Append(POut.Long(ehrMeasureEvent.ObjectId??0)); sbRow.Append(",");
					sbRow.Append(POut.Date(ehrMeasureEvent.TobaccoStartDate??DateTime.MinValue)); sbRow.Append(",");
					sbRow.Append(POut.Byte(ehrMeasureEvent.TobaccoCessationDesire)); sbRow.Append(")");
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
						Database.ExecuteNonQuery(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						countRows++;
						if(index==listEhrMeasureEvents.Count-1) {
							Database.ExecuteNonQuery(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one EhrMeasureEvent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EhrMeasureEvent ehrMeasureEvent) {
			return InsertNoCache(ehrMeasureEvent,false);
		}

		///<summary>Inserts one EhrMeasureEvent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EhrMeasureEvent ehrMeasureEvent,bool useExistingPK) {
			
			string command="INSERT INTO ehrmeasureevent (";
			if(!useExistingPK) {
				ehrMeasureEvent.Id=ReplicationServers.GetKeyNoCache("ehrmeasureevent","EhrMeasureEventNum");
			}
			if(useExistingPK) {
				command+="EhrMeasureEventNum,";
			}
			command+="DateTEvent,EventType,PatNum,MoreInfo,CodeValueEvent,CodeSystemEvent,CodeValueResult,CodeSystemResult,FKey,DateStartTobacco,TobaccoCessationDesire) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(ehrMeasureEvent.Id)+",";
			}
			command+=
				     POut.DateT (ehrMeasureEvent.Date)+","
				+    POut.Int   ((int)ehrMeasureEvent.Type)+","
				+    POut.Long  (ehrMeasureEvent.PatientId)+","
				+"'"+POut.String(ehrMeasureEvent.MoreInfo)+"',"
				+"'"+POut.String(ehrMeasureEvent.CodeValueEvent)+"',"
				+"'"+POut.String(ehrMeasureEvent.CodeSystemEvent)+"',"
				+"'"+POut.String(ehrMeasureEvent.CodeValueResult)+"',"
				+"'"+POut.String(ehrMeasureEvent.CodeSystemResult)+"',"
				+    POut.Long  (ehrMeasureEvent.ObjectId??0)+","
				+    POut.Date  (ehrMeasureEvent.TobaccoStartDate??DateTime.MinValue)+","
				+    POut.Byte  (ehrMeasureEvent.TobaccoCessationDesire)+")";
			if(useExistingPK) {
				Database.ExecuteNonQuery(command);
			}
			else {
				ehrMeasureEvent.Id=Database.ExecuteInsert(command);
			}
			return ehrMeasureEvent.Id;
		}

		///<summary>Updates one EhrMeasureEvent in the database.</summary>
		public static void Update(EhrMeasureEvent ehrMeasureEvent) {
			string command="UPDATE ehrmeasureevent SET "
				+"DateTEvent            =  "+POut.DateT (ehrMeasureEvent.Date)+", "
				+"EventType             =  "+POut.Int   ((int)ehrMeasureEvent.Type)+", "
				+"PatNum                =  "+POut.Long  (ehrMeasureEvent.PatientId)+", "
				+"MoreInfo              = '"+POut.String(ehrMeasureEvent.MoreInfo)+"', "
				+"CodeValueEvent        = '"+POut.String(ehrMeasureEvent.CodeValueEvent)+"', "
				+"CodeSystemEvent       = '"+POut.String(ehrMeasureEvent.CodeSystemEvent)+"', "
				+"CodeValueResult       = '"+POut.String(ehrMeasureEvent.CodeValueResult)+"', "
				+"CodeSystemResult      = '"+POut.String(ehrMeasureEvent.CodeSystemResult)+"', "
				+"FKey                  =  "+POut.Long  (ehrMeasureEvent.ObjectId??0)+", "
				+"DateStartTobacco      =  "+POut.Date  (ehrMeasureEvent.TobaccoStartDate??DateTime.MinValue)+", "
				+"TobaccoCessationDesire=  "+POut.Byte  (ehrMeasureEvent.TobaccoCessationDesire)+" "
				+"WHERE EhrMeasureEventNum = "+POut.Long(ehrMeasureEvent.Id);
			Database.ExecuteNonQuery(command);
		}

		///<summary>Deletes one EhrMeasureEvent from the database.</summary>
		public static void Delete(long ehrMeasureEventNum) {
			string command="DELETE FROM ehrmeasureevent "
				+"WHERE EhrMeasureEventNum = "+POut.Long(ehrMeasureEventNum);
			Database.ExecuteNonQuery(command);
		}

	}
}