//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class Programs
	{
		public static Program FromReader(MySqlDataReader dataReader)
		{
			return new Program
			{
				Id = (long)dataReader["ProgramNum"],
				Name = (string)dataReader["ProgName"],
				Description = (string)dataReader["ProgDesc"],
				Enabled = (Convert.ToInt32(dataReader["Enabled"]) == 1),
				Path = (string)dataReader["Path"],
				CommandLine = (string)dataReader["CommandLine"],
				Note = (string)dataReader["Note"],
				ButtonImage = (string)dataReader["ButtonImage"]
			};
		}

		/// <summary>
		/// Selects a single Program object from the database using the specified SQL command.
		/// </summary>
		public static Program SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Program"/> object with the specified key from the database.
		/// </summary>
		public static Program SelectOne(Int64 programNum)
			=> SelectOne("SELECT * FROM `Program` WHERE `ProgramNum` = " + programNum);

		/// <summary>
		/// Selects multiple <see cref="Program"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Program> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Program"/> into the database.
		/// </summary>
		public static long Insert(Program program)
			=> program.Id = Database.ExecuteInsert(
				"INSERT INTO `Program` " +
				"(`ProgName`, `ProgDesc`, `Enabled`, `Path`, `CommandLine`, `Note`, `ButtonImage`) " +
				"VALUES (" +
					"@ProgName, @ProgDesc, @Enabled, @Path, @CommandLine, @Note, @ButtonImage" +
				")");

		/// <summary>
		/// Updates the specified <see cref="Program"/> in the database.
		/// </summary>
		public static void Update(Program program)
			=> Database.ExecuteNonQuery(
				"UPDATE `Program` SET " +
					"`ProgDesc` = @ProgDesc, " +
					"`Enabled` = @Enabled, " +
					"`Path` = @Path, " +
					"`CommandLine` = @CommandLine, " +
					"`Note` = @Note, " +
					"`ButtonImage` = @ButtonImage " +
				"WHERE `ProgramNum` = @ProgramNum",
					new MySqlParameter("ProgramNum", program.Id),
					new MySqlParameter("ProgDesc", program.Description ?? ""),
					new MySqlParameter("Enabled", (program.Enabled ? 1 : 0)),
					new MySqlParameter("Path", program.Path ?? ""),
					new MySqlParameter("CommandLine", program.CommandLine ?? ""),
					new MySqlParameter("Note", program.Note ?? ""),
					new MySqlParameter("ButtonImage", program.ButtonImage ?? ""));

		/// <summary>
		/// Updates the specified <see cref="Program"/> in the database.
		/// </summary>
		public static bool Update(Program programNew, Program programOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (programNew.Description != programOld.Description)
			{
				updates.Add("`ProgDesc` = @ProgDesc");
				parameters.Add(new MySqlParameter("ProgDesc", programNew.Description ?? ""));
			}

			if (programNew.Enabled != programOld.Enabled)
			{
				updates.Add("`Enabled` = @Enabled");
				parameters.Add(new MySqlParameter("Enabled", (programNew.Enabled ? 1 : 0)));
			}

			if (programNew.Path != programOld.Path)
			{
				updates.Add("`Path` = @Path");
				parameters.Add(new MySqlParameter("Path", programNew.Path ?? ""));
			}

			if (programNew.CommandLine != programOld.CommandLine)
			{
				updates.Add("`CommandLine` = @CommandLine");
				parameters.Add(new MySqlParameter("CommandLine", programNew.CommandLine ?? ""));
			}

			if (programNew.Note != programOld.Note)
			{
				updates.Add("`Note` = @Note");
				parameters.Add(new MySqlParameter("Note", programNew.Note ?? ""));
			}

			if (programNew.ButtonImage != programOld.ButtonImage)
			{
				updates.Add("`ButtonImage` = @ButtonImage");
				parameters.Add(new MySqlParameter("ButtonImage", programNew.ButtonImage ?? ""));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("ProgramNum", programNew.Id));

			Database.ExecuteNonQuery("UPDATE `Program` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `ProgramNum` = @ProgramNum",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="Program"/> object from the database.
		/// </summary>
		public static void Delete(Int64 programNum)
			 => Database.ExecuteNonQuery("DELETE FROM `Program` WHERE `ProgramNum` = " + programNum);

		/// <summary>
		/// Deletes the specified <see cref="Program"/> object from the database.
		/// </summary>
		public static void Delete(Program program)
			=> Delete(program.Id);
	}
}
