//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;

namespace OpenDentBusiness.Crud
{
	public class AccountCrud
	{
		public static Account FromReader(MySqlDataReader dataReader)
		{
			return new Account
			{
				AccountNum = (long)dataReader["AccountNum"],
				Description = (string)dataReader["Description"],
				AcctType = (AccountType)Convert.ToInt32(dataReader["AcctType"]),
				BankNumber = (string)dataReader["BankNumber"],
				Inactive = (Convert.ToInt32(dataReader["Inactive"]) == 1),
				AccountColor = Color.FromArgb((int)dataReader["AccountColor"])
			};
		}

		/// <summary>
		/// Selects a single Account object from the database using the specified SQL command.
		/// </summary>
		public static Account SelectOne(string command)
			=> Database.SelectOne(command, FromReader);

		/// <summary>
		/// Selects a single <see cref="Account"/> object from the database using the specified SQL command.
		/// </summary>
		public static Account SelectOne(Int64 accountNum)
			=> SelectOne("SELECT * FROM `Account` WHERE `AccountNum` = " + accountNum);

		/// <summary>
		/// Selects multiple <see cref="Account"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Account> SelectMany(string command)
			=> Database.SelectMany(command, FromReader);

		/// <summary>
		/// Inserts the specified <see cref="Account"/> into the database.
		/// </summary>
		public static long Insert(Account account)
			=> account.AccountNum = Database.ExecuteInsert(
				"INSERT INTO `Account` " +
				"(`Description`, `AcctType`, `BankNumber`, `Inactive`, `AccountColor`) " +
				"VALUES (" +
					"@Description, @AcctType, @BankNumber, @Inactive, @AccountColor" +
				")");

		/// <summary>
		/// Updates the specified <see cref="Account"/> in the database.
		/// </summary>
		public static void Update(Account account)
			=> Database.ExecuteNonQuery(
				"UPDATE `Account` SET " +
					"`Description` = @Description, " +
					"`AcctType` = @AcctType, " +
					"`BankNumber` = @BankNumber, " +
					"`Inactive` = @Inactive, " +
					"`AccountColor` = @AccountColor " +
				"WHERE `AccountNum` = @AccountNum",
					new MySqlParameter("AccountNum", account.AccountNum),
					new MySqlParameter("Description", account.Description ?? ""),
					new MySqlParameter("AcctType", (int)account.AcctType),
					new MySqlParameter("BankNumber", account.BankNumber ?? ""),
					new MySqlParameter("Inactive", (account.Inactive ? 1 : 0)),
					new MySqlParameter("AccountColor", account.AccountColor.ToArgb()));

		/// <summary>
		/// Updates the specified <see cref="Account"/> in the database.
		/// </summary>
		public static void Update(Account accountNew, Account accountOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (accountNew.Description != accountOld.Description)
			{
				updates.Add("`Description` = @Description");
				parameters.Add(new MySqlParameter("Description", accountNew.Description ?? ""));
			}

			if (accountNew.AcctType != accountOld.AcctType)
			{
				updates.Add("`AcctType` = @AcctType");
				parameters.Add(new MySqlParameter("AcctType", (int)accountNew.AcctType));
			}

			if (accountNew.BankNumber != accountOld.BankNumber)
			{
				updates.Add("`BankNumber` = @BankNumber");
				parameters.Add(new MySqlParameter("BankNumber", accountNew.BankNumber ?? ""));
			}

			if (accountNew.Inactive != accountOld.Inactive)
			{
				updates.Add("`Inactive` = @Inactive");
				parameters.Add(new MySqlParameter("Inactive", (accountNew.Inactive ? 1 : 0)));
			}

			if (accountNew.AccountColor != accountOld.AccountColor)
			{
				updates.Add("`AccountColor` = @AccountColor");
				parameters.Add(new MySqlParameter("AccountColor", accountNew.AccountColor.ToArgb()));
			}

			if (updates.Count == 0) return;

			parameters.Add(new MySqlParameter("AccountNum", accountNew.AccountNum));

			Database.ExecuteNonQuery("UPDATE `Account` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `AccountNum` = @AccountNum",
					parameters.ToArray());
		}

		/// <summary>
		/// Deletes a single <see cref="Account"/> object from the database.
		/// </summary>
		public static void Delete(Int64 accountNum)
			 => Database.ExecuteNonQuery("DELETE FROM `Account` WHERE `AccountNum` = " + accountNum);

		/// <summary>
		/// Deletes the specified <see cref="Account"/> object from the database.
		/// </summary>
		public static void Delete(Account account)
			=> Delete(account.AccountNum);
	}
}
