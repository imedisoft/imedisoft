//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;

namespace OpenDentBusiness.Crud
{
	public class AccountCrud
	{
		public static Account FromReader(MySqlDataReader dataReader)
		{
			return new Account
			{
				AccountNum = (long)dataReader["AccountNum"],
				Description = dataReader["Description"] as string,
				AcctType = (AccountType)Convert.ToInt32(dataReader["AcctType"]),
				BankNumber = dataReader["BankNumber"] as string,
				Inactive = (Convert.ToInt32(dataReader["Inactive"]) == 1),
				AccountColor = Color.FromArgb((int)dataReader["AccountColor"])
			};
		}

		/// <summary>
		/// Selects a single Account object from the database using the specified SQL command.
		/// </summary>
		public static Account SelectOne(string command)
			=> Database.SelectOne(command, FromReader);

		/// <summary>
		/// Selects a single <see cref="Account"/> object from the database using the specified SQL command.
		/// </summary>
		public static Account SelectOne(Int64 accountNum)
			=> SelectOne("SELECT * FROM `Account` WHERE `AccountNum` = " + accountNum);

		/// <summary>
		/// Selects multiple <see cref="Account"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Account> SelectMany(string command)
			=> Database.SelectMany(command, FromReader);

		/// <summary>
		/// Inserts the specified <see cref="Account"/> into the database.
		/// </summary>
		public static long Insert(Account account)
			=> account.AccountNum = Database.ExecuteInsert(
				"INSERT INTO `Account` " +
				"(`Description`, `AcctType`, `BankNumber`, `Inactive`, `AccountColor`) " +
				"VALUES (" +
					POut.String(account.Description) + ", " +
					(int)account.AcctType + ", " +
					POut.String(account.BankNumber) + ", " +
					(account.Inactive ? 1 : 0) + ", " +
					account.AccountColor.ToArgb() +
				")");

		/// <summary>
		/// Updates the specified <see cref="Account"/> in the database.
		/// </summary>
		public static void Update(Account account)
			=> Database.ExecuteNonQuery(
				"UPDATE `Account` SET " +
					"`Description` = " + POut.String(account.Description) + ", " +
					"`AcctType` = " + (int)account.AcctType + ", " +
					"`BankNumber` = " + POut.String(account.BankNumber) + ", " +
					"`Inactive` = " + (account.Inactive ? 1 : 0) + ", " +
					"`AccountColor` = " + account.AccountColor.ToArgb() + " " +
				"WHERE `AccountNum` = " + account.AccountNum);

		/// <summary>
		/// Updates the specified <see cref="Account"/> in the database.
		/// </summary>
		public static void Update(Account accountNew, Account accountOld)
		{
			var updates = new List<string>();

			if (accountNew.Description != accountOld.Description)
				updates.Add("`Description` = " + POut.String(accountNew.Description));
			if (accountNew.AcctType != accountOld.AcctType)
				updates.Add("`AcctType` = " + (int)accountNew.AcctType);
			if (accountNew.BankNumber != accountOld.BankNumber)
				updates.Add("`BankNumber` = " + POut.String(accountNew.BankNumber));
			if (accountNew.Inactive != accountOld.Inactive)
				updates.Add("`Inactive` = " + (accountNew.Inactive ? 1 : 0));
			if (accountNew.AccountColor != accountOld.AccountColor)
				updates.Add("`AccountColor` = " + accountNew.AccountColor.ToArgb());

			if (updates.Count == 0) return;

			Database.ExecuteNonQuery("UPDATE `Account` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `AccountNum` = " + accountNew.AccountNum);
		}
		/// <summary>
		/// Deletes a single <see cref="Account"/> object from the database.
		/// </summary>
		public static void Delete(Int64 accountNum) => Database.ExecuteNonQuery("DELETE FROM `Account` WHERE `AccountNum` = " + accountNum);

		/// <summary>
		/// Deletes the specified <see cref="Account"/> object from the database.
		/// </summary>
		public static void Delete(Account account) => Delete(account.AccountNum);
	}
}
