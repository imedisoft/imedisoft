//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness.Crud
{
	public class AllergyDefCrud
	{
		public static AllergyDef FromReader(MySqlDataReader dataReader)
		{
			return new AllergyDef
			{
				AllergyDefNum = (long)dataReader["AllergyDefNum"],
				Description = (string)dataReader["Description"],
				IsHidden = (Convert.ToInt32(dataReader["IsHidden"]) == 1),
				DateTStamp = (DateTime)dataReader["DateTStamp"],
				SnomedType = (SnomedAllergy)Convert.ToInt32(dataReader["SnomedType"]),
				MedicationNum = (long)dataReader["MedicationNum"],
				UniiCode = (string)dataReader["UniiCode"]
			};
		}

		/// <summary>
		/// Selects a single AllergyDef object from the database using the specified SQL command.
		/// </summary>
		public static AllergyDef SelectOne(string command)
			=> Database.SelectOne(command, FromReader);

		/// <summary>
		/// Selects a single <see cref="AllergyDef"/> object from the database using the specified SQL command.
		/// </summary>
		public static AllergyDef SelectOne(Int64 allergyDefNum)
			=> SelectOne("SELECT * FROM `AllergyDef` WHERE `AllergyDefNum` = " + allergyDefNum);

		/// <summary>
		/// Selects multiple <see cref="AllergyDef"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<AllergyDef> SelectMany(string command)
			=> Database.SelectMany(command, FromReader);

		/// <summary>
		/// Inserts the specified <see cref="AllergyDef"/> into the database.
		/// </summary>
		public static long Insert(AllergyDef allergyDef)
			=> allergyDef.AllergyDefNum = Database.ExecuteInsert(
				"INSERT INTO `AllergyDef` " + 
				"(`Description`, `IsHidden`, `DateTStamp`, `SnomedType`, `MedicationNum`, `UniiCode`) " + 
				"VALUES (" + 
					"@Description, @IsHidden, @DateTStamp, @SnomedType, @MedicationNum, @UniiCode" + 
				")");

		/// <summary>
		/// Updates the specified <see cref="AllergyDef"/> in the database.
		/// </summary>
		public static void Update(AllergyDef allergyDef)
			=> Database.ExecuteNonQuery(
				"UPDATE `AllergyDef` SET " + 
					"`Description` = @Description, " + 
					"`IsHidden` = @IsHidden, " + 
					"`DateTStamp` = @DateTStamp, " + 
					"`SnomedType` = @SnomedType, " + 
					"`MedicationNum` = @MedicationNum, " + 
					"`UniiCode` = @UniiCode " + 
				"WHERE `AllergyDefNum` = @AllergyDefNum",
					new MySqlParameter("AllergyDefNum", allergyDef.AllergyDefNum),
					new MySqlParameter("Description", allergyDef.Description ?? ""),
					new MySqlParameter("IsHidden", (allergyDef.IsHidden ? 1 : 0)),
					new MySqlParameter("DateTStamp", allergyDef.DateTStamp),
					new MySqlParameter("SnomedType", (int)allergyDef.SnomedType),
					new MySqlParameter("MedicationNum", allergyDef.MedicationNum),
					new MySqlParameter("UniiCode", allergyDef.UniiCode ?? ""));

		/// <summary>
		/// Updates the specified <see cref="AllergyDef"/> in the database.
		/// </summary>
		public static void Update(AllergyDef allergyDefNew, AllergyDef allergyDefOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (allergyDefNew.Description != allergyDefOld.Description)
			{
				updates.Add("`Description` = @Description");
				parameters.Add(new MySqlParameter("Description", allergyDefNew.Description ?? ""));
			}

			if (allergyDefNew.IsHidden != allergyDefOld.IsHidden)
			{
				updates.Add("`IsHidden` = @IsHidden");
				parameters.Add(new MySqlParameter("IsHidden", (allergyDefNew.IsHidden ? 1 : 0)));
			}

			if (allergyDefNew.DateTStamp != allergyDefOld.DateTStamp)
			{
				updates.Add("`DateTStamp` = @DateTStamp");
				parameters.Add(new MySqlParameter("DateTStamp", allergyDefNew.DateTStamp));
			}

			if (allergyDefNew.SnomedType != allergyDefOld.SnomedType)
			{
				updates.Add("`SnomedType` = @SnomedType");
				parameters.Add(new MySqlParameter("SnomedType", (int)allergyDefNew.SnomedType));
			}

			if (allergyDefNew.MedicationNum != allergyDefOld.MedicationNum)
			{
				updates.Add("`MedicationNum` = @MedicationNum");
				parameters.Add(new MySqlParameter("MedicationNum", allergyDefNew.MedicationNum));
			}

			if (allergyDefNew.UniiCode != allergyDefOld.UniiCode)
			{
				updates.Add("`UniiCode` = @UniiCode");
				parameters.Add(new MySqlParameter("UniiCode", allergyDefNew.UniiCode ?? ""));
			}

			if (updates.Count == 0) return;

			parameters.Add(new MySqlParameter("AllergyDefNum", allergyDefNew.AllergyDefNum));

			Database.ExecuteNonQuery("UPDATE `AllergyDef` " + 
				"SET " + string.Join(", ", updates) + " " + 
				"WHERE `AllergyDefNum` = @AllergyDefNum",
					parameters.ToArray());
		}

		/// <summary>
		/// Deletes a single <see cref="AllergyDef"/> object from the database.
		/// </summary>
		public static void Delete(Int64 allergyDefNum)
			 => Database.ExecuteNonQuery("DELETE FROM `AllergyDef` WHERE `AllergyDefNum` = " + allergyDefNum);

		/// <summary>
		/// Deletes the specified <see cref="AllergyDef"/> object from the database.
		/// </summary>
		public static void Delete(AllergyDef allergyDef)
			=> Delete(allergyDef.AllergyDefNum);
	}
}
