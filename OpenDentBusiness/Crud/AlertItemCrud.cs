//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class AlertItems
	{
		public static AlertItem FromReader(MySqlDataReader dataReader)
		{
			return new AlertItem
			{
				Id = (long)dataReader["id"],
				ClinicId = dataReader["clinic_id"] as long?,
				UserId = dataReader["user_id"] as long?,
				Description = (string)dataReader["description"],
				Details = (string)dataReader["details"],
				Type = (AlertType)Convert.ToInt32(dataReader["type"]),
				Severity = (SeverityType)Convert.ToInt32(dataReader["severity"]),
				Actions = (ActionType)Convert.ToInt32(dataReader["actions"]),
				FormToOpen = (FormType)Convert.ToInt32(dataReader["form_to_open"]),
				ObjectId = dataReader["object_id"] as long?
			};
		}

		/// <summary>
		/// Selects a single AlertItem object from the database using the specified SQL command.
		/// </summary>
		public static AlertItem SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="AlertItem"/> object with the specified key from the database.
		/// </summary>
		public static AlertItem SelectOne(Int64 id)
			=> SelectOne("SELECT * FROM `alert_items` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="AlertItem"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<AlertItem> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="AlertItem"/> into the database.
		/// </summary>
		public static long Insert(AlertItem alertItem)
			=> alertItem.Id = Database.ExecuteInsert(
				"INSERT INTO `alert_items` " +
				"(`clinic_id`, `user_id`, `description`, `details`, `type`, `severity`, `actions`, `form_to_open`, `object_id`) " +
				"VALUES (" +
					"@clinic_id, @user_id, @description, @details, @type, @severity, @actions, @form_to_open, @object_id" +
				")");

		/// <summary>
		/// Updates the specified <see cref="AlertItem"/> in the database.
		/// </summary>
		public static void Update(AlertItem alertItem)
			=> Database.ExecuteNonQuery(
				"UPDATE `alert_items` SET " +
					"`clinic_id` = @clinic_id, " +
					"`user_id` = @user_id, " +
					"`description` = @description, " +
					"`details` = @details, " +
					"`type` = @type, " +
					"`severity` = @severity, " +
					"`actions` = @actions, " +
					"`form_to_open` = @form_to_open, " +
					"`object_id` = @object_id " +
				"WHERE `id` = @id",
					new MySqlParameter("id", alertItem.Id),
					new MySqlParameter("clinic_id", (alertItem.ClinicId.HasValue ? (object)alertItem.ClinicId.Value : DBNull.Value)),
					new MySqlParameter("user_id", (alertItem.UserId.HasValue ? (object)alertItem.UserId.Value : DBNull.Value)),
					new MySqlParameter("description", alertItem.Description ?? ""),
					new MySqlParameter("details", alertItem.Details ?? ""),
					new MySqlParameter("type", (int)alertItem.Type),
					new MySqlParameter("severity", (int)alertItem.Severity),
					new MySqlParameter("actions", (int)alertItem.Actions),
					new MySqlParameter("form_to_open", (int)alertItem.FormToOpen),
					new MySqlParameter("object_id", (alertItem.ObjectId.HasValue ? (object)alertItem.ObjectId.Value : DBNull.Value)));

		/// <summary>
		/// Updates the specified <see cref="AlertItem"/> in the database.
		/// </summary>
		public static bool Update(AlertItem alertItemNew, AlertItem alertItemOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (alertItemNew.ClinicId != alertItemOld.ClinicId)
			{
				updates.Add("`clinic_id` = @clinic_id");
				parameters.Add(new MySqlParameter("clinic_id", (alertItemNew.ClinicId.HasValue ? (object)alertItemNew.ClinicId.Value : DBNull.Value)));
			}

			if (alertItemNew.UserId != alertItemOld.UserId)
			{
				updates.Add("`user_id` = @user_id");
				parameters.Add(new MySqlParameter("user_id", (alertItemNew.UserId.HasValue ? (object)alertItemNew.UserId.Value : DBNull.Value)));
			}

			if (alertItemNew.Description != alertItemOld.Description)
			{
				updates.Add("`description` = @description");
				parameters.Add(new MySqlParameter("description", alertItemNew.Description ?? ""));
			}

			if (alertItemNew.Details != alertItemOld.Details)
			{
				updates.Add("`details` = @details");
				parameters.Add(new MySqlParameter("details", alertItemNew.Details ?? ""));
			}

			if (alertItemNew.Type != alertItemOld.Type)
			{
				updates.Add("`type` = @type");
				parameters.Add(new MySqlParameter("type", (int)alertItemNew.Type));
			}

			if (alertItemNew.Severity != alertItemOld.Severity)
			{
				updates.Add("`severity` = @severity");
				parameters.Add(new MySqlParameter("severity", (int)alertItemNew.Severity));
			}

			if (alertItemNew.Actions != alertItemOld.Actions)
			{
				updates.Add("`actions` = @actions");
				parameters.Add(new MySqlParameter("actions", (int)alertItemNew.Actions));
			}

			if (alertItemNew.FormToOpen != alertItemOld.FormToOpen)
			{
				updates.Add("`form_to_open` = @form_to_open");
				parameters.Add(new MySqlParameter("form_to_open", (int)alertItemNew.FormToOpen));
			}

			if (alertItemNew.ObjectId != alertItemOld.ObjectId)
			{
				updates.Add("`object_id` = @object_id");
				parameters.Add(new MySqlParameter("object_id", (alertItemNew.ObjectId.HasValue ? (object)alertItemNew.ObjectId.Value : DBNull.Value)));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("id", alertItemNew.Id));

			Database.ExecuteNonQuery("UPDATE `alert_items` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `id` = @id",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="AlertItem"/> object from the database.
		/// </summary>
		public static void Delete(Int64 id)
			 => Database.ExecuteNonQuery("DELETE FROM `alert_items` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="AlertItem"/> object from the database.
		/// </summary>
		public static void Delete(AlertItem alertItem)
			=> Delete(alertItem.Id);
	}
}
