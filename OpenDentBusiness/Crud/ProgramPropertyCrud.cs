//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class ProgramProperties
	{
		public static ProgramProperty FromReader(MySqlDataReader dataReader)
		{
			return new ProgramProperty
			{
				Id = (long)dataReader["ProgramPropertyNum"],
				ProgramId = (long)dataReader["ProgramNum"],
				Name = (string)dataReader["PropertyDesc"],
				Value = (string)dataReader["PropertyValue"],
				MachineName = (string)dataReader["ComputerName"],
				ClinicId = (long)dataReader["ClinicNum"]
			};
		}

		/// <summary>
		/// Selects a single ProgramProperty object from the database using the specified SQL command.
		/// </summary>
		public static ProgramProperty SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="ProgramProperty"/> object with the specified key from the database.
		/// </summary>
		public static ProgramProperty SelectOne(Int64 programPropertyNum)
			=> SelectOne("SELECT * FROM `ProgramProperty` WHERE `ProgramPropertyNum` = " + programPropertyNum);

		/// <summary>
		/// Selects multiple <see cref="ProgramProperty"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<ProgramProperty> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="ProgramProperty"/> into the database.
		/// </summary>
		public static long Insert(ProgramProperty programProperty)
			=> programProperty.Id = Database.ExecuteInsert(
				"INSERT INTO `ProgramProperty` " +
				"(`ProgramNum`, `PropertyDesc`, `PropertyValue`, `ComputerName`, `ClinicNum`) " +
				"VALUES (" +
					"@ProgramNum, @PropertyDesc, @PropertyValue, @ComputerName, @ClinicNum" +
				")");

		/// <summary>
		/// Updates the specified <see cref="ProgramProperty"/> in the database.
		/// </summary>
		public static void Update(ProgramProperty programProperty)
			=> Database.ExecuteNonQuery(
				"UPDATE `ProgramProperty` SET " +
					"`ProgramNum` = @ProgramNum, " +
					"`PropertyDesc` = @PropertyDesc, " +
					"`PropertyValue` = @PropertyValue, " +
					"`ComputerName` = @ComputerName, " +
					"`ClinicNum` = @ClinicNum " +
				"WHERE `ProgramPropertyNum` = @ProgramPropertyNum",
					new MySqlParameter("ProgramPropertyNum", programProperty.Id),
					new MySqlParameter("ProgramNum", programProperty.ProgramId),
					new MySqlParameter("PropertyDesc", programProperty.Name ?? ""),
					new MySqlParameter("PropertyValue", programProperty.Value ?? ""),
					new MySqlParameter("ComputerName", programProperty.MachineName ?? ""),
					new MySqlParameter("ClinicNum", programProperty.ClinicId));

		/// <summary>
		/// Updates the specified <see cref="ProgramProperty"/> in the database.
		/// </summary>
		public static bool Update(ProgramProperty programPropertyNew, ProgramProperty programPropertyOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (programPropertyNew.ProgramId != programPropertyOld.ProgramId)
			{
				updates.Add("`ProgramNum` = @ProgramNum");
				parameters.Add(new MySqlParameter("ProgramNum", programPropertyNew.ProgramId));
			}

			if (programPropertyNew.Name != programPropertyOld.Name)
			{
				updates.Add("`PropertyDesc` = @PropertyDesc");
				parameters.Add(new MySqlParameter("PropertyDesc", programPropertyNew.Name ?? ""));
			}

			if (programPropertyNew.Value != programPropertyOld.Value)
			{
				updates.Add("`PropertyValue` = @PropertyValue");
				parameters.Add(new MySqlParameter("PropertyValue", programPropertyNew.Value ?? ""));
			}

			if (programPropertyNew.MachineName != programPropertyOld.MachineName)
			{
				updates.Add("`ComputerName` = @ComputerName");
				parameters.Add(new MySqlParameter("ComputerName", programPropertyNew.MachineName ?? ""));
			}

			if (programPropertyNew.ClinicId != programPropertyOld.ClinicId)
			{
				updates.Add("`ClinicNum` = @ClinicNum");
				parameters.Add(new MySqlParameter("ClinicNum", programPropertyNew.ClinicId));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("ProgramPropertyNum", programPropertyNew.Id));

			Database.ExecuteNonQuery("UPDATE `ProgramProperty` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `ProgramPropertyNum` = @ProgramPropertyNum",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="ProgramProperty"/> object from the database.
		/// </summary>
		public static void Delete(Int64 programPropertyNum)
			 => Database.ExecuteNonQuery("DELETE FROM `ProgramProperty` WHERE `ProgramPropertyNum` = " + programPropertyNum);
	}
}
