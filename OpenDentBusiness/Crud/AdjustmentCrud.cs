//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness.Crud
{
	public class AdjustmentCrud
	{
		public static Adjustment FromReader(MySqlDataReader dataReader)
		{
			return new Adjustment
			{
				Id = (long)dataReader["AdjNum"],
				AdjustDate = (DateTime)dataReader["AdjDate"],
				AdjustAmount = (double)dataReader["AdjAmt"],
				PatientId = (long)dataReader["PatNum"],
				Type = (long)dataReader["AdjType"],
				ProviderId = (long)dataReader["ProvNum"],
				Note = (string)dataReader["AdjNote"],
				ProcedureDate = (DateTime)dataReader["ProcDate"],
				ProcedureId = (long)dataReader["ProcNum"],
				AddedDate = (DateTime)dataReader["DateEntry"],
				ClinicId = (long)dataReader["ClinicNum"],
				StatementId = (long)dataReader["StatementNum"],
				AddedByUserId = (long)dataReader["SecUserNumEntry"],
				LastModifiedDate = (DateTime)dataReader["SecDateTEdit"]
			};
		}

		/// <summary>
		/// Selects a single Adjustment object from the database using the specified SQL command.
		/// </summary>
		public static Adjustment SelectOne(string command)
			=> Database.SelectOne(command, FromReader);

		/// <summary>
		/// Selects a single <see cref="Adjustment"/> object from the database using the specified SQL command.
		/// </summary>
		public static Adjustment SelectOne(Int64 adjNum)
			=> SelectOne("SELECT * FROM `Adjustment` WHERE `AdjNum` = " + adjNum);

		/// <summary>
		/// Selects multiple <see cref="Adjustment"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Adjustment> SelectMany(string command)
			=> Database.SelectMany(command, FromReader);

		/// <summary>
		/// Inserts the specified <see cref="Adjustment"/> into the database.
		/// </summary>
		public static long Insert(Adjustment adjustment)
			=> adjustment.Id = Database.ExecuteInsert(
				"INSERT INTO `Adjustment` " + 
				"(`AdjDate`, `AdjAmt`, `PatNum`, `AdjType`, `ProvNum`, `AdjNote`, `ProcDate`, `ProcNum`, `DateEntry`, `ClinicNum`, `StatementNum`, `SecUserNumEntry`, `SecDateTEdit`) " + 
				"VALUES (" + 
					"@AdjDate, @AdjAmt, @PatNum, @AdjType, @ProvNum, @AdjNote, @ProcDate, @ProcNum, @DateEntry, @ClinicNum, @StatementNum, @SecUserNumEntry, @SecDateTEdit" + 
				")");

		/// <summary>
		/// Updates the specified <see cref="Adjustment"/> in the database.
		/// </summary>
		public static void Update(Adjustment adjustment)
			=> Database.ExecuteNonQuery(
				"UPDATE `Adjustment` SET " + 
					"`AdjDate` = @AdjDate, " + 
					"`AdjAmt` = @AdjAmt, " + 
					"`PatNum` = @PatNum, " + 
					"`AdjType` = @AdjType, " + 
					"`ProvNum` = @ProvNum, " + 
					"`AdjNote` = @AdjNote, " + 
					"`ProcDate` = @ProcDate, " + 
					"`ProcNum` = @ProcNum, " + 
					"`DateEntry` = @DateEntry, " + 
					"`ClinicNum` = @ClinicNum, " + 
					"`StatementNum` = @StatementNum, " + 
					"`SecUserNumEntry` = @SecUserNumEntry, " + 
					"`SecDateTEdit` = @SecDateTEdit " + 
				"WHERE `AdjNum` = @AdjNum",
					new MySqlParameter("AdjNum", adjustment.Id),
					new MySqlParameter("AdjDate", adjustment.AdjustDate),
					new MySqlParameter("AdjAmt", adjustment.AdjustAmount),
					new MySqlParameter("PatNum", adjustment.PatientId),
					new MySqlParameter("AdjType", adjustment.Type),
					new MySqlParameter("ProvNum", adjustment.ProviderId),
					new MySqlParameter("AdjNote", adjustment.Note ?? ""),
					new MySqlParameter("ProcDate", adjustment.ProcedureDate),
					new MySqlParameter("ProcNum", adjustment.ProcedureId),
					new MySqlParameter("DateEntry", adjustment.AddedDate),
					new MySqlParameter("ClinicNum", adjustment.ClinicId),
					new MySqlParameter("StatementNum", adjustment.StatementId),
					new MySqlParameter("SecUserNumEntry", adjustment.AddedByUserId),
					new MySqlParameter("SecDateTEdit", adjustment.LastModifiedDate));

		/// <summary>
		/// Updates the specified <see cref="Adjustment"/> in the database.
		/// </summary>
		public static void Update(Adjustment adjustmentNew, Adjustment adjustmentOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (adjustmentNew.AdjustDate != adjustmentOld.AdjustDate)
			{
				updates.Add("`AdjDate` = @AdjDate");
				parameters.Add(new MySqlParameter("AdjDate", adjustmentNew.AdjustDate));
			}

			if (adjustmentNew.AdjustAmount != adjustmentOld.AdjustAmount)
			{
				updates.Add("`AdjAmt` = @AdjAmt");
				parameters.Add(new MySqlParameter("AdjAmt", adjustmentNew.AdjustAmount));
			}

			if (adjustmentNew.PatientId != adjustmentOld.PatientId)
			{
				updates.Add("`PatNum` = @PatNum");
				parameters.Add(new MySqlParameter("PatNum", adjustmentNew.PatientId));
			}

			if (adjustmentNew.Type != adjustmentOld.Type)
			{
				updates.Add("`AdjType` = @AdjType");
				parameters.Add(new MySqlParameter("AdjType", adjustmentNew.Type));
			}

			if (adjustmentNew.ProviderId != adjustmentOld.ProviderId)
			{
				updates.Add("`ProvNum` = @ProvNum");
				parameters.Add(new MySqlParameter("ProvNum", adjustmentNew.ProviderId));
			}

			if (adjustmentNew.Note != adjustmentOld.Note)
			{
				updates.Add("`AdjNote` = @AdjNote");
				parameters.Add(new MySqlParameter("AdjNote", adjustmentNew.Note ?? ""));
			}

			if (adjustmentNew.ProcedureDate != adjustmentOld.ProcedureDate)
			{
				updates.Add("`ProcDate` = @ProcDate");
				parameters.Add(new MySqlParameter("ProcDate", adjustmentNew.ProcedureDate));
			}

			if (adjustmentNew.ProcedureId != adjustmentOld.ProcedureId)
			{
				updates.Add("`ProcNum` = @ProcNum");
				parameters.Add(new MySqlParameter("ProcNum", adjustmentNew.ProcedureId));
			}

			if (adjustmentNew.AddedDate != adjustmentOld.AddedDate)
			{
				updates.Add("`DateEntry` = @DateEntry");
				parameters.Add(new MySqlParameter("DateEntry", adjustmentNew.AddedDate));
			}

			if (adjustmentNew.ClinicId != adjustmentOld.ClinicId)
			{
				updates.Add("`ClinicNum` = @ClinicNum");
				parameters.Add(new MySqlParameter("ClinicNum", adjustmentNew.ClinicId));
			}

			if (adjustmentNew.StatementId != adjustmentOld.StatementId)
			{
				updates.Add("`StatementNum` = @StatementNum");
				parameters.Add(new MySqlParameter("StatementNum", adjustmentNew.StatementId));
			}

			if (adjustmentNew.AddedByUserId != adjustmentOld.AddedByUserId)
			{
				updates.Add("`SecUserNumEntry` = @SecUserNumEntry");
				parameters.Add(new MySqlParameter("SecUserNumEntry", adjustmentNew.AddedByUserId));
			}

			if (adjustmentNew.LastModifiedDate != adjustmentOld.LastModifiedDate)
			{
				updates.Add("`SecDateTEdit` = @SecDateTEdit");
				parameters.Add(new MySqlParameter("SecDateTEdit", adjustmentNew.LastModifiedDate));
			}

			if (updates.Count == 0) return;

			parameters.Add(new MySqlParameter("AdjNum", adjustmentNew.Id));

			Database.ExecuteNonQuery("UPDATE `Adjustment` " + 
				"SET " + string.Join(", ", updates) + " " + 
				"WHERE `AdjNum` = @AdjNum",
					parameters.ToArray());
		}

		/// <summary>
		/// Deletes a single <see cref="Adjustment"/> object from the database.
		/// </summary>
		public static void Delete(Int64 adjNum)
			 => Database.ExecuteNonQuery("DELETE FROM `Adjustment` WHERE `AdjNum` = " + adjNum);

		/// <summary>
		/// Deletes the specified <see cref="Adjustment"/> object from the database.
		/// </summary>
		public static void Delete(Adjustment adjustment)
			=> Delete(adjustment.Id);
	}
}
