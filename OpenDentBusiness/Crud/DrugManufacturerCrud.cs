//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using Imedisoft.Data;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class DrugManufacturerCrud {
		///<summary>Gets one DrugManufacturer object from the database using the primary key.  Returns null if not found.</summary>
		public static DrugManufacturer SelectOne(long drugManufacturerNum) {
			string command="SELECT * FROM drugmanufacturer "
				+"WHERE DrugManufacturerNum = "+POut.Long(drugManufacturerNum);
			List<DrugManufacturer> list=TableToList(Database.ExecuteDataTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one DrugManufacturer object from the database using a query.</summary>
		public static DrugManufacturer SelectOne(string command) {

			List<DrugManufacturer> list=TableToList(Database.ExecuteDataTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of DrugManufacturer objects from the database using a query.</summary>
		public static List<DrugManufacturer> SelectMany(string command) {

			List<DrugManufacturer> list=TableToList(Database.ExecuteDataTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<DrugManufacturer> TableToList(DataTable table) {
			List<DrugManufacturer> retVal=new List<DrugManufacturer>();
			DrugManufacturer drugManufacturer;
			foreach(DataRow row in table.Rows) {
				drugManufacturer=new DrugManufacturer();
				drugManufacturer.DrugManufacturerNum= PIn.Long  (row["DrugManufacturerNum"].ToString());
				drugManufacturer.ManufacturerName   = PIn.String(row["ManufacturerName"].ToString());
				drugManufacturer.ManufacturerCode   = PIn.String(row["ManufacturerCode"].ToString());
				retVal.Add(drugManufacturer);
			}
			return retVal;
		}

		///<summary>Converts a list of DrugManufacturer into a DataTable.</summary>
		public static DataTable ListToTable(List<DrugManufacturer> listDrugManufacturers,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="DrugManufacturer";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("DrugManufacturerNum");
			table.Columns.Add("ManufacturerName");
			table.Columns.Add("ManufacturerCode");
			foreach(DrugManufacturer drugManufacturer in listDrugManufacturers) {
				table.Rows.Add(new object[] {
					POut.Long  (drugManufacturer.DrugManufacturerNum),
					            drugManufacturer.ManufacturerName,
					            drugManufacturer.ManufacturerCode,
				});
			}
			return table;
		}

		///<summary>Inserts one DrugManufacturer into the database.  Returns the new priKey.</summary>
		public static long Insert(DrugManufacturer drugManufacturer) {
			return Insert(drugManufacturer,false);
		}

		///<summary>Inserts one DrugManufacturer into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(DrugManufacturer drugManufacturer,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				drugManufacturer.DrugManufacturerNum=ReplicationServers.GetKey("drugmanufacturer","DrugManufacturerNum");
			}
			string command="INSERT INTO drugmanufacturer (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DrugManufacturerNum,";
			}
			command+="ManufacturerName,ManufacturerCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(drugManufacturer.DrugManufacturerNum)+",";
			}
			command+=
				 "'"+POut.String(drugManufacturer.ManufacturerName)+"',"
				+"'"+POut.String(drugManufacturer.ManufacturerCode)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Database.ExecuteNonQuery(command);
			}
			else {
				drugManufacturer.DrugManufacturerNum=Database.ExecuteInsert(command);
			}
			return drugManufacturer.DrugManufacturerNum;
		}

		///<summary>Inserts one DrugManufacturer into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(DrugManufacturer drugManufacturer) {
			return InsertNoCache(drugManufacturer,false);
		}

		///<summary>Inserts one DrugManufacturer into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(DrugManufacturer drugManufacturer,bool useExistingPK) {
			
			string command="INSERT INTO drugmanufacturer (";
			if(!useExistingPK) {
				drugManufacturer.DrugManufacturerNum=ReplicationServers.GetKeyNoCache("drugmanufacturer","DrugManufacturerNum");
			}
			if(useExistingPK) {
				command+="DrugManufacturerNum,";
			}
			command+="ManufacturerName,ManufacturerCode) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(drugManufacturer.DrugManufacturerNum)+",";
			}
			command+=
				 "'"+POut.String(drugManufacturer.ManufacturerName)+"',"
				+"'"+POut.String(drugManufacturer.ManufacturerCode)+"')";
			if(useExistingPK) {
				Database.ExecuteNonQuery(command);
			}
			else {
				drugManufacturer.DrugManufacturerNum=Database.ExecuteInsert(command);
			}
			return drugManufacturer.DrugManufacturerNum;
		}

		///<summary>Updates one DrugManufacturer in the database.</summary>
		public static void Update(DrugManufacturer drugManufacturer) {
			string command="UPDATE drugmanufacturer SET "
				+"ManufacturerName   = '"+POut.String(drugManufacturer.ManufacturerName)+"', "
				+"ManufacturerCode   = '"+POut.String(drugManufacturer.ManufacturerCode)+"' "
				+"WHERE DrugManufacturerNum = "+POut.Long(drugManufacturer.DrugManufacturerNum);
			Database.ExecuteNonQuery(command);
		}

		///<summary>Updates one DrugManufacturer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(DrugManufacturer drugManufacturer,DrugManufacturer oldDrugManufacturer) {
			string command="";
			if(drugManufacturer.ManufacturerName != oldDrugManufacturer.ManufacturerName) {
				if(command!="") { command+=",";}
				command+="ManufacturerName = '"+POut.String(drugManufacturer.ManufacturerName)+"'";
			}
			if(drugManufacturer.ManufacturerCode != oldDrugManufacturer.ManufacturerCode) {
				if(command!="") { command+=",";}
				command+="ManufacturerCode = '"+POut.String(drugManufacturer.ManufacturerCode)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE drugmanufacturer SET "+command
				+" WHERE DrugManufacturerNum = "+POut.Long(drugManufacturer.DrugManufacturerNum);
			Database.ExecuteNonQuery(command);
			return true;
		}

		///<summary>Returns true if Update(DrugManufacturer,DrugManufacturer) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(DrugManufacturer drugManufacturer,DrugManufacturer oldDrugManufacturer) {
			if(drugManufacturer.ManufacturerName != oldDrugManufacturer.ManufacturerName) {
				return true;
			}
			if(drugManufacturer.ManufacturerCode != oldDrugManufacturer.ManufacturerCode) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one DrugManufacturer from the database.</summary>
		public static void Delete(long drugManufacturerNum) {
			string command="DELETE FROM drugmanufacturer "
				+"WHERE DrugManufacturerNum = "+POut.Long(drugManufacturerNum);
			Database.ExecuteNonQuery(command);
		}

	}
}