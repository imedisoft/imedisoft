//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class Tasks
	{
		public static Task FromReader(MySqlDataReader dataReader)
		{
			return new Task
			{
				Id = (long)dataReader["id"],
				TaskListId = (long)dataReader["task_list_id"],
				Description = (string)dataReader["description"],
				Repeat = (Convert.ToInt32(dataReader["repeat"]) == 1),
				RepeatInterval = (TaskRepeatInterval)Convert.ToInt32(dataReader["repeat_interval"]),
				RepeatDate = dataReader["repeat_date"] as DateTime?,
				RepeatTaskId = dataReader["repeat_task_id"] as long?,
				PatientId = dataReader["patient_id"] as long?,
				AppointmentId = dataReader["appointment_id"] as long?,
				DateStart = dataReader["date_start"] as DateTime?,
				UserId = (long)dataReader["user_id"],
				PriorityId = (long)dataReader["priority_id"],
				ReminderGroupId = (string)dataReader["reminder_group_id"],
				ReminderType = (TaskReminderType)Convert.ToInt32(dataReader["reminder_type"]),
				ReminderFrequency = (int)dataReader["reminder_frequency"],
				DateCompleted = dataReader["date_completed"] as DateTime?,
				DateAdded = (DateTime)dataReader["date_added"],
				DateModified = (DateTime)dataReader["date_modified"],
				Status = (TaskStatus)Convert.ToInt32(dataReader["status"])
			};
		}

		/// <summary>
		/// Selects a single Task object from the database using the specified SQL command.
		/// </summary>
		public static Task SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Task"/> object with the specified key from the database.
		/// </summary>
		public static Task SelectOne(Int64 id)
			=> SelectOne("SELECT * FROM `tasks` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Task"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Task> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Task"/> into the database.
		/// </summary>
		private static long InsertInternal(Task task)
			=> task.Id = Database.ExecuteInsert(
				"INSERT INTO `tasks` " +
				"(`task_list_id`, `description`, `repeat`, `repeat_interval`, `repeat_date`, `repeat_task_id`, `patient_id`, `appointment_id`, `date_start`, `user_id`, `priority_id`, `reminder_group_id`, `reminder_type`, `reminder_frequency`, `date_completed`, `date_added`, `date_modified`, `status`) " +
				"VALUES (" +
					"@task_list_id, @description, @repeat, @repeat_interval, @repeat_date, @repeat_task_id, @patient_id, @appointment_id, @date_start, @user_id, @priority_id, @reminder_group_id, @reminder_type, @reminder_frequency, @date_completed, @date_added, @date_modified, @status" +
				")");

		/// <summary>
		/// Updates the specified <see cref="Task"/> in the database.
		/// </summary>
		public static void Update(Task task)
			=> Database.ExecuteNonQuery(
				"UPDATE `tasks` SET " +
					"`task_list_id` = @task_list_id, " +
					"`description` = @description, " +
					"`repeat` = @repeat, " +
					"`repeat_interval` = @repeat_interval, " +
					"`repeat_date` = @repeat_date, " +
					"`repeat_task_id` = @repeat_task_id, " +
					"`patient_id` = @patient_id, " +
					"`appointment_id` = @appointment_id, " +
					"`date_start` = @date_start, " +
					"`user_id` = @user_id, " +
					"`priority_id` = @priority_id, " +
					"`reminder_group_id` = @reminder_group_id, " +
					"`reminder_type` = @reminder_type, " +
					"`reminder_frequency` = @reminder_frequency, " +
					"`date_completed` = @date_completed, " +
					"`date_added` = @date_added, " +
					"`date_modified` = @date_modified, " +
					"`status` = @status " +
				"WHERE `id` = @id",
					new MySqlParameter("id", task.Id),
					new MySqlParameter("task_list_id", task.TaskListId),
					new MySqlParameter("description", task.Description ?? ""),
					new MySqlParameter("repeat", (task.Repeat ? 1 : 0)),
					new MySqlParameter("repeat_interval", (int)task.RepeatInterval),
					new MySqlParameter("repeat_date", (task.RepeatDate.HasValue ? (object)task.RepeatDate.Value : DBNull.Value)),
					new MySqlParameter("repeat_task_id", (task.RepeatTaskId.HasValue ? (object)task.RepeatTaskId.Value : DBNull.Value)),
					new MySqlParameter("patient_id", (task.PatientId.HasValue ? (object)task.PatientId.Value : DBNull.Value)),
					new MySqlParameter("appointment_id", (task.AppointmentId.HasValue ? (object)task.AppointmentId.Value : DBNull.Value)),
					new MySqlParameter("date_start", (task.DateStart.HasValue ? (object)task.DateStart.Value : DBNull.Value)),
					new MySqlParameter("user_id", task.UserId),
					new MySqlParameter("priority_id", task.PriorityId),
					new MySqlParameter("reminder_group_id", task.ReminderGroupId ?? ""),
					new MySqlParameter("reminder_type", (int)task.ReminderType),
					new MySqlParameter("reminder_frequency", task.ReminderFrequency),
					new MySqlParameter("date_completed", (task.DateCompleted.HasValue ? (object)task.DateCompleted.Value : DBNull.Value)),
					new MySqlParameter("date_added", task.DateAdded),
					new MySqlParameter("date_modified", task.DateModified),
					new MySqlParameter("status", (int)task.Status));

		/// <summary>
		/// Updates the specified <see cref="Task"/> in the database.
		/// </summary>
		private static bool UpdateInternal(Task tasksNew, Task tasksOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (tasksNew.TaskListId != tasksOld.TaskListId)
			{
				updates.Add("`task_list_id` = @task_list_id");
				parameters.Add(new MySqlParameter("task_list_id", tasksNew.TaskListId));
			}

			if (tasksNew.Description != tasksOld.Description)
			{
				updates.Add("`description` = @description");
				parameters.Add(new MySqlParameter("description", tasksNew.Description ?? ""));
			}

			if (tasksNew.Repeat != tasksOld.Repeat)
			{
				updates.Add("`repeat` = @repeat");
				parameters.Add(new MySqlParameter("repeat", (tasksNew.Repeat ? 1 : 0)));
			}

			if (tasksNew.RepeatInterval != tasksOld.RepeatInterval)
			{
				updates.Add("`repeat_interval` = @repeat_interval");
				parameters.Add(new MySqlParameter("repeat_interval", (int)tasksNew.RepeatInterval));
			}

			if (tasksNew.RepeatDate != tasksOld.RepeatDate)
			{
				updates.Add("`repeat_date` = @repeat_date");
				parameters.Add(new MySqlParameter("repeat_date", (tasksNew.RepeatDate.HasValue ? (object)tasksNew.RepeatDate.Value : DBNull.Value)));
			}

			if (tasksNew.RepeatTaskId != tasksOld.RepeatTaskId)
			{
				updates.Add("`repeat_task_id` = @repeat_task_id");
				parameters.Add(new MySqlParameter("repeat_task_id", (tasksNew.RepeatTaskId.HasValue ? (object)tasksNew.RepeatTaskId.Value : DBNull.Value)));
			}

			if (tasksNew.PatientId != tasksOld.PatientId)
			{
				updates.Add("`patient_id` = @patient_id");
				parameters.Add(new MySqlParameter("patient_id", (tasksNew.PatientId.HasValue ? (object)tasksNew.PatientId.Value : DBNull.Value)));
			}

			if (tasksNew.AppointmentId != tasksOld.AppointmentId)
			{
				updates.Add("`appointment_id` = @appointment_id");
				parameters.Add(new MySqlParameter("appointment_id", (tasksNew.AppointmentId.HasValue ? (object)tasksNew.AppointmentId.Value : DBNull.Value)));
			}

			if (tasksNew.DateStart != tasksOld.DateStart)
			{
				updates.Add("`date_start` = @date_start");
				parameters.Add(new MySqlParameter("date_start", (tasksNew.DateStart.HasValue ? (object)tasksNew.DateStart.Value : DBNull.Value)));
			}

			if (tasksNew.UserId != tasksOld.UserId)
			{
				updates.Add("`user_id` = @user_id");
				parameters.Add(new MySqlParameter("user_id", tasksNew.UserId));
			}

			if (tasksNew.PriorityId != tasksOld.PriorityId)
			{
				updates.Add("`priority_id` = @priority_id");
				parameters.Add(new MySqlParameter("priority_id", tasksNew.PriorityId));
			}

			if (tasksNew.ReminderGroupId != tasksOld.ReminderGroupId)
			{
				updates.Add("`reminder_group_id` = @reminder_group_id");
				parameters.Add(new MySqlParameter("reminder_group_id", tasksNew.ReminderGroupId ?? ""));
			}

			if (tasksNew.ReminderType != tasksOld.ReminderType)
			{
				updates.Add("`reminder_type` = @reminder_type");
				parameters.Add(new MySqlParameter("reminder_type", (int)tasksNew.ReminderType));
			}

			if (tasksNew.ReminderFrequency != tasksOld.ReminderFrequency)
			{
				updates.Add("`reminder_frequency` = @reminder_frequency");
				parameters.Add(new MySqlParameter("reminder_frequency", tasksNew.ReminderFrequency));
			}

			if (tasksNew.DateCompleted != tasksOld.DateCompleted)
			{
				updates.Add("`date_completed` = @date_completed");
				parameters.Add(new MySqlParameter("date_completed", (tasksNew.DateCompleted.HasValue ? (object)tasksNew.DateCompleted.Value : DBNull.Value)));
			}

			if (tasksNew.DateAdded != tasksOld.DateAdded)
			{
				updates.Add("`date_added` = @date_added");
				parameters.Add(new MySqlParameter("date_added", tasksNew.DateAdded));
			}

			if (tasksNew.DateModified != tasksOld.DateModified)
			{
				updates.Add("`date_modified` = @date_modified");
				parameters.Add(new MySqlParameter("date_modified", tasksNew.DateModified));
			}

			if (tasksNew.Status != tasksOld.Status)
			{
				updates.Add("`status` = @status");
				parameters.Add(new MySqlParameter("status", (int)tasksNew.Status));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("id", tasksNew.Id));

			Database.ExecuteNonQuery("UPDATE `tasks` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `id` = @id",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="Task"/> object from the database.
		/// </summary>
		public static void Delete(Int64 id)
			 => Database.ExecuteNonQuery("DELETE FROM `tasks` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Task"/> object from the database.
		/// </summary>
		public static void Delete(Task task)
			=> Delete(task.Id);
	}
}
