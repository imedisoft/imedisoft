//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness.Crud
{
	public class AllergyCrud
	{
		public static Allergy FromReader(MySqlDataReader dataReader)
		{
			return new Allergy
			{
				AllergyNum = (long)dataReader["AllergyNum"],
				AllergyDefNum = (long)dataReader["AllergyDefNum"],
				PatNum = (long)dataReader["PatNum"],
				Reaction = (string)dataReader["Reaction"],
				StatusIsActive = (Convert.ToInt32(dataReader["StatusIsActive"]) == 1),
				DateTStamp = (DateTime)dataReader["DateTStamp"],
				DateAdverseReaction = (DateTime)dataReader["DateAdverseReaction"],
				SnomedReaction = (string)dataReader["SnomedReaction"]
			};
		}

		/// <summary>
		/// Selects a single Allergy object from the database using the specified SQL command.
		/// </summary>
		public static Allergy SelectOne(string command)
			=> Database.SelectOne(command, FromReader);

		/// <summary>
		/// Selects a single <see cref="Allergy"/> object from the database using the specified SQL command.
		/// </summary>
		public static Allergy SelectOne(Int64 allergyNum)
			=> SelectOne("SELECT * FROM `Allergy` WHERE `AllergyNum` = " + allergyNum);

		/// <summary>
		/// Selects multiple <see cref="Allergy"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Allergy> SelectMany(string command)
			=> Database.SelectMany(command, FromReader);

		/// <summary>
		/// Inserts the specified <see cref="Allergy"/> into the database.
		/// </summary>
		public static long Insert(Allergy allergy)
			=> allergy.AllergyNum = Database.ExecuteInsert(
				"INSERT INTO `Allergy` " + 
				"(`AllergyDefNum`, `PatNum`, `Reaction`, `StatusIsActive`, `DateTStamp`, `DateAdverseReaction`, `SnomedReaction`) " + 
				"VALUES (" + 
					"@AllergyDefNum, @PatNum, @Reaction, @StatusIsActive, @DateTStamp, @DateAdverseReaction, @SnomedReaction" + 
				")");

		/// <summary>
		/// Updates the specified <see cref="Allergy"/> in the database.
		/// </summary>
		public static void Update(Allergy allergy)
			=> Database.ExecuteNonQuery(
				"UPDATE `Allergy` SET " + 
					"`AllergyDefNum` = @AllergyDefNum, " + 
					"`PatNum` = @PatNum, " + 
					"`Reaction` = @Reaction, " + 
					"`StatusIsActive` = @StatusIsActive, " + 
					"`DateTStamp` = @DateTStamp, " + 
					"`DateAdverseReaction` = @DateAdverseReaction, " + 
					"`SnomedReaction` = @SnomedReaction " + 
				"WHERE `AllergyNum` = @AllergyNum",
					new MySqlParameter("AllergyNum", allergy.AllergyNum),
					new MySqlParameter("AllergyDefNum", allergy.AllergyDefNum),
					new MySqlParameter("PatNum", allergy.PatNum),
					new MySqlParameter("Reaction", allergy.Reaction ?? ""),
					new MySqlParameter("StatusIsActive", (allergy.StatusIsActive ? 1 : 0)),
					new MySqlParameter("DateTStamp", allergy.DateTStamp),
					new MySqlParameter("DateAdverseReaction", allergy.DateAdverseReaction),
					new MySqlParameter("SnomedReaction", allergy.SnomedReaction ?? ""));

		/// <summary>
		/// Updates the specified <see cref="Allergy"/> in the database.
		/// </summary>
		public static void Update(Allergy allergyNew, Allergy allergyOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (allergyNew.AllergyDefNum != allergyOld.AllergyDefNum)
			{
				updates.Add("`AllergyDefNum` = @AllergyDefNum");
				parameters.Add(new MySqlParameter("AllergyDefNum", allergyNew.AllergyDefNum));
			}

			if (allergyNew.PatNum != allergyOld.PatNum)
			{
				updates.Add("`PatNum` = @PatNum");
				parameters.Add(new MySqlParameter("PatNum", allergyNew.PatNum));
			}

			if (allergyNew.Reaction != allergyOld.Reaction)
			{
				updates.Add("`Reaction` = @Reaction");
				parameters.Add(new MySqlParameter("Reaction", allergyNew.Reaction ?? ""));
			}

			if (allergyNew.StatusIsActive != allergyOld.StatusIsActive)
			{
				updates.Add("`StatusIsActive` = @StatusIsActive");
				parameters.Add(new MySqlParameter("StatusIsActive", (allergyNew.StatusIsActive ? 1 : 0)));
			}

			if (allergyNew.DateTStamp != allergyOld.DateTStamp)
			{
				updates.Add("`DateTStamp` = @DateTStamp");
				parameters.Add(new MySqlParameter("DateTStamp", allergyNew.DateTStamp));
			}

			if (allergyNew.DateAdverseReaction != allergyOld.DateAdverseReaction)
			{
				updates.Add("`DateAdverseReaction` = @DateAdverseReaction");
				parameters.Add(new MySqlParameter("DateAdverseReaction", allergyNew.DateAdverseReaction));
			}

			if (allergyNew.SnomedReaction != allergyOld.SnomedReaction)
			{
				updates.Add("`SnomedReaction` = @SnomedReaction");
				parameters.Add(new MySqlParameter("SnomedReaction", allergyNew.SnomedReaction ?? ""));
			}

			if (updates.Count == 0) return;

			parameters.Add(new MySqlParameter("AllergyNum", allergyNew.AllergyNum));

			Database.ExecuteNonQuery("UPDATE `Allergy` " + 
				"SET " + string.Join(", ", updates) + " " + 
				"WHERE `AllergyNum` = @AllergyNum",
					parameters.ToArray());
		}

		/// <summary>
		/// Deletes a single <see cref="Allergy"/> object from the database.
		/// </summary>
		public static void Delete(Int64 allergyNum)
			 => Database.ExecuteNonQuery("DELETE FROM `Allergy` WHERE `AllergyNum` = " + allergyNum);

		/// <summary>
		/// Deletes the specified <see cref="Allergy"/> object from the database.
		/// </summary>
		public static void Delete(Allergy allergy)
			=> Delete(allergy.AllergyNum);
	}
}
