//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class TaskHistCrud {
		///<summary>Gets one TaskHist object from the database using the primary key.  Returns null if not found.</summary>
		public static TaskHistory SelectOne(long taskHistNum) {
			string command="SELECT * FROM taskhist "
				+"WHERE TaskHistNum = "+POut.Long(taskHistNum);
			List<TaskHistory> list=TableToList(Database.ExecuteDataTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one TaskHist object from the database using a query.</summary>
		public static TaskHistory SelectOne(string command) {

			List<TaskHistory> list=TableToList(Database.ExecuteDataTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of TaskHist objects from the database using a query.</summary>
		public static List<TaskHistory> SelectMany(string command) {

			List<TaskHistory> list=TableToList(Database.ExecuteDataTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<TaskHistory> TableToList(DataTable table) {
			List<TaskHistory> retVal=new List<TaskHistory>();
			TaskHistory taskHist;
			foreach(DataRow row in table.Rows) {
				taskHist=new TaskHistory();
				taskHist.Id      = PIn.Long  (row["TaskHistNum"].ToString());
				taskHist.HistoryUserId      = PIn.Long  (row["UserNumHist"].ToString());
				taskHist.HistoryDate       = PIn.Date (row["DateTStamp"].ToString());
				taskHist.Id          = PIn.Long  (row["TaskNum"].ToString());
				taskHist.TaskListId      = PIn.Long  (row["TaskListNum"].ToString());
				taskHist.RepeatDate         = PIn.Date  (row["DateTask"].ToString());
				taskHist.Description         = PIn.String(row["Descript"].ToString());
				taskHist.Status       = (OpenDentBusiness.TaskStatus)PIn.Int(row["TaskStatus"].ToString());
				taskHist.Repeat      = PIn.Bool  (row["IsRepeating"].ToString());
				taskHist.RepeatInterval         = (OpenDentBusiness.TaskRepeatInterval)PIn.Int(row["DateType"].ToString());
				taskHist.RepeatSourceTaskId          = PIn.Long  (row["FromNum"].ToString());
				taskHist.DateStart    = PIn.Date (row["DateTimeEntry"].ToString());
				taskHist.UserId          = PIn.Long  (row["UserNum"].ToString());
				taskHist.DateCompleted = PIn.Date (row["DateTimeFinished"].ToString());
				taskHist.PriorityId   = PIn.Long  (row["PriorityDefNum"].ToString());
				taskHist.ReminderGroupId  = PIn.String(row["ReminderGroupId"].ToString());
				taskHist.ReminderType     = (OpenDentBusiness.TaskReminderType)PIn.Int(row["ReminderType"].ToString());
				taskHist.ReminderFrequency= PIn.Int   (row["ReminderFrequency"].ToString());
				taskHist.DateAdded = PIn.Date (row["DateTimeOriginal"].ToString());
				taskHist.DateModified     = PIn.Date (row["SecDateTEdit"].ToString());
				retVal.Add(taskHist);
			}
			return retVal;
		}

		///<summary>Converts a list of TaskHist into a DataTable.</summary>
		public static DataTable ListToTable(List<TaskHistory> listTaskHists,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="TaskHist";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("TaskHistNum");
			table.Columns.Add("UserNumHist");
			table.Columns.Add("DateTStamp");
			table.Columns.Add("IsNoteChange");
			table.Columns.Add("TaskNum");
			table.Columns.Add("TaskListNum");
			table.Columns.Add("DateTask");
			table.Columns.Add("KeyNum");
			table.Columns.Add("Descript");
			table.Columns.Add("TaskStatus");
			table.Columns.Add("IsRepeating");
			table.Columns.Add("DateType");
			table.Columns.Add("FromNum");
			table.Columns.Add("ObjectType");
			table.Columns.Add("DateTimeEntry");
			table.Columns.Add("UserNum");
			table.Columns.Add("DateTimeFinished");
			table.Columns.Add("PriorityDefNum");
			table.Columns.Add("ReminderGroupId");
			table.Columns.Add("ReminderType");
			table.Columns.Add("ReminderFrequency");
			table.Columns.Add("DateTimeOriginal");
			table.Columns.Add("SecDateTEdit");
			foreach(TaskHistory taskHist in listTaskHists) {
				table.Rows.Add(new object[] {
					POut.Long  (taskHist.Id),
					POut.Long  (taskHist.HistoryUserId),
					POut.DateT (taskHist.HistoryDate,false),
					POut.Long  (taskHist.Id),
					POut.Long  (taskHist.TaskListId),
					            taskHist.Description,
					POut.Int   ((int)taskHist.Status),
					POut.Bool  (taskHist.Repeat),
					POut.Int   ((int)taskHist.RepeatInterval),
					POut.DateT (taskHist.DateStart.Value,false),
					POut.Long  (taskHist.UserId),
					POut.DateT (taskHist.DateCompleted.Value,false),
					POut.Long  (taskHist.PriorityId),
					            taskHist.ReminderGroupId,
					POut.Int   ((int)taskHist.ReminderType),
					POut.Int   (taskHist.ReminderFrequency),
					POut.DateT (taskHist.DateAdded,false),
					POut.DateT (taskHist.DateModified,false),
				});
			}
			return table;
		}

		///<summary>Inserts one TaskHist into the database.  Returns the new priKey.</summary>
		public static long Insert(TaskHistory taskHist) {
			return Insert(taskHist,false);
		}

		///<summary>Inserts one TaskHist into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(TaskHistory taskHist,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				taskHist.Id=ReplicationServers.GetKey("taskhist","TaskHistNum");
			}
			string command="INSERT INTO taskhist (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="TaskHistNum,";
			}
			command+="UserNumHist,DateTStamp,IsNoteChange,TaskNum,TaskListNum,DateTask,KeyNum,Descript,TaskStatus,IsRepeating,DateType,FromNum,ObjectType,DateTimeEntry,UserNum,DateTimeFinished,PriorityDefNum,ReminderGroupId,ReminderType,ReminderFrequency,DateTimeOriginal,SecDateTEdit) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(taskHist.Id)+",";
			}
			command+=
				     POut.Long  (taskHist.HistoryUserId)+","
				+    DbHelper.Now()+","
				+    POut.Long  (taskHist.Id)+","
				+    POut.Long  (taskHist.TaskListId)+","
				+    DbHelper.ParamChar+"paramDescript,"
				+    POut.Int   ((int)taskHist.Status)+","
				+    POut.Bool  (taskHist.Repeat)+","
				+    POut.Int   ((int)taskHist.RepeatInterval)+","
				+    POut.DateT (taskHist.DateStart.Value) +","
				+    POut.Long  (taskHist.UserId)+","
				+    POut.DateT (taskHist.DateCompleted.Value) +","
				+    POut.Long  (taskHist.PriorityId)+","
				+"'"+POut.String(taskHist.ReminderGroupId)+"',"
				+    POut.Int   ((int)taskHist.ReminderType)+","
				+    POut.Int   (taskHist.ReminderFrequency)+","
				+    POut.DateT (taskHist.DateAdded)+","
				+    POut.DateT (taskHist.DateModified)+")";
			if(taskHist.Description==null) {
				taskHist.Description="";
			}
			var paramDescript = new MySqlParameter("paramDescript", POut.StringParam(taskHist.Description));
			if(useExistingPK || PrefC.RandomKeys) {
				Database.ExecuteNonQuery(command,paramDescript);
			}
			else {
				taskHist.Id=Database.ExecuteInsert(command,paramDescript);
			}
			return taskHist.Id;
		}

		///<summary>Inserts one TaskHist into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(TaskHistory taskHist) {
			return InsertNoCache(taskHist,false);
		}

		///<summary>Inserts one TaskHist into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(TaskHistory taskHist,bool useExistingPK) {
			
			string command="INSERT INTO taskhist (";
			if(!useExistingPK) {
				taskHist.Id=ReplicationServers.GetKeyNoCache("taskhist","TaskHistNum");
			}
			if(useExistingPK) {
				command+="TaskHistNum,";
			}
			command+="UserNumHist,DateTStamp,IsNoteChange,TaskNum,TaskListNum,DateTask,KeyNum,Descript,TaskStatus,IsRepeating,DateType,FromNum,ObjectType,DateTimeEntry,UserNum,DateTimeFinished,PriorityDefNum,ReminderGroupId,ReminderType,ReminderFrequency,DateTimeOriginal,SecDateTEdit) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(taskHist.Id)+",";
			}
			command+=
				     POut.Long  (taskHist.HistoryUserId)+","
				+    DbHelper.Now()+","
				+    POut.Long  (taskHist.Id)+","
				+    POut.Long  (taskHist.TaskListId)+","
				+    DbHelper.ParamChar+"paramDescript,"
				+    POut.Int   ((int)taskHist.Status)+","
				+    POut.Bool  (taskHist.Repeat)+","
				+    POut.Int   ((int)taskHist.RepeatInterval)+","
				+    POut.DateT (taskHist.DateStart.Value) +","
				+    POut.Long  (taskHist.UserId)+","
				+    POut.DateT (taskHist.DateCompleted.Value) +","
				+    POut.Long  (taskHist.PriorityId)+","
				+"'"+POut.String(taskHist.ReminderGroupId)+"',"
				+    POut.Int   ((int)taskHist.ReminderType)+","
				+    POut.Int   (taskHist.ReminderFrequency)+","
				+    POut.DateT (taskHist.DateAdded)+","
				+    POut.DateT (taskHist.DateModified)+")";
			if(taskHist.Description==null) {
				taskHist.Description="";
			}
			var paramDescript = new MySqlParameter("paramDescript", POut.StringParam(taskHist.Description));
			if(useExistingPK) {
				Database.ExecuteNonQuery(command,paramDescript);
			}
			else {
				taskHist.Id=Database.ExecuteInsert(command,paramDescript);
			}
			return taskHist.Id;
		}

		///<summary>Deletes one TaskHist from the database.</summary>
		public static void Delete(long taskHistNum) {
			string command="DELETE FROM taskhist "
				+"WHERE TaskHistNum = "+POut.Long(taskHistNum);
			Database.ExecuteNonQuery(command);
		}

	}
}