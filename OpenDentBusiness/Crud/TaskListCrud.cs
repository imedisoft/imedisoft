//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class TaskLists
	{
		public static TaskList FromReader(MySqlDataReader dataReader)
		{
			return new TaskList
			{
				Id = (long)dataReader["id"],
				Description = (string)dataReader["description"],
				ParentId = dataReader["parent_id"] as long?,
				DateAdded = (DateTime)dataReader["date_added"],
				Status = (TaskListStatus)Convert.ToInt32(dataReader["status"])
			};
		}

		/// <summary>
		/// Selects a single TaskList object from the database using the specified SQL command.
		/// </summary>
		public static TaskList SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="TaskList"/> object with the specified key from the database.
		/// </summary>
		public static TaskList SelectOne(Int64 id)
			=> SelectOne("SELECT * FROM `tasklist` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="TaskList"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<TaskList> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="TaskList"/> into the database.
		/// </summary>
		public static long Insert(TaskList taskList)
			=> taskList.Id = Database.ExecuteInsert(
				"INSERT INTO `tasklist` " +
				"(`description`, `parent_id`, `date_added`, `status`) " +
				"VALUES (" +
					"@description, @parent_id, @date_added, @status" +
				")");

		/// <summary>
		/// Updates the specified <see cref="TaskList"/> in the database.
		/// </summary>
		public static void Update(TaskList taskList)
			=> Database.ExecuteNonQuery(
				"UPDATE `tasklist` SET " +
					"`description` = @description, " +
					"`parent_id` = @parent_id, " +
					"`date_added` = @date_added, " +
					"`status` = @status " +
				"WHERE `id` = @id",
					new MySqlParameter("id", taskList.Id),
					new MySqlParameter("description", taskList.Description ?? ""),
					new MySqlParameter("parent_id", (taskList.ParentId.HasValue ? (object)taskList.ParentId.Value : DBNull.Value)),
					new MySqlParameter("date_added", taskList.DateAdded),
					new MySqlParameter("status", (int)taskList.Status));

		/// <summary>
		/// Updates the specified <see cref="TaskList"/> in the database.
		/// </summary>
		public static bool Update(TaskList taskListNew, TaskList taskListOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (taskListNew.Description != taskListOld.Description)
			{
				updates.Add("`description` = @description");
				parameters.Add(new MySqlParameter("description", taskListNew.Description ?? ""));
			}

			if (taskListNew.ParentId != taskListOld.ParentId)
			{
				updates.Add("`parent_id` = @parent_id");
				parameters.Add(new MySqlParameter("parent_id", (taskListNew.ParentId.HasValue ? (object)taskListNew.ParentId.Value : DBNull.Value)));
			}

			if (taskListNew.DateAdded != taskListOld.DateAdded)
			{
				updates.Add("`date_added` = @date_added");
				parameters.Add(new MySqlParameter("date_added", taskListNew.DateAdded));
			}

			if (taskListNew.Status != taskListOld.Status)
			{
				updates.Add("`status` = @status");
				parameters.Add(new MySqlParameter("status", (int)taskListNew.Status));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("id", taskListNew.Id));

			Database.ExecuteNonQuery("UPDATE `tasklist` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `id` = @id",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="TaskList"/> object from the database.
		/// </summary>
		private static void DeleteInternal(Int64 id)
			 => Database.ExecuteNonQuery("DELETE FROM `tasklist` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="TaskList"/> object from the database.
		/// </summary>
		private static void DeleteInternal(TaskList taskList)
			=> DeleteInternal(taskList.Id);
	}
}
