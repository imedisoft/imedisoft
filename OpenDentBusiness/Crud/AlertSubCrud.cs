//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness.Crud
{
	public class AlertSubCrud
	{
		public static AlertSub FromReader(MySqlDataReader dataReader)
		{
			return new AlertSub
			{
				AlertSubNum = (long)dataReader["AlertSubNum"],
				UserNum = (long)dataReader["UserNum"],
				ClinicNum = (long)dataReader["ClinicNum"],
				Type = (AlertType)Convert.ToInt32(dataReader["Type"]),
				AlertCategoryNum = (long)dataReader["AlertCategoryNum"]
			};
		}

		/// <summary>
		/// Selects a single AlertSub object from the database using the specified SQL command.
		/// </summary>
		public static AlertSub SelectOne(string command)
			=> Database.SelectOne(command, FromReader);

		/// <summary>
		/// Selects a single <see cref="AlertSub"/> object from the database using the specified SQL command.
		/// </summary>
		public static AlertSub SelectOne(Int64 alertSubNum)
			=> SelectOne("SELECT * FROM `AlertSub` WHERE `AlertSubNum` = " + alertSubNum);

		/// <summary>
		/// Selects multiple <see cref="AlertSub"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<AlertSub> SelectMany(string command)
			=> Database.SelectMany(command, FromReader);

		/// <summary>
		/// Inserts the specified <see cref="AlertSub"/> into the database.
		/// </summary>
		public static long Insert(AlertSub alertSub)
			=> alertSub.AlertSubNum = Database.ExecuteInsert(
				"INSERT INTO `AlertSub` " + 
				"(`UserNum`, `ClinicNum`, `Type`, `AlertCategoryNum`) " + 
				"VALUES (" + 
					"@UserNum, @ClinicNum, @Type, @AlertCategoryNum" + 
				")");

		/// <summary>
		/// Updates the specified <see cref="AlertSub"/> in the database.
		/// </summary>
		public static void Update(AlertSub alertSub)
			=> Database.ExecuteNonQuery(
				"UPDATE `AlertSub` SET " + 
					"`UserNum` = @UserNum, " + 
					"`ClinicNum` = @ClinicNum, " + 
					"`Type` = @Type, " + 
					"`AlertCategoryNum` = @AlertCategoryNum " + 
				"WHERE `AlertSubNum` = @AlertSubNum",
					new MySqlParameter("AlertSubNum", alertSub.AlertSubNum),
					new MySqlParameter("UserNum", alertSub.UserNum),
					new MySqlParameter("ClinicNum", alertSub.ClinicNum),
					new MySqlParameter("Type", (int)alertSub.Type),
					new MySqlParameter("AlertCategoryNum", alertSub.AlertCategoryNum));

		/// <summary>
		/// Updates the specified <see cref="AlertSub"/> in the database.
		/// </summary>
		public static bool Update(AlertSub alertSubNew, AlertSub alertSubOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (alertSubNew.UserNum != alertSubOld.UserNum)
			{
				updates.Add("`UserNum` = @UserNum");
				parameters.Add(new MySqlParameter("UserNum", alertSubNew.UserNum));
			}

			if (alertSubNew.ClinicNum != alertSubOld.ClinicNum)
			{
				updates.Add("`ClinicNum` = @ClinicNum");
				parameters.Add(new MySqlParameter("ClinicNum", alertSubNew.ClinicNum));
			}

			if (alertSubNew.Type != alertSubOld.Type)
			{
				updates.Add("`Type` = @Type");
				parameters.Add(new MySqlParameter("Type", (int)alertSubNew.Type));
			}

			if (alertSubNew.AlertCategoryNum != alertSubOld.AlertCategoryNum)
			{
				updates.Add("`AlertCategoryNum` = @AlertCategoryNum");
				parameters.Add(new MySqlParameter("AlertCategoryNum", alertSubNew.AlertCategoryNum));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("AlertSubNum", alertSubNew.AlertSubNum));

			Database.ExecuteNonQuery("UPDATE `AlertSub` " + 
				"SET " + string.Join(", ", updates) + " " + 
				"WHERE `AlertSubNum` = @AlertSubNum",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="AlertSub"/> object from the database.
		/// </summary>
		public static void Delete(Int64 alertSubNum)
			 => Database.ExecuteNonQuery("DELETE FROM `AlertSub` WHERE `AlertSubNum` = " + alertSubNum);

		/// <summary>
		/// Deletes the specified <see cref="AlertSub"/> object from the database.
		/// </summary>
		public static void Delete(AlertSub alertSub)
			=> Delete(alertSub.AlertSubNum);
	}
}
