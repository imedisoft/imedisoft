//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness.Crud
{
	public class AlertCategoryCrud
	{
		public static AlertCategory FromReader(MySqlDataReader dataReader)
		{
			return new AlertCategory
			{
				AlertCategoryNum = (long)dataReader["AlertCategoryNum"],
				IsHQCategory = (Convert.ToInt32(dataReader["IsHQCategory"]) == 1),
				InternalName = (string)dataReader["InternalName"],
				Description = (string)dataReader["Description"]
			};
		}

		/// <summary>
		/// Selects a single AlertCategory object from the database using the specified SQL command.
		/// </summary>
		public static AlertCategory SelectOne(string command)
			=> Database.SelectOne(command, FromReader);

		/// <summary>
		/// Selects a single <see cref="AlertCategory"/> object from the database using the specified SQL command.
		/// </summary>
		public static AlertCategory SelectOne(Int64 alertCategoryNum)
			=> SelectOne("SELECT * FROM `AlertCategory` WHERE `AlertCategoryNum` = " + alertCategoryNum);

		/// <summary>
		/// Selects multiple <see cref="AlertCategory"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<AlertCategory> SelectMany(string command)
			=> Database.SelectMany(command, FromReader);

		/// <summary>
		/// Inserts the specified <see cref="AlertCategory"/> into the database.
		/// </summary>
		public static long Insert(AlertCategory alertCategory)
			=> alertCategory.AlertCategoryNum = Database.ExecuteInsert(
				"INSERT INTO `AlertCategory` " + 
				"(`IsHQCategory`, `InternalName`, `Description`) " + 
				"VALUES (" + 
					"@IsHQCategory, @InternalName, @Description" + 
				")");

		/// <summary>
		/// Updates the specified <see cref="AlertCategory"/> in the database.
		/// </summary>
		public static void Update(AlertCategory alertCategory)
			=> Database.ExecuteNonQuery(
				"UPDATE `AlertCategory` SET " + 
					"`IsHQCategory` = @IsHQCategory, " + 
					"`InternalName` = @InternalName, " + 
					"`Description` = @Description " + 
				"WHERE `AlertCategoryNum` = @AlertCategoryNum",
					new MySqlParameter("AlertCategoryNum", alertCategory.AlertCategoryNum),
					new MySqlParameter("IsHQCategory", (alertCategory.IsHQCategory ? 1 : 0)),
					new MySqlParameter("InternalName", alertCategory.InternalName ?? ""),
					new MySqlParameter("Description", alertCategory.Description ?? ""));

		/// <summary>
		/// Updates the specified <see cref="AlertCategory"/> in the database.
		/// </summary>
		public static void Update(AlertCategory alertCategoryNew, AlertCategory alertCategoryOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (alertCategoryNew.IsHQCategory != alertCategoryOld.IsHQCategory)
			{
				updates.Add("`IsHQCategory` = @IsHQCategory");
				parameters.Add(new MySqlParameter("IsHQCategory", (alertCategoryNew.IsHQCategory ? 1 : 0)));
			}

			if (alertCategoryNew.InternalName != alertCategoryOld.InternalName)
			{
				updates.Add("`InternalName` = @InternalName");
				parameters.Add(new MySqlParameter("InternalName", alertCategoryNew.InternalName ?? ""));
			}

			if (alertCategoryNew.Description != alertCategoryOld.Description)
			{
				updates.Add("`Description` = @Description");
				parameters.Add(new MySqlParameter("Description", alertCategoryNew.Description ?? ""));
			}

			if (updates.Count == 0) return;

			parameters.Add(new MySqlParameter("AlertCategoryNum", alertCategoryNew.AlertCategoryNum));

			Database.ExecuteNonQuery("UPDATE `AlertCategory` " + 
				"SET " + string.Join(", ", updates) + " " + 
				"WHERE `AlertCategoryNum` = @AlertCategoryNum",
					parameters.ToArray());
		}

		/// <summary>
		/// Deletes a single <see cref="AlertCategory"/> object from the database.
		/// </summary>
		public static void Delete(Int64 alertCategoryNum)
			 => Database.ExecuteNonQuery("DELETE FROM `AlertCategory` WHERE `AlertCategoryNum` = " + alertCategoryNum);

		/// <summary>
		/// Deletes the specified <see cref="AlertCategory"/> object from the database.
		/// </summary>
		public static void Delete(AlertCategory alertCategory)
			=> Delete(alertCategory.AlertCategoryNum);
	}
}
