//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using Imedisoft.Data;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class CarrierCrud {
		///<summary>Gets one Carrier object from the database using the primary key.  Returns null if not found.</summary>
		public static Carrier SelectOne(long carrierNum) {
			string command="SELECT * FROM carrier "
				+"WHERE CarrierNum = "+POut.Long(carrierNum);
			List<Carrier> list=TableToList(Database.ExecuteDataTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Carrier object from the database using a query.</summary>
		public static Carrier SelectOne(string command) {
			List<Carrier> list=TableToList(Database.ExecuteDataTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Carrier objects from the database using a query.</summary>
		public static List<Carrier> SelectMany(string command) {
			List<Carrier> list=TableToList(Database.ExecuteDataTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Carrier> TableToList(DataTable table) {
			List<Carrier> retVal=new List<Carrier>();
			Carrier carrier;
			foreach(DataRow row in table.Rows) {
				carrier=new Carrier();
				carrier.Id              = PIn.Long  (row["CarrierNum"].ToString());
				carrier.Name             = PIn.String(row["CarrierName"].ToString());
				carrier.AddressLine1                 = PIn.String(row["Address"].ToString());
				carrier.AddressLine2                = PIn.String(row["Address2"].ToString());
				carrier.City                    = PIn.String(row["City"].ToString());
				carrier.State                   = PIn.String(row["State"].ToString());
				carrier.Zip                     = PIn.String(row["Zip"].ToString());
				carrier.Phone                   = PIn.String(row["Phone"].ToString());
				carrier.ElectronicId                 = PIn.String(row["ElectID"].ToString());
				carrier.NoSendElect             = (OpenDentBusiness.NoSendElectType)PIn.Int(row["NoSendElect"].ToString());
				carrier.IsCDA                   = PIn.Bool  (row["IsCDA"].ToString());
				carrier.CDAnetVersion           = PIn.String(row["CDAnetVersion"].ToString());
				carrier.CanadianNetworkId      = PIn.Long  (row["CanadianNetworkNum"].ToString());
				carrier.IsHidden                = PIn.Bool  (row["IsHidden"].ToString());
				carrier.CanadianEncryptionMethod= PIn.Byte  (row["CanadianEncryptionMethod"].ToString());
				carrier.CanadianSupportedTypes  = (OpenDentBusiness.CanSupTransTypes)PIn.Int(row["CanadianSupportedTypes"].ToString());
				carrier.AddedByUserId         = PIn.Long  (row["SecUserNumEntry"].ToString());
				carrier.AddedOnDate            = PIn.Date  (row["SecDateEntry"].ToString());
				carrier.LastModifiedDate            = PIn.Date (row["SecDateTEdit"].ToString());
				carrier.TIN                     = PIn.String(row["TIN"].ToString());
				carrier.CarrierGroupName        = PIn.Long  (row["CarrierGroupName"].ToString());
				carrier.ApptTextBackColor       = Color.FromArgb(PIn.Int(row["ApptTextBackColor"].ToString()));
				carrier.IsCoinsuranceInverted   = PIn.Bool  (row["IsCoinsuranceInverted"].ToString());
				carrier.TrustedEtransFlags      = (OpenDentBusiness.TrustedEtransTypes)PIn.Int(row["TrustedEtransFlags"].ToString());
				retVal.Add(carrier);
			}
			return retVal;
		}

		///<summary>Converts a list of Carrier into a DataTable.</summary>
		public static DataTable ListToTable(List<Carrier> listCarriers,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Carrier";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("CarrierNum");
			table.Columns.Add("CarrierName");
			table.Columns.Add("Address");
			table.Columns.Add("Address2");
			table.Columns.Add("City");
			table.Columns.Add("State");
			table.Columns.Add("Zip");
			table.Columns.Add("Phone");
			table.Columns.Add("ElectID");
			table.Columns.Add("NoSendElect");
			table.Columns.Add("IsCDA");
			table.Columns.Add("CDAnetVersion");
			table.Columns.Add("CanadianNetworkNum");
			table.Columns.Add("IsHidden");
			table.Columns.Add("CanadianEncryptionMethod");
			table.Columns.Add("CanadianSupportedTypes");
			table.Columns.Add("SecUserNumEntry");
			table.Columns.Add("SecDateEntry");
			table.Columns.Add("SecDateTEdit");
			table.Columns.Add("TIN");
			table.Columns.Add("CarrierGroupName");
			table.Columns.Add("ApptTextBackColor");
			table.Columns.Add("IsCoinsuranceInverted");
			table.Columns.Add("TrustedEtransFlags");
			foreach(Carrier carrier in listCarriers) {
				table.Rows.Add(new object[] {
					POut.Long  (carrier.Id),
					            carrier.Name,
					            carrier.AddressLine1,
					            carrier.AddressLine2,
					            carrier.City,
					            carrier.State,
					            carrier.Zip,
					            carrier.Phone,
					            carrier.ElectronicId,
					POut.Int   ((int)carrier.NoSendElect),
					POut.Bool  (carrier.IsCDA),
					            carrier.CDAnetVersion,
					POut.Long  (carrier.CanadianNetworkId),
					POut.Bool  (carrier.IsHidden),
					POut.Byte  (carrier.CanadianEncryptionMethod),
					POut.Int   ((int)carrier.CanadianSupportedTypes),
					POut.Long  (carrier.AddedByUserId),
					POut.DateT (carrier.AddedOnDate,false),
					POut.DateT (carrier.LastModifiedDate,false),
					            carrier.TIN,
					POut.Long  (carrier.CarrierGroupName),
					POut.Int   (carrier.ApptTextBackColor.ToArgb()),
					POut.Bool  (carrier.IsCoinsuranceInverted),
					POut.Int   ((int)carrier.TrustedEtransFlags),
				});
			}
			return table;
		}

		///<summary>Inserts one Carrier into the database.  Returns the new priKey.</summary>
		public static long Insert(Carrier carrier) {
			return Insert(carrier,false);
		}

		///<summary>Inserts one Carrier into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Carrier carrier,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				carrier.Id=ReplicationServers.GetKey("carrier","CarrierNum");
			}
			string command="INSERT INTO carrier (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CarrierNum,";
			}
			command+="CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes,SecUserNumEntry,SecDateEntry,TIN,CarrierGroupName,ApptTextBackColor,IsCoinsuranceInverted,TrustedEtransFlags) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(carrier.Id)+",";
			}
			command+=
				 "'"+POut.String(carrier.Name)+"',"
				+"'"+POut.String(carrier.AddressLine1)+"',"
				+"'"+POut.String(carrier.AddressLine2)+"',"
				+"'"+POut.String(carrier.City)+"',"
				+"'"+POut.String(carrier.State)+"',"
				+"'"+POut.String(carrier.Zip)+"',"
				+"'"+POut.String(carrier.Phone)+"',"
				+"'"+POut.String(carrier.ElectronicId)+"',"
				+    POut.Int   ((int)carrier.NoSendElect)+","
				+    POut.Bool  (carrier.IsCDA)+","
				+"'"+POut.String(carrier.CDAnetVersion)+"',"
				+    POut.Long  (carrier.CanadianNetworkId)+","
				+    POut.Bool  (carrier.IsHidden)+","
				+    POut.Byte  (carrier.CanadianEncryptionMethod)+","
				+    POut.Int   ((int)carrier.CanadianSupportedTypes)+","
				+    POut.Long  (carrier.AddedByUserId)+","
				+    DbHelper.Now()+","
				//SecDateTEdit can only be set by MySQL
				+"'"+POut.String(carrier.TIN)+"',"
				+    POut.Long  (carrier.CarrierGroupName)+","
				+    POut.Int   (carrier.ApptTextBackColor.ToArgb())+","
				+    POut.Bool  (carrier.IsCoinsuranceInverted)+","
				+    POut.Int   ((int)carrier.TrustedEtransFlags)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Database.ExecuteNonQuery(command);
			}
			else {
				carrier.Id=Database.ExecuteInsert(command);
			}
			return carrier.Id;
		}

		///<summary>Inserts one Carrier into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Carrier carrier) {
			return InsertNoCache(carrier,false);
		}

		///<summary>Inserts one Carrier into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Carrier carrier,bool useExistingPK) {
			
			string command="INSERT INTO carrier (";
			if(!useExistingPK) {
				carrier.Id=ReplicationServers.GetKeyNoCache("carrier","CarrierNum");
			}
			if(useExistingPK) {
				command+="CarrierNum,";
			}
			command+="CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes,SecUserNumEntry,SecDateEntry,TIN,CarrierGroupName,ApptTextBackColor,IsCoinsuranceInverted,TrustedEtransFlags) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(carrier.Id)+",";
			}
			command+=
				 "'"+POut.String(carrier.Name)+"',"
				+"'"+POut.String(carrier.AddressLine1)+"',"
				+"'"+POut.String(carrier.AddressLine2)+"',"
				+"'"+POut.String(carrier.City)+"',"
				+"'"+POut.String(carrier.State)+"',"
				+"'"+POut.String(carrier.Zip)+"',"
				+"'"+POut.String(carrier.Phone)+"',"
				+"'"+POut.String(carrier.ElectronicId)+"',"
				+    POut.Int   ((int)carrier.NoSendElect)+","
				+    POut.Bool  (carrier.IsCDA)+","
				+"'"+POut.String(carrier.CDAnetVersion)+"',"
				+    POut.Long  (carrier.CanadianNetworkId)+","
				+    POut.Bool  (carrier.IsHidden)+","
				+    POut.Byte  (carrier.CanadianEncryptionMethod)+","
				+    POut.Int   ((int)carrier.CanadianSupportedTypes)+","
				+    POut.Long  (carrier.AddedByUserId)+","
				+    DbHelper.Now()+","
				//SecDateTEdit can only be set by MySQL
				+"'"+POut.String(carrier.TIN)+"',"
				+    POut.Long  (carrier.CarrierGroupName)+","
				+    POut.Int   (carrier.ApptTextBackColor.ToArgb())+","
				+    POut.Bool  (carrier.IsCoinsuranceInverted)+","
				+    POut.Int   ((int)carrier.TrustedEtransFlags)+")";
			if(useExistingPK) {
				Database.ExecuteNonQuery(command);
			}
			else {
				carrier.Id=Database.ExecuteInsert(command);
			}
			return carrier.Id;
		}

		///<summary>Updates one Carrier in the database.</summary>
		public static void Update(Carrier carrier) {
			string command="UPDATE carrier SET "
				+"CarrierName             = '"+POut.String(carrier.Name)+"', "
				+"Address                 = '"+POut.String(carrier.AddressLine1)+"', "
				+"Address2                = '"+POut.String(carrier.AddressLine2)+"', "
				+"City                    = '"+POut.String(carrier.City)+"', "
				+"State                   = '"+POut.String(carrier.State)+"', "
				+"Zip                     = '"+POut.String(carrier.Zip)+"', "
				+"Phone                   = '"+POut.String(carrier.Phone)+"', "
				+"ElectID                 = '"+POut.String(carrier.ElectronicId)+"', "
				+"NoSendElect             =  "+POut.Int   ((int)carrier.NoSendElect)+", "
				+"IsCDA                   =  "+POut.Bool  (carrier.IsCDA)+", "
				+"CDAnetVersion           = '"+POut.String(carrier.CDAnetVersion)+"', "
				+"CanadianNetworkNum      =  "+POut.Long  (carrier.CanadianNetworkId)+", "
				+"IsHidden                =  "+POut.Bool  (carrier.IsHidden)+", "
				+"CanadianEncryptionMethod=  "+POut.Byte  (carrier.CanadianEncryptionMethod)+", "
				+"CanadianSupportedTypes  =  "+POut.Int   ((int)carrier.CanadianSupportedTypes)+", "
				//SecUserNumEntry excluded from update
				//SecDateEntry not allowed to change
				//SecDateTEdit can only be set by MySQL
				+"TIN                     = '"+POut.String(carrier.TIN)+"', "
				+"CarrierGroupName        =  "+POut.Long  (carrier.CarrierGroupName)+", "
				+"ApptTextBackColor       =  "+POut.Int   (carrier.ApptTextBackColor.ToArgb())+", "
				+"IsCoinsuranceInverted   =  "+POut.Bool  (carrier.IsCoinsuranceInverted)+", "
				+"TrustedEtransFlags      =  "+POut.Int   ((int)carrier.TrustedEtransFlags)+" "
				+"WHERE CarrierNum = "+POut.Long(carrier.Id);
			Database.ExecuteNonQuery(command);
		}

		///<summary>Updates one Carrier in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Carrier carrier,Carrier oldCarrier) {
			string command="";
			if(carrier.Name != oldCarrier.Name) {
				if(command!="") { command+=",";}
				command+="CarrierName = '"+POut.String(carrier.Name)+"'";
			}
			if(carrier.AddressLine1 != oldCarrier.AddressLine1) {
				if(command!="") { command+=",";}
				command+="Address = '"+POut.String(carrier.AddressLine1)+"'";
			}
			if(carrier.AddressLine2 != oldCarrier.AddressLine2) {
				if(command!="") { command+=",";}
				command+="Address2 = '"+POut.String(carrier.AddressLine2)+"'";
			}
			if(carrier.City != oldCarrier.City) {
				if(command!="") { command+=",";}
				command+="City = '"+POut.String(carrier.City)+"'";
			}
			if(carrier.State != oldCarrier.State) {
				if(command!="") { command+=",";}
				command+="State = '"+POut.String(carrier.State)+"'";
			}
			if(carrier.Zip != oldCarrier.Zip) {
				if(command!="") { command+=",";}
				command+="Zip = '"+POut.String(carrier.Zip)+"'";
			}
			if(carrier.Phone != oldCarrier.Phone) {
				if(command!="") { command+=",";}
				command+="Phone = '"+POut.String(carrier.Phone)+"'";
			}
			if(carrier.ElectronicId != oldCarrier.ElectronicId) {
				if(command!="") { command+=",";}
				command+="ElectID = '"+POut.String(carrier.ElectronicId)+"'";
			}
			if(carrier.NoSendElect != oldCarrier.NoSendElect) {
				if(command!="") { command+=",";}
				command+="NoSendElect = "+POut.Int   ((int)carrier.NoSendElect)+"";
			}
			if(carrier.IsCDA != oldCarrier.IsCDA) {
				if(command!="") { command+=",";}
				command+="IsCDA = "+POut.Bool(carrier.IsCDA)+"";
			}
			if(carrier.CDAnetVersion != oldCarrier.CDAnetVersion) {
				if(command!="") { command+=",";}
				command+="CDAnetVersion = '"+POut.String(carrier.CDAnetVersion)+"'";
			}
			if(carrier.CanadianNetworkId != oldCarrier.CanadianNetworkId) {
				if(command!="") { command+=",";}
				command+="CanadianNetworkNum = "+POut.Long(carrier.CanadianNetworkId)+"";
			}
			if(carrier.IsHidden != oldCarrier.IsHidden) {
				if(command!="") { command+=",";}
				command+="IsHidden = "+POut.Bool(carrier.IsHidden)+"";
			}
			if(carrier.CanadianEncryptionMethod != oldCarrier.CanadianEncryptionMethod) {
				if(command!="") { command+=",";}
				command+="CanadianEncryptionMethod = "+POut.Byte(carrier.CanadianEncryptionMethod)+"";
			}
			if(carrier.CanadianSupportedTypes != oldCarrier.CanadianSupportedTypes) {
				if(command!="") { command+=",";}
				command+="CanadianSupportedTypes = "+POut.Int   ((int)carrier.CanadianSupportedTypes)+"";
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			if(carrier.TIN != oldCarrier.TIN) {
				if(command!="") { command+=",";}
				command+="TIN = '"+POut.String(carrier.TIN)+"'";
			}
			if(carrier.CarrierGroupName != oldCarrier.CarrierGroupName) {
				if(command!="") { command+=",";}
				command+="CarrierGroupName = "+POut.Long(carrier.CarrierGroupName)+"";
			}
			if(carrier.ApptTextBackColor != oldCarrier.ApptTextBackColor) {
				if(command!="") { command+=",";}
				command+="ApptTextBackColor = "+POut.Int(carrier.ApptTextBackColor.ToArgb())+"";
			}
			if(carrier.IsCoinsuranceInverted != oldCarrier.IsCoinsuranceInverted) {
				if(command!="") { command+=",";}
				command+="IsCoinsuranceInverted = "+POut.Bool(carrier.IsCoinsuranceInverted)+"";
			}
			if(carrier.TrustedEtransFlags != oldCarrier.TrustedEtransFlags) {
				if(command!="") { command+=",";}
				command+="TrustedEtransFlags = "+POut.Int   ((int)carrier.TrustedEtransFlags)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE carrier SET "+command
				+" WHERE CarrierNum = "+POut.Long(carrier.Id);
			Database.ExecuteNonQuery(command);
			return true;
		}

		///<summary>Returns true if Update(Carrier,Carrier) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Carrier carrier,Carrier oldCarrier) {
			if(carrier.Name != oldCarrier.Name) {
				return true;
			}
			if(carrier.AddressLine1 != oldCarrier.AddressLine1) {
				return true;
			}
			if(carrier.AddressLine2 != oldCarrier.AddressLine2) {
				return true;
			}
			if(carrier.City != oldCarrier.City) {
				return true;
			}
			if(carrier.State != oldCarrier.State) {
				return true;
			}
			if(carrier.Zip != oldCarrier.Zip) {
				return true;
			}
			if(carrier.Phone != oldCarrier.Phone) {
				return true;
			}
			if(carrier.ElectronicId != oldCarrier.ElectronicId) {
				return true;
			}
			if(carrier.NoSendElect != oldCarrier.NoSendElect) {
				return true;
			}
			if(carrier.IsCDA != oldCarrier.IsCDA) {
				return true;
			}
			if(carrier.CDAnetVersion != oldCarrier.CDAnetVersion) {
				return true;
			}
			if(carrier.CanadianNetworkId != oldCarrier.CanadianNetworkId) {
				return true;
			}
			if(carrier.IsHidden != oldCarrier.IsHidden) {
				return true;
			}
			if(carrier.CanadianEncryptionMethod != oldCarrier.CanadianEncryptionMethod) {
				return true;
			}
			if(carrier.CanadianSupportedTypes != oldCarrier.CanadianSupportedTypes) {
				return true;
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			if(carrier.TIN != oldCarrier.TIN) {
				return true;
			}
			if(carrier.CarrierGroupName != oldCarrier.CarrierGroupName) {
				return true;
			}
			if(carrier.ApptTextBackColor != oldCarrier.ApptTextBackColor) {
				return true;
			}
			if(carrier.IsCoinsuranceInverted != oldCarrier.IsCoinsuranceInverted) {
				return true;
			}
			if(carrier.TrustedEtransFlags != oldCarrier.TrustedEtransFlags) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Carrier from the database.</summary>
		public static void Delete(long carrierNum) {
			string command="DELETE FROM carrier "
				+"WHERE CarrierNum = "+POut.Long(carrierNum);
			Database.ExecuteNonQuery(command);
		}

	}
}