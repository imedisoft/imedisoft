//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models.Cemt;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Imedisoft.Data.Cemt
{
	public partial class Connections
	{
		public static Connection FromReader(MySqlDataReader dataReader)
		{
			return new Connection
			{
				Id = (long)dataReader["id"],
				DatabaseServer = (string)dataReader["database_server"],
				DatabaseName = (string)dataReader["database_name"],
				DatabaseUser = (string)dataReader["database_user"],
				DatabasePassword = (string)dataReader["database_password"],
				Note = (string)dataReader["note"],
				ItemOrder = (int)dataReader["item_order"],
				ConnectionStatus = (string)dataReader["connection_status"],
				HasClinicBreakdownReports = (Convert.ToInt32(dataReader["has_clinic_breakdown_reports"]) == 1)
			};
		}

		/// <summary>
		/// Selects a single Connection object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Connection SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Connection"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Connection"/> to select.</param>
		public static Connection SelectOne(long id)
			=> SelectOne("SELECT * FROM `cemt_connections` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Connection"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Connection> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Connection"/> into the database.
		/// </summary>
		/// <param name="connection">The <see cref="Connection"/> to insert into the database.</param>
		private static long ExecuteInsert(Connection connection)
			=> connection.Id = Database.ExecuteInsert(
				"INSERT INTO `cemt_connections` " +
				"(`database_server`, `database_name`, `database_user`, `database_password`, `note`, `item_order`, `connection_status`, `has_clinic_breakdown_reports`) " +
				"VALUES (" +
					"@database_server, @database_name, @database_user, @database_password, @note, @item_order, @connection_status, @has_clinic_breakdown_reports" +
				")",
					new MySqlParameter("database_server", connection.DatabaseServer ?? ""),
					new MySqlParameter("database_name", connection.DatabaseName ?? ""),
					new MySqlParameter("database_user", connection.DatabaseUser ?? ""),
					new MySqlParameter("database_password", connection.DatabasePassword ?? ""),
					new MySqlParameter("note", connection.Note ?? ""),
					new MySqlParameter("item_order", connection.ItemOrder),
					new MySqlParameter("connection_status", connection.ConnectionStatus ?? ""),
					new MySqlParameter("has_clinic_breakdown_reports", (connection.HasClinicBreakdownReports ? 1 : 0)));

		/// <summary>
		/// Updates the specified <see cref="Connection"/> in the database.
		/// </summary>
		/// <param name="connection">The <see cref="Connection"/> to update.</param>
		private static void ExecuteUpdate(Connection connection)
			=> Database.ExecuteNonQuery(
				"UPDATE `cemt_connections` SET " +
					"`database_server` = @database_server, " +
					"`database_name` = @database_name, " +
					"`database_user` = @database_user, " +
					"`database_password` = @database_password, " +
					"`note` = @note, " +
					"`item_order` = @item_order, " +
					"`connection_status` = @connection_status, " +
					"`has_clinic_breakdown_reports` = @has_clinic_breakdown_reports " +
				"WHERE `id` = @id",
					new MySqlParameter("id", connection.Id),
					new MySqlParameter("database_server", connection.DatabaseServer ?? ""),
					new MySqlParameter("database_name", connection.DatabaseName ?? ""),
					new MySqlParameter("database_user", connection.DatabaseUser ?? ""),
					new MySqlParameter("database_password", connection.DatabasePassword ?? ""),
					new MySqlParameter("note", connection.Note ?? ""),
					new MySqlParameter("item_order", connection.ItemOrder),
					new MySqlParameter("connection_status", connection.ConnectionStatus ?? ""),
					new MySqlParameter("has_clinic_breakdown_reports", (connection.HasClinicBreakdownReports ? 1 : 0)));

		/// <summary>
		/// Deletes a single <see cref="Connection"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Connection"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `cemt_connections` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Connection"/> object from the database.
		/// </summary>
		/// <param name="connection">The <see cref="Connection"/> to delete.</param>
		private static void ExecuteDelete(Connection connection)
			=> ExecuteDelete(connection.Id);
	}
}
