//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;

namespace Imedisoft.Data
{
    public partial class EvaluationCriterionDefs
	{
		public static EvaluationCriterionDef FromReader(MySqlDataReader dataReader)
		{
			return new EvaluationCriterionDef
			{
				Id = (long)dataReader["id"],
				EvaluationDefId = (long)dataReader["evaluation_def_id"],
				GradingScaleId = (long)dataReader["grading_scale_id"],
				Description = (string)dataReader["description"],
				IsCategory = (Convert.ToInt32(dataReader["is_category"]) == 1),
				SortOrder = (int)dataReader["sort_order"],
				MaxPointsAllowed = (float)dataReader["max_points_allowed"]
			};
		}

		/// <summary>
		/// Selects a single EvaluationCriterionDef object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static EvaluationCriterionDef SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="EvaluationCriterionDef"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="EvaluationCriterionDef"/> to select.</param>
		public static EvaluationCriterionDef SelectOne(long id)
			=> SelectOne("SELECT * FROM `evaluation_criterion_defs` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="EvaluationCriterionDef"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<EvaluationCriterionDef> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="EvaluationCriterionDef"/> into the database.
		/// </summary>
		/// <param name="evaluationCriterionDef">The <see cref="EvaluationCriterionDef"/> to insert into the database.</param>
		private static long ExecuteInsert(EvaluationCriterionDef evaluationCriterionDef)
			=> evaluationCriterionDef.Id = Database.ExecuteInsert(
				"INSERT INTO `evaluation_criterion_defs` " +
				"(`evaluation_def_id`, `grading_scale_id`, `description`, `is_category`, `sort_order`, `max_points_allowed`) " +
				"VALUES (" +
					"@evaluation_def_id, @grading_scale_id, @description, @is_category, @sort_order, @max_points_allowed" +
				")",
					new MySqlParameter("evaluation_def_id", evaluationCriterionDef.EvaluationDefId),
					new MySqlParameter("grading_scale_id", evaluationCriterionDef.GradingScaleId),
					new MySqlParameter("description", evaluationCriterionDef.Description ?? ""),
					new MySqlParameter("is_category", (evaluationCriterionDef.IsCategory ? 1 : 0)),
					new MySqlParameter("sort_order", evaluationCriterionDef.SortOrder),
					new MySqlParameter("max_points_allowed", evaluationCriterionDef.MaxPointsAllowed));

		/// <summary>
		/// Updates the specified <see cref="EvaluationCriterionDef"/> in the database.
		/// </summary>
		/// <param name="evaluationCriterionDef">The <see cref="EvaluationCriterionDef"/> to update.</param>
		private static void ExecuteUpdate(EvaluationCriterionDef evaluationCriterionDef)
			=> Database.ExecuteNonQuery(
				"UPDATE `evaluation_criterion_defs` SET " +
					"`evaluation_def_id` = @evaluation_def_id, " +
					"`grading_scale_id` = @grading_scale_id, " +
					"`description` = @description, " +
					"`is_category` = @is_category, " +
					"`sort_order` = @sort_order, " +
					"`max_points_allowed` = @max_points_allowed " +
				"WHERE `id` = @id",
					new MySqlParameter("id", evaluationCriterionDef.Id),
					new MySqlParameter("evaluation_def_id", evaluationCriterionDef.EvaluationDefId),
					new MySqlParameter("grading_scale_id", evaluationCriterionDef.GradingScaleId),
					new MySqlParameter("description", evaluationCriterionDef.Description ?? ""),
					new MySqlParameter("is_category", (evaluationCriterionDef.IsCategory ? 1 : 0)),
					new MySqlParameter("sort_order", evaluationCriterionDef.SortOrder),
					new MySqlParameter("max_points_allowed", evaluationCriterionDef.MaxPointsAllowed));

		/// <summary>
		/// Deletes a single <see cref="EvaluationCriterionDef"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="EvaluationCriterionDef"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `evaluation_criterion_defs` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="EvaluationCriterionDef"/> object from the database.
		/// </summary>
		/// <param name="evaluationCriterionDef">The <see cref="EvaluationCriterionDef"/> to delete.</param>
		private static void ExecuteDelete(EvaluationCriterionDef evaluationCriterionDef)
			=> ExecuteDelete(evaluationCriterionDef.Id);
	}
}
