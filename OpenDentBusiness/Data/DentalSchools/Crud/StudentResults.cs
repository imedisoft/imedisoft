//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;

namespace Imedisoft.Data
{
    public partial class StudentResults
	{
		public static StudentResult FromReader(MySqlDataReader dataReader)
		{
			return new StudentResult
			{
				Id = (long)dataReader["id"],
				SchoolCourseId = (long)dataReader["school_course_id"],
				SchoolCourseRequirementId = (long)dataReader["school_course_requirement_id"],
				Description = (string)dataReader["description"],
				ProviderId = (long)dataReader["provider_id"],
				ApptId = dataReader["appt_id"] as long?,
				PatientId = dataReader["patient_id"] as long?,
				InstructorId = dataReader["instructor_id"] as long?,
				CompletionDate = dataReader["completion_date"] as DateTime?
			};
		}

		/// <summary>
		/// Selects a single StudentRequirement object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static StudentResult SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="StudentResult"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="StudentResult"/> to select.</param>
		public static StudentResult SelectOne(long id)
			=> SelectOne("SELECT * FROM `student_requirements` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="StudentResult"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<StudentResult> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="StudentResult"/> into the database.
		/// </summary>
		/// <param name="studentRequirement">The <see cref="StudentResult"/> to insert into the database.</param>
		private static long ExecuteInsert(StudentResult studentRequirement)
			=> studentRequirement.Id = Database.ExecuteInsert(
				"INSERT INTO `student_requirements` " +
				"(`school_course_id`, `school_course_requirement_id`, `description`, `provider_id`, `appt_id`, `patient_id`, `instructor_id`, `completion_date`) " +
				"VALUES (" +
					"@school_course_id, @school_course_requirement_id, @description, @provider_id, @appt_id, @patient_id, @instructor_id, @completion_date" +
				")",
					new MySqlParameter("school_course_id", studentRequirement.SchoolCourseId),
					new MySqlParameter("school_course_requirement_id", studentRequirement.SchoolCourseRequirementId),
					new MySqlParameter("description", studentRequirement.Description ?? ""),
					new MySqlParameter("provider_id", studentRequirement.ProviderId),
					new MySqlParameter("appt_id", (studentRequirement.ApptId.HasValue ? (object)studentRequirement.ApptId.Value : DBNull.Value)),
					new MySqlParameter("patient_id", (studentRequirement.PatientId.HasValue ? (object)studentRequirement.PatientId.Value : DBNull.Value)),
					new MySqlParameter("instructor_id", (studentRequirement.InstructorId.HasValue ? (object)studentRequirement.InstructorId.Value : DBNull.Value)),
					new MySqlParameter("completion_date", (studentRequirement.CompletionDate.HasValue ? (object)studentRequirement.CompletionDate.Value : DBNull.Value)));

		/// <summary>
		/// Updates the specified <see cref="StudentResult"/> in the database.
		/// </summary>
		/// <param name="studentRequirement">The <see cref="StudentResult"/> to update.</param>
		private static void ExecuteUpdate(StudentResult studentRequirement)
			=> Database.ExecuteNonQuery(
				"UPDATE `student_requirements` SET " +
					"`school_course_id` = @school_course_id, " +
					"`school_course_requirement_id` = @school_course_requirement_id, " +
					"`description` = @description, " +
					"`provider_id` = @provider_id, " +
					"`appt_id` = @appt_id, " +
					"`patient_id` = @patient_id, " +
					"`instructor_id` = @instructor_id, " +
					"`completion_date` = @completion_date " +
				"WHERE `id` = @id",
					new MySqlParameter("id", studentRequirement.Id),
					new MySqlParameter("school_course_id", studentRequirement.SchoolCourseId),
					new MySqlParameter("school_course_requirement_id", studentRequirement.SchoolCourseRequirementId),
					new MySqlParameter("description", studentRequirement.Description ?? ""),
					new MySqlParameter("provider_id", studentRequirement.ProviderId),
					new MySqlParameter("appt_id", (studentRequirement.ApptId.HasValue ? (object)studentRequirement.ApptId.Value : DBNull.Value)),
					new MySqlParameter("patient_id", (studentRequirement.PatientId.HasValue ? (object)studentRequirement.PatientId.Value : DBNull.Value)),
					new MySqlParameter("instructor_id", (studentRequirement.InstructorId.HasValue ? (object)studentRequirement.InstructorId.Value : DBNull.Value)),
					new MySqlParameter("completion_date", (studentRequirement.CompletionDate.HasValue ? (object)studentRequirement.CompletionDate.Value : DBNull.Value)));

		/// <summary>
		/// Deletes a single <see cref="StudentResult"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="StudentResult"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `student_requirements` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="StudentResult"/> object from the database.
		/// </summary>
		/// <param name="studentRequirement">The <see cref="StudentResult"/> to delete.</param>
		private static void ExecuteDelete(StudentResult studentRequirement)
			=> ExecuteDelete(studentRequirement.Id);
	}
}
