//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;

namespace Imedisoft.Data
{
    public partial class Evaluations
	{
		public static Evaluation FromReader(MySqlDataReader dataReader)
		{
			return new Evaluation
			{
				Id = (long)dataReader["id"],
				InstructorId = (long)dataReader["instructor_id"],
				StudentId = (long)dataReader["student_id"],
				SchoolCourseId = (long)dataReader["school_course_id"],
				GradingScaleId = (long)dataReader["grading_scale_id"],
				Title = (string)dataReader["title"],
				EvaluationDate = (DateTime)dataReader["evaluation_date"],
				OverallGradeShowing = (string)dataReader["overall_grade_showing"],
				OverallGradeNumber = (float)dataReader["overall_grade_number"],
				Notes = (string)dataReader["notes"]
			};
		}

		/// <summary>
		/// Selects a single Evaluation object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Evaluation SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Evaluation"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Evaluation"/> to select.</param>
		public static Evaluation SelectOne(long id)
			=> SelectOne("SELECT * FROM `evaluations` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Evaluation"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Evaluation> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Evaluation"/> into the database.
		/// </summary>
		/// <param name="evaluation">The <see cref="Evaluation"/> to insert into the database.</param>
		private static long ExecuteInsert(Evaluation evaluation)
			=> evaluation.Id = Database.ExecuteInsert(
				"INSERT INTO `evaluations` " +
				"(`instructor_id`, `student_id`, `school_course_id`, `grading_scale_id`, `title`, `evaluation_date`, `overall_grade_showing`, `overall_grade_number`, `notes`) " +
				"VALUES (" +
					"@instructor_id, @student_id, @school_course_id, @grading_scale_id, @title, @evaluation_date, @overall_grade_showing, @overall_grade_number, @notes" +
				")",
					new MySqlParameter("instructor_id", evaluation.InstructorId),
					new MySqlParameter("student_id", evaluation.StudentId),
					new MySqlParameter("school_course_id", evaluation.SchoolCourseId),
					new MySqlParameter("grading_scale_id", evaluation.GradingScaleId),
					new MySqlParameter("title", evaluation.Title ?? ""),
					new MySqlParameter("evaluation_date", evaluation.EvaluationDate),
					new MySqlParameter("overall_grade_showing", evaluation.OverallGradeShowing ?? ""),
					new MySqlParameter("overall_grade_number", evaluation.OverallGradeNumber),
					new MySqlParameter("notes", evaluation.Notes ?? ""));

		/// <summary>
		/// Updates the specified <see cref="Evaluation"/> in the database.
		/// </summary>
		/// <param name="evaluation">The <see cref="Evaluation"/> to update.</param>
		private static void ExecuteUpdate(Evaluation evaluation)
			=> Database.ExecuteNonQuery(
				"UPDATE `evaluations` SET " +
					"`instructor_id` = @instructor_id, " +
					"`student_id` = @student_id, " +
					"`school_course_id` = @school_course_id, " +
					"`grading_scale_id` = @grading_scale_id, " +
					"`title` = @title, " +
					"`evaluation_date` = @evaluation_date, " +
					"`overall_grade_showing` = @overall_grade_showing, " +
					"`overall_grade_number` = @overall_grade_number, " +
					"`notes` = @notes " +
				"WHERE `id` = @id",
					new MySqlParameter("id", evaluation.Id),
					new MySqlParameter("instructor_id", evaluation.InstructorId),
					new MySqlParameter("student_id", evaluation.StudentId),
					new MySqlParameter("school_course_id", evaluation.SchoolCourseId),
					new MySqlParameter("grading_scale_id", evaluation.GradingScaleId),
					new MySqlParameter("title", evaluation.Title ?? ""),
					new MySqlParameter("evaluation_date", evaluation.EvaluationDate),
					new MySqlParameter("overall_grade_showing", evaluation.OverallGradeShowing ?? ""),
					new MySqlParameter("overall_grade_number", evaluation.OverallGradeNumber),
					new MySqlParameter("notes", evaluation.Notes ?? ""));

		/// <summary>
		/// Deletes a single <see cref="Evaluation"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Evaluation"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `evaluations` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Evaluation"/> object from the database.
		/// </summary>
		/// <param name="evaluation">The <see cref="Evaluation"/> to delete.</param>
		private static void ExecuteDelete(Evaluation evaluation)
			=> ExecuteDelete(evaluation.Id);
	}
}
