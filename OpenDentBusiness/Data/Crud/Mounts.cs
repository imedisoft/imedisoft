//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Drawing;

namespace Imedisoft.Data
{
    public partial class Mounts
	{
		public static Mount FromReader(MySqlDataReader dataReader)
		{
			return new Mount
			{
				Id = (long)dataReader["id"],
				PatientId = (long)dataReader["patient_id"],
				Category = (long)dataReader["category"],
				Description = (string)dataReader["description"],
				Note = (string)dataReader["note"],
				Width = (int)dataReader["width"],
				Height = (int)dataReader["height"],
				BackColor = Color.FromArgb((int)dataReader["back_color"]),
				AddedOn = (DateTime)dataReader["added_on"]
			};
		}

		/// <summary>
		/// Selects a single Mount object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Mount SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Mount"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Mount"/> to select.</param>
		public static Mount SelectOne(long id)
			=> SelectOne("SELECT * FROM `mounts` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Mount"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Mount> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Mount"/> into the database.
		/// </summary>
		/// <param name="mount">The <see cref="Mount"/> to insert into the database.</param>
		private static long ExecuteInsert(Mount mount)
			=> mount.Id = Database.ExecuteInsert(
				"INSERT INTO `mounts` " +
				"(`patient_id`, `category`, `description`, `note`, `width`, `height`, `back_color`) " +
				"VALUES (" +
					"@patient_id, @category, @description, @note, @width, @height, @back_color" +
				")",
					new MySqlParameter("patient_id", mount.PatientId),
					new MySqlParameter("category", mount.Category),
					new MySqlParameter("description", mount.Description ?? ""),
					new MySqlParameter("note", mount.Note ?? ""),
					new MySqlParameter("width", mount.Width),
					new MySqlParameter("height", mount.Height),
					new MySqlParameter("back_color", mount.BackColor.ToArgb()),
					new MySqlParameter("added_on", mount.AddedOn));

		/// <summary>
		/// Updates the specified <see cref="Mount"/> in the database.
		/// </summary>
		/// <param name="mount">The <see cref="Mount"/> to update.</param>
		private static void ExecuteUpdate(Mount mount)
			=> Database.ExecuteNonQuery(
				"UPDATE `mounts` SET " +
					"`patient_id` = @patient_id, " +
					"`category` = @category, " +
					"`description` = @description, " +
					"`note` = @note, " +
					"`width` = @width, " +
					"`height` = @height, " +
					"`back_color` = @back_color " +
				"WHERE `id` = @id",
					new MySqlParameter("id", mount.Id),
					new MySqlParameter("patient_id", mount.PatientId),
					new MySqlParameter("category", mount.Category),
					new MySqlParameter("description", mount.Description ?? ""),
					new MySqlParameter("note", mount.Note ?? ""),
					new MySqlParameter("width", mount.Width),
					new MySqlParameter("height", mount.Height),
					new MySqlParameter("back_color", mount.BackColor.ToArgb()),
					new MySqlParameter("added_on", mount.AddedOn));

		/// <summary>
		/// Deletes a single <see cref="Mount"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Mount"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `mounts` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Mount"/> object from the database.
		/// </summary>
		/// <param name="mount">The <see cref="Mount"/> to delete.</param>
		private static void ExecuteDelete(Mount mount)
			=> ExecuteDelete(mount.Id);
	}
}
