//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class ProgramProperties
	{
		public static ProgramProperty FromReader(MySqlDataReader dataReader)
		{
			return new ProgramProperty
			{
				Id = (long)dataReader["id"],
				ProgramId = (long)dataReader["program_id"],
				Description = (string)dataReader["description"],
				Value = (string)dataReader["value"],
				MachineName = dataReader["machine_name"] as string,
				ClinicId = (long)dataReader["clinic_id"]
			};
		}

		/// <summary>
		/// Selects a single ProgramProperty object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static ProgramProperty SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="ProgramProperty"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="ProgramProperty"/> to select.</param>
		public static ProgramProperty SelectOne(long id)
			=> SelectOne("SELECT * FROM `programproperty` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="ProgramProperty"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<ProgramProperty> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="ProgramProperty"/> into the database.
		/// </summary>
		/// <param name="programProperty">The <see cref="ProgramProperty"/> to insert into the database.</param>
		private static long ExecuteInsert(ProgramProperty programProperty)
			=> programProperty.Id = Database.ExecuteInsert(
				"INSERT INTO `programproperty` " +
				"(`program_id`, `description`, `value`, `machine_name`, `clinic_id`) " +
				"VALUES (" +
					"@program_id, @description, @value, @machine_name, @clinic_id" +
				")",
					new MySqlParameter("program_id", programProperty.ProgramId),
					new MySqlParameter("description", programProperty.Description ?? ""),
					new MySqlParameter("value", programProperty.Value ?? ""),
					new MySqlParameter("machine_name", (object)programProperty.MachineName ?? DBNull.Value),
					new MySqlParameter("clinic_id", programProperty.ClinicId));

		/// <summary>
		/// Updates the specified <see cref="ProgramProperty"/> in the database.
		/// </summary>
		/// <param name="programProperty">The <see cref="ProgramProperty"/> to update.</param>
		private static void ExecuteUpdate(ProgramProperty programProperty)
			=> Database.ExecuteNonQuery(
				"UPDATE `programproperty` SET " +
					"`program_id` = @program_id, " +
					"`description` = @description, " +
					"`value` = @value, " +
					"`machine_name` = @machine_name, " +
					"`clinic_id` = @clinic_id " +
				"WHERE `id` = @id",
					new MySqlParameter("id", programProperty.Id),
					new MySqlParameter("program_id", programProperty.ProgramId),
					new MySqlParameter("description", programProperty.Description ?? ""),
					new MySqlParameter("value", programProperty.Value ?? ""),
					new MySqlParameter("machine_name", (object)programProperty.MachineName ?? DBNull.Value),
					new MySqlParameter("clinic_id", programProperty.ClinicId));

		/// <summary>
		/// Deletes a single <see cref="ProgramProperty"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="ProgramProperty"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `programproperty` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="ProgramProperty"/> object from the database.
		/// </summary>
		/// <param name="programProperty">The <see cref="ProgramProperty"/> to delete.</param>
		private static void ExecuteDelete(ProgramProperty programProperty)
			=> ExecuteDelete(programProperty.Id);
	}
}
