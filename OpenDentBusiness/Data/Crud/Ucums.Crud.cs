//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class Ucums
	{
		public static Ucum FromReader(MySqlDataReader dataReader)
		{
			return new Ucum
			{
				Id = (long)dataReader["id"],
				Code = (string)dataReader["code"],
				Description = (string)dataReader["description"],
				IsInUse = (Convert.ToInt32(dataReader["is_in_use"]) == 1)
			};
		}

		/// <summary>
		/// Selects a single Ucum object from the database using the specified SQL command.
		/// </summary>
		public static Ucum SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Ucum"/> object with the specified key from the database.
		/// </summary>
		public static Ucum SelectOne(Int64 id)
			=> SelectOne("SELECT * FROM `ucums` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Ucum"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Ucum> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Ucum"/> into the database.
		/// </summary>
		public static long Insert(Ucum ucum)
			=> ucum.Id = Database.ExecuteInsert(
				"INSERT INTO `ucums` " +
				"(`code`, `description`, `is_in_use`) " +
				"VALUES (" +
					"@code, @description, @is_in_use" +
				")");

		/// <summary>
		/// Updates the specified <see cref="Ucum"/> in the database.
		/// </summary>
		public static void Update(Ucum ucum)
			=> Database.ExecuteNonQuery(
				"UPDATE `ucums` SET " +
					"`code` = @code, " +
					"`description` = @description, " +
					"`is_in_use` = @is_in_use " +
				"WHERE `id` = @id",
					new MySqlParameter("id", ucum.Id),
					new MySqlParameter("code", ucum.Code ?? ""),
					new MySqlParameter("description", ucum.Description ?? ""),
					new MySqlParameter("is_in_use", (ucum.IsInUse ? 1 : 0)));

		/// <summary>
		/// Updates the specified <see cref="Ucum"/> in the database.
		/// </summary>
		public static bool Update(Ucum ucumsNew, Ucum ucumsOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (ucumsNew.Code != ucumsOld.Code)
			{
				updates.Add("`code` = @code");
				parameters.Add(new MySqlParameter("code", ucumsNew.Code ?? ""));
			}

			if (ucumsNew.Description != ucumsOld.Description)
			{
				updates.Add("`description` = @description");
				parameters.Add(new MySqlParameter("description", ucumsNew.Description ?? ""));
			}

			if (ucumsNew.IsInUse != ucumsOld.IsInUse)
			{
				updates.Add("`is_in_use` = @is_in_use");
				parameters.Add(new MySqlParameter("is_in_use", (ucumsNew.IsInUse ? 1 : 0)));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("id", ucumsNew.Id));

			Database.ExecuteNonQuery("UPDATE `ucums` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `id` = @id",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="Ucum"/> object from the database.
		/// </summary>
		public static void Delete(Int64 id)
			 => Database.ExecuteNonQuery("DELETE FROM `ucums` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Ucum"/> object from the database.
		/// </summary>
		public static void Delete(Ucum ucum)
			=> Delete(ucum.Id);
	}
}
