//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class Clinics
	{
		public static Clinic FromReader(MySqlDataReader dataReader)
		{
			return new Clinic
			{
				Id = (long)dataReader["id"],
				Abbr = (string)dataReader["abbr"],
				Description = (string)dataReader["description"],
				AddressLine1 = (string)dataReader["address_line1"],
				AddressLine2 = (string)dataReader["address_line2"],
				City = (string)dataReader["city"],
				State = (string)dataReader["state"],
				Zip = (string)dataReader["zip"],
				BillingAddressLine1 = (string)dataReader["billing_address_line1"],
				BillingAddressLine2 = (string)dataReader["billing_address_line2"],
				BillingCity = (string)dataReader["billing_city"],
				BillingState = (string)dataReader["billing_state"],
				BillingZip = (string)dataReader["billing_zip"],
				BillingAddressOnClaims = (Convert.ToInt32(dataReader["billing_address_on_claims"]) == 1),
				PayToAddressLine1 = (string)dataReader["pay_to_address_line1"],
				PayToAddressLine2 = (string)dataReader["pay_to_address_line2"],
				PayToCity = (string)dataReader["pay_to_city"],
				PayToState = (string)dataReader["pay_to_state"],
				PayToZip = (string)dataReader["pay_to_zip"],
				Phone = (string)dataReader["phone"],
				BankNumber = (string)dataReader["bank_number"],
				DefaultPlaceOfService = (string)dataReader["default_place_of_service"],
				InsBillingProviderType = Convert.ToChar(dataReader["ins_billing_provider_type"]),
				InsBillingProviderId = dataReader["ins_billing_provider_id"] as long?,
				InsVerifyExcluded = (Convert.ToInt32(dataReader["ins_verify_excluded"]) == 1),
				Fax = (string)dataReader["fax"],
				EmailAddressId = dataReader["email_address_id"] as long?,
				DefaultProviderId = dataReader["default_provider_id"] as long?,
				IsMedicalOnly = (Convert.ToInt32(dataReader["is_medical_only"]) == 1),
				Region = dataReader["region"] as long?,
				MedlabAccountId = (string)dataReader["medlab_account_id"],
				IsConfirmEnabled = (Convert.ToInt32(dataReader["is_confirm_enabled"]) == 1),
				IsConfirmDefault = (Convert.ToInt32(dataReader["is_confirm_default"]) == 1),
				IsHidden = (Convert.ToInt32(dataReader["is_hidden"]) == 1),
				SchedulingNote = (string)dataReader["scheduling_note"],
				HasProcedureOnRx = (Convert.ToInt32(dataReader["has_procedure_on_rx"]) == 1)
			};
		}

		/// <summary>
		/// Selects a single Clinic object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Clinic SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Clinic"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Clinic"/> to select.</param>
		public static Clinic SelectOne(long id)
			=> SelectOne("SELECT * FROM `clinics` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Clinic"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Clinic> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Clinic"/> into the database.
		/// </summary>
		/// <param name="clinic">The <see cref="Clinic"/> to insert into the database.</param>
		private static long ExecuteInsert(Clinic clinic)
			=> clinic.Id = Database.ExecuteInsert(
				"INSERT INTO `clinics` " +
				"(`abbr`, `description`, `address_line1`, `address_line2`, `city`, `state`, `zip`, `billing_address_line1`, `billing_address_line2`, `billing_city`, `billing_state`, `billing_zip`, `billing_address_on_claims`, `pay_to_address_line1`, `pay_to_address_line2`, `pay_to_city`, `pay_to_state`, `pay_to_zip`, `phone`, `bank_number`, `default_place_of_service`, `ins_billing_provider_type`, `ins_billing_provider_id`, `ins_verify_excluded`, `fax`, `email_address_id`, `default_provider_id`, `is_medical_only`, `region`, `medlab_account_id`, `is_confirm_enabled`, `is_confirm_default`, `is_hidden`, `scheduling_note`, `has_procedure_on_rx`) " +
				"VALUES (" +
					"@abbr, @description, @address_line1, @address_line2, @city, @state, @zip, @billing_address_line1, @billing_address_line2, @billing_city, @billing_state, @billing_zip, @billing_address_on_claims, @pay_to_address_line1, @pay_to_address_line2, @pay_to_city, @pay_to_state, @pay_to_zip, @phone, @bank_number, @default_place_of_service, @ins_billing_provider_type, @ins_billing_provider_id, @ins_verify_excluded, @fax, @email_address_id, @default_provider_id, @is_medical_only, @region, @medlab_account_id, @is_confirm_enabled, @is_confirm_default, @is_hidden, @scheduling_note, @has_procedure_on_rx" +
				")",
					new MySqlParameter("abbr", clinic.Abbr ?? ""),
					new MySqlParameter("description", clinic.Description ?? ""),
					new MySqlParameter("address_line1", clinic.AddressLine1 ?? ""),
					new MySqlParameter("address_line2", clinic.AddressLine2 ?? ""),
					new MySqlParameter("city", clinic.City ?? ""),
					new MySqlParameter("state", clinic.State ?? ""),
					new MySqlParameter("zip", clinic.Zip ?? ""),
					new MySqlParameter("billing_address_line1", clinic.BillingAddressLine1 ?? ""),
					new MySqlParameter("billing_address_line2", clinic.BillingAddressLine2 ?? ""),
					new MySqlParameter("billing_city", clinic.BillingCity ?? ""),
					new MySqlParameter("billing_state", clinic.BillingState ?? ""),
					new MySqlParameter("billing_zip", clinic.BillingZip ?? ""),
					new MySqlParameter("billing_address_on_claims", (clinic.BillingAddressOnClaims ? 1 : 0)),
					new MySqlParameter("pay_to_address_line1", clinic.PayToAddressLine1 ?? ""),
					new MySqlParameter("pay_to_address_line2", clinic.PayToAddressLine2 ?? ""),
					new MySqlParameter("pay_to_city", clinic.PayToCity ?? ""),
					new MySqlParameter("pay_to_state", clinic.PayToState ?? ""),
					new MySqlParameter("pay_to_zip", clinic.PayToZip ?? ""),
					new MySqlParameter("phone", clinic.Phone ?? ""),
					new MySqlParameter("bank_number", clinic.BankNumber ?? ""),
					new MySqlParameter("default_place_of_service", (clinic.DefaultPlaceOfService?.Length > 2) ? clinic.DefaultPlaceOfService.Substring(0, 2) : (clinic.DefaultPlaceOfService ?? "")),
					new MySqlParameter("ins_billing_provider_type", clinic.InsBillingProviderType),
					new MySqlParameter("ins_billing_provider_id", (clinic.InsBillingProviderId.HasValue ? (object)clinic.InsBillingProviderId.Value : DBNull.Value)),
					new MySqlParameter("ins_verify_excluded", (clinic.InsVerifyExcluded ? 1 : 0)),
					new MySqlParameter("fax", clinic.Fax ?? ""),
					new MySqlParameter("email_address_id", (clinic.EmailAddressId.HasValue ? (object)clinic.EmailAddressId.Value : DBNull.Value)),
					new MySqlParameter("default_provider_id", (clinic.DefaultProviderId.HasValue ? (object)clinic.DefaultProviderId.Value : DBNull.Value)),
					new MySqlParameter("is_medical_only", (clinic.IsMedicalOnly ? 1 : 0)),
					new MySqlParameter("region", (clinic.Region.HasValue ? (object)clinic.Region.Value : DBNull.Value)),
					new MySqlParameter("medlab_account_id", clinic.MedlabAccountId ?? ""),
					new MySqlParameter("is_confirm_enabled", (clinic.IsConfirmEnabled ? 1 : 0)),
					new MySqlParameter("is_confirm_default", (clinic.IsConfirmDefault ? 1 : 0)),
					new MySqlParameter("is_hidden", (clinic.IsHidden ? 1 : 0)),
					new MySqlParameter("scheduling_note", clinic.SchedulingNote ?? ""),
					new MySqlParameter("has_procedure_on_rx", (clinic.HasProcedureOnRx ? 1 : 0)));

		/// <summary>
		/// Updates the specified <see cref="Clinic"/> in the database.
		/// </summary>
		/// <param name="clinic">The <see cref="Clinic"/> to update.</param>
		private static void ExecuteUpdate(Clinic clinic)
			=> Database.ExecuteNonQuery(
				"UPDATE `clinics` SET " +
					"`abbr` = @abbr, " +
					"`description` = @description, " +
					"`address_line1` = @address_line1, " +
					"`address_line2` = @address_line2, " +
					"`city` = @city, " +
					"`state` = @state, " +
					"`zip` = @zip, " +
					"`billing_address_line1` = @billing_address_line1, " +
					"`billing_address_line2` = @billing_address_line2, " +
					"`billing_city` = @billing_city, " +
					"`billing_state` = @billing_state, " +
					"`billing_zip` = @billing_zip, " +
					"`billing_address_on_claims` = @billing_address_on_claims, " +
					"`pay_to_address_line1` = @pay_to_address_line1, " +
					"`pay_to_address_line2` = @pay_to_address_line2, " +
					"`pay_to_city` = @pay_to_city, " +
					"`pay_to_state` = @pay_to_state, " +
					"`pay_to_zip` = @pay_to_zip, " +
					"`phone` = @phone, " +
					"`bank_number` = @bank_number, " +
					"`default_place_of_service` = @default_place_of_service, " +
					"`ins_billing_provider_type` = @ins_billing_provider_type, " +
					"`ins_billing_provider_id` = @ins_billing_provider_id, " +
					"`ins_verify_excluded` = @ins_verify_excluded, " +
					"`fax` = @fax, " +
					"`email_address_id` = @email_address_id, " +
					"`default_provider_id` = @default_provider_id, " +
					"`is_medical_only` = @is_medical_only, " +
					"`region` = @region, " +
					"`medlab_account_id` = @medlab_account_id, " +
					"`is_confirm_enabled` = @is_confirm_enabled, " +
					"`is_confirm_default` = @is_confirm_default, " +
					"`is_hidden` = @is_hidden, " +
					"`scheduling_note` = @scheduling_note, " +
					"`has_procedure_on_rx` = @has_procedure_on_rx " +
				"WHERE `id` = @id",
					new MySqlParameter("id", clinic.Id),
					new MySqlParameter("abbr", clinic.Abbr ?? ""),
					new MySqlParameter("description", clinic.Description ?? ""),
					new MySqlParameter("address_line1", clinic.AddressLine1 ?? ""),
					new MySqlParameter("address_line2", clinic.AddressLine2 ?? ""),
					new MySqlParameter("city", clinic.City ?? ""),
					new MySqlParameter("state", clinic.State ?? ""),
					new MySqlParameter("zip", clinic.Zip ?? ""),
					new MySqlParameter("billing_address_line1", clinic.BillingAddressLine1 ?? ""),
					new MySqlParameter("billing_address_line2", clinic.BillingAddressLine2 ?? ""),
					new MySqlParameter("billing_city", clinic.BillingCity ?? ""),
					new MySqlParameter("billing_state", clinic.BillingState ?? ""),
					new MySqlParameter("billing_zip", clinic.BillingZip ?? ""),
					new MySqlParameter("billing_address_on_claims", (clinic.BillingAddressOnClaims ? 1 : 0)),
					new MySqlParameter("pay_to_address_line1", clinic.PayToAddressLine1 ?? ""),
					new MySqlParameter("pay_to_address_line2", clinic.PayToAddressLine2 ?? ""),
					new MySqlParameter("pay_to_city", clinic.PayToCity ?? ""),
					new MySqlParameter("pay_to_state", clinic.PayToState ?? ""),
					new MySqlParameter("pay_to_zip", clinic.PayToZip ?? ""),
					new MySqlParameter("phone", clinic.Phone ?? ""),
					new MySqlParameter("bank_number", clinic.BankNumber ?? ""),
					new MySqlParameter("default_place_of_service", (clinic.DefaultPlaceOfService?.Length > 2) ? clinic.DefaultPlaceOfService.Substring(0, 2) : (clinic.DefaultPlaceOfService ?? "")),
					new MySqlParameter("ins_billing_provider_type", clinic.InsBillingProviderType),
					new MySqlParameter("ins_billing_provider_id", (clinic.InsBillingProviderId.HasValue ? (object)clinic.InsBillingProviderId.Value : DBNull.Value)),
					new MySqlParameter("ins_verify_excluded", (clinic.InsVerifyExcluded ? 1 : 0)),
					new MySqlParameter("fax", clinic.Fax ?? ""),
					new MySqlParameter("email_address_id", (clinic.EmailAddressId.HasValue ? (object)clinic.EmailAddressId.Value : DBNull.Value)),
					new MySqlParameter("default_provider_id", (clinic.DefaultProviderId.HasValue ? (object)clinic.DefaultProviderId.Value : DBNull.Value)),
					new MySqlParameter("is_medical_only", (clinic.IsMedicalOnly ? 1 : 0)),
					new MySqlParameter("region", (clinic.Region.HasValue ? (object)clinic.Region.Value : DBNull.Value)),
					new MySqlParameter("medlab_account_id", clinic.MedlabAccountId ?? ""),
					new MySqlParameter("is_confirm_enabled", (clinic.IsConfirmEnabled ? 1 : 0)),
					new MySqlParameter("is_confirm_default", (clinic.IsConfirmDefault ? 1 : 0)),
					new MySqlParameter("is_hidden", (clinic.IsHidden ? 1 : 0)),
					new MySqlParameter("scheduling_note", clinic.SchedulingNote ?? ""),
					new MySqlParameter("has_procedure_on_rx", (clinic.HasProcedureOnRx ? 1 : 0)));

		/// <summary>
		/// Deletes a single <see cref="Clinic"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Clinic"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `clinics` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Clinic"/> object from the database.
		/// </summary>
		/// <param name="clinic">The <see cref="Clinic"/> to delete.</param>
		private static void ExecuteDelete(Clinic clinic)
			=> ExecuteDelete(clinic.Id);
	}
}
