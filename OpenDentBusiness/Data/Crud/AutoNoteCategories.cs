//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;

namespace Imedisoft.Data
{
	public partial class AutoNoteCategories
	{
		public static AutoNoteCategory FromReader(MySqlDataReader dataReader)
		{
			return new AutoNoteCategory
			{
				Id = (long)dataReader["id"],
				ParentId = dataReader["parent_id"] as long?,
				Description = (string)dataReader["description"]
			};
		}

		/// <summary>
		/// Selects a single AutoNoteCategory object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static AutoNoteCategory SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="AutoNoteCategory"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="AutoNoteCategory"/> to select.</param>
		public static AutoNoteCategory SelectOne(long id)
			=> SelectOne("SELECT * FROM `auto_note_categories` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="AutoNoteCategory"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<AutoNoteCategory> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="AutoNoteCategory"/> into the database.
		/// </summary>
		/// <param name="autoNoteCategory">The <see cref="AutoNoteCategory"/> to insert into the database.</param>
		private static long ExecuteInsert(AutoNoteCategory autoNoteCategory)
			=> autoNoteCategory.Id = Database.ExecuteInsert(
				"INSERT INTO `auto_note_categories` " +
				"(`parent_id`, `description`) " +
				"VALUES (" +
					"@parent_id, @description" +
				")",
					new MySqlParameter("parent_id", (autoNoteCategory.ParentId.HasValue ? (object)autoNoteCategory.ParentId.Value : DBNull.Value)),
					new MySqlParameter("description", autoNoteCategory.Description ?? ""));

		/// <summary>
		/// Updates the specified <see cref="AutoNoteCategory"/> in the database.
		/// </summary>
		/// <param name="autoNoteCategory">The <see cref="AutoNoteCategory"/> to update.</param>
		private static void ExecuteUpdate(AutoNoteCategory autoNoteCategory)
			=> Database.ExecuteNonQuery(
				"UPDATE `auto_note_categories` SET " +
					"`parent_id` = @parent_id, " +
					"`description` = @description " +
				"WHERE `id` = @id",
					new MySqlParameter("id", autoNoteCategory.Id),
					new MySqlParameter("parent_id", (autoNoteCategory.ParentId.HasValue ? (object)autoNoteCategory.ParentId.Value : DBNull.Value)),
					new MySqlParameter("description", autoNoteCategory.Description ?? ""));

		/// <summary>
		/// Deletes a single <see cref="AutoNoteCategory"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="AutoNoteCategory"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `auto_note_categories` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="AutoNoteCategory"/> object from the database.
		/// </summary>
		/// <param name="autoNoteCategory">The <see cref="AutoNoteCategory"/> to delete.</param>
		private static void ExecuteDelete(AutoNoteCategory autoNoteCategory)
			=> ExecuteDelete(autoNoteCategory.Id);
	}
}
