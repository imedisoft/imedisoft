//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;

namespace OpenDentBusiness
{
	public partial class Accounts
	{
		public static Account FromReader(MySqlDataReader dataReader)
		{
			return new Account
			{
				Id = (long)dataReader["id"],
				Description = (string)dataReader["description"],
				Type = (AccountType)Convert.ToInt32(dataReader["type"]),
				BankNumber = (string)dataReader["bank_number"],
				Inactive = (Convert.ToInt32(dataReader["inactive"]) == 1),
				Color = Color.FromArgb((int)dataReader["color"])
			};
		}

		/// <summary>
		/// Selects a single Account object from the database using the specified SQL command.
		/// </summary>
		public static Account SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Account"/> object with the specified key from the database.
		/// </summary>
		public static Account SelectOne(Int64 id)
			=> SelectOne("SELECT * FROM `accounts` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Account"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Account> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Account"/> into the database.
		/// </summary>
		public static long Insert(Account account)
			=> account.Id = Database.ExecuteInsert(
				"INSERT INTO `accounts` " +
				"(`description`, `type`, `bank_number`, `inactive`, `color`) " +
				"VALUES (" +
					"@description, @type, @bank_number, @inactive, @color" +
				")");

		/// <summary>
		/// Updates the specified <see cref="Account"/> in the database.
		/// </summary>
		public static void Update(Account account)
			=> Database.ExecuteNonQuery(
				"UPDATE `accounts` SET " +
					"`description` = @description, " +
					"`type` = @type, " +
					"`bank_number` = @bank_number, " +
					"`inactive` = @inactive, " +
					"`color` = @color " +
				"WHERE `id` = @id",
					new MySqlParameter("id", account.Id),
					new MySqlParameter("description", account.Description ?? ""),
					new MySqlParameter("type", (int)account.Type),
					new MySqlParameter("bank_number", account.BankNumber ?? ""),
					new MySqlParameter("inactive", (account.Inactive ? 1 : 0)),
					new MySqlParameter("color", account.Color.ToArgb()));

		/// <summary>
		/// Updates the specified <see cref="Account"/> in the database.
		/// </summary>
		public static bool Update(Account accountsNew, Account accountsOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (accountsNew.Description != accountsOld.Description)
			{
				updates.Add("`description` = @description");
				parameters.Add(new MySqlParameter("description", accountsNew.Description ?? ""));
			}

			if (accountsNew.Type != accountsOld.Type)
			{
				updates.Add("`type` = @type");
				parameters.Add(new MySqlParameter("type", (int)accountsNew.Type));
			}

			if (accountsNew.BankNumber != accountsOld.BankNumber)
			{
				updates.Add("`bank_number` = @bank_number");
				parameters.Add(new MySqlParameter("bank_number", accountsNew.BankNumber ?? ""));
			}

			if (accountsNew.Inactive != accountsOld.Inactive)
			{
				updates.Add("`inactive` = @inactive");
				parameters.Add(new MySqlParameter("inactive", (accountsNew.Inactive ? 1 : 0)));
			}

			if (accountsNew.Color != accountsOld.Color)
			{
				updates.Add("`color` = @color");
				parameters.Add(new MySqlParameter("color", accountsNew.Color.ToArgb()));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("id", accountsNew.Id));

			Database.ExecuteNonQuery("UPDATE `accounts` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `id` = @id",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="Account"/> object from the database.
		/// </summary>
		public static void Delete(Int64 id)
			 => Database.ExecuteNonQuery("DELETE FROM `accounts` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Account"/> object from the database.
		/// </summary>
		public static void Delete(Account account)
			=> Delete(account.Id);
	}
}
