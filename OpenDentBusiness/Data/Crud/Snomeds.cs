//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Imedisoft.Data
{
	public partial class Snomeds
	{
		public static Snomed FromReader(MySqlDataReader dataReader)
		{
			return new Snomed
			{
				Code = (string)dataReader["code"],
				Description = (string)dataReader["description"]
			};
		}

		/// <summary>
		/// Selects a single Snomed object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Snomed SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Snomed"/> object with the specified key from the database.
		/// </summary>
		/// <param name="code">The primary key of the <see cref="Snomed"/> to select.</param>
		public static Snomed SelectOne(string code)
			=> SelectOne("SELECT * FROM `snomed` WHERE `code` = @code",
				new MySqlParameter("code", code ?? ""));

		/// <summary>
		/// Selects multiple <see cref="Snomed"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Snomed> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Snomed"/> into the database.
		/// </summary>
		/// <param name="snomed">The <see cref="Snomed"/> to insert into the database.</param>
		private static void ExecuteInsert(Snomed snomed)
			=> Database.ExecuteNonQuery(
				"INSERT INTO `snomed` " +
				"(`description`) " +
				"VALUES (" +
					"@description" +
				")",
					new MySqlParameter("description", snomed.Description ?? ""));

		/// <summary>
		/// Updates the specified <see cref="Snomed"/> in the database.
		/// </summary>
		/// <param name="snomed">The <see cref="Snomed"/> to update.</param>
		private static void ExecuteUpdate(Snomed snomed)
			=> Database.ExecuteNonQuery(
				"UPDATE `snomed` SET " +
					"`description` = @description " +
				"WHERE `code` = @code",
					new MySqlParameter("code", snomed.Code ?? ""),
					new MySqlParameter("description", snomed.Description ?? ""));

		/// <summary>
		/// Deletes a single <see cref="Snomed"/> object from the database.
		/// </summary>
		/// <param name="code">The primary key of the <see cref="Snomed"/> to delete.</param>
		private static void ExecuteDelete(string code)
			 => Database.ExecuteNonQuery("DELETE FROM `snomed` WHERE `code` = @code",
					new MySqlParameter("code", code ?? ""));

		/// <summary>
		/// Deletes the specified <see cref="Snomed"/> object from the database.
		/// </summary>
		/// <param name="snomed">The <see cref="Snomed"/> to delete.</param>
		private static void ExecuteDelete(Snomed snomed)
			=> ExecuteDelete(snomed.Code);
	}
}
