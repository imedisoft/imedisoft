//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Drawing;

namespace Imedisoft.Data
{
    public partial class ProcedureCodes
	{
		public static ProcedureCode FromReader(MySqlDataReader dataReader)
		{
			return new ProcedureCode
			{
				Id = (long)dataReader["id"],
				Code = (string)dataReader["code"],
				Description = (string)dataReader["description"],
				ShortDescription = (string)dataReader["short_description"],
				Time = (string)dataReader["time"],
				ProcedureCategory = (long)dataReader["procedure_category"],
				TreatmentArea = (ProcedureTreatmentArea)Convert.ToInt32(dataReader["treatment_area"]),
				NoInsuranceBill = (Convert.ToInt32(dataReader["no_insurance_bill"]) == 1),
				IsProsthesis = (Convert.ToInt32(dataReader["is_prosthesis"]) == 1),
				IsRadiology = (Convert.ToInt32(dataReader["is_radiology"]) == 1),
				IsHygiene = (Convert.ToInt32(dataReader["is_hygiene"]) == 1),
				IsCanadianLab = (Convert.ToInt32(dataReader["is_canadian_lab"]) == 1),
				IsTaxed = (Convert.ToInt32(dataReader["is_taxed"]) == 1),
				IsMultiVisit = (Convert.ToInt32(dataReader["is_multi_visit"]) == 1),
				AlternateCode1 = (string)dataReader["alternate_code1"],
				MedicalCode = dataReader["medical_code"] as string,
				PaintType = (ToothPaintingType)Convert.ToInt32(dataReader["paint_type"]),
				GraphicColor = Color.FromArgb((int)dataReader["graphic_color"]),
				LaymanTerm = (string)dataReader["layman_term"],
				BaseUnits = (int)dataReader["base_units"],
				SubstitutionCode = dataReader["substitution_code"] as string,
				SubstitutionCondition = (SubstitutionCondition)Convert.ToInt32(dataReader["substitution_condition"]),
				DrugNDC = (string)dataReader["drug_ndc"],
				RevenueCodeDefault = (string)dataReader["revenue_code_default"],
				DefaultProviderId = dataReader["default_provider_id"] as long?,
				CanadaTimeUnits = (double)dataReader["canada_time_units"],
				DefaultNote = (string)dataReader["default_note"],
				DefaultNoteForClaim = (string)dataReader["default_note_claim"],
				DefaultNoteForTreatmentPlan = (string)dataReader["default_note_tp"],
				LastModifiedDate = (DateTime)dataReader["last_modified_date"],
				BypassGlobalLock = (BypassLockStatus)Convert.ToInt32(dataReader["bypass_global_lock"])
			};
		}

		/// <summary>
		/// Selects a single ProcedureCode object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static ProcedureCode SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="ProcedureCode"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="ProcedureCode"/> to select.</param>
		public static ProcedureCode SelectOne(long id)
			=> SelectOne("SELECT * FROM `procedure_codes` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="ProcedureCode"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<ProcedureCode> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="ProcedureCode"/> into the database.
		/// </summary>
		/// <param name="procedureCode">The <see cref="ProcedureCode"/> to insert into the database.</param>
		private static long ExecuteInsert(ProcedureCode procedureCode)
			=> procedureCode.Id = Database.ExecuteInsert(
				"INSERT INTO `procedure_codes` " +
				"(`code`, `description`, `short_description`, `time`, `procedure_category`, `treatment_area`, `no_insurance_bill`, `is_prosthesis`, `is_radiology`, `is_hygiene`, `is_canadian_lab`, `is_taxed`, `is_multi_visit`, `alternate_code1`, `medical_code`, `paint_type`, `graphic_color`, `layman_term`, `base_units`, `substitution_code`, `substitution_condition`, `drug_ndc`, `revenue_code_default`, `default_provider_id`, `canada_time_units`, `default_note`, `default_note_claim`, `default_note_tp`, `bypass_global_lock`) " +
				"VALUES (" +
					"@code, @description, @short_description, @time, @procedure_category, @treatment_area, @no_insurance_bill, @is_prosthesis, @is_radiology, @is_hygiene, @is_canadian_lab, @is_taxed, @is_multi_visit, @alternate_code1, @medical_code, @paint_type, @graphic_color, @layman_term, @base_units, @substitution_code, @substitution_condition, @drug_ndc, @revenue_code_default, @default_provider_id, @canada_time_units, @default_note, @default_note_claim, @default_note_tp, @bypass_global_lock" +
				")",
					new MySqlParameter("description", procedureCode.Description ?? ""),
					new MySqlParameter("short_description", procedureCode.ShortDescription ?? ""),
					new MySqlParameter("time", procedureCode.Time ?? ""),
					new MySqlParameter("procedure_category", procedureCode.ProcedureCategory),
					new MySqlParameter("treatment_area", (int)procedureCode.TreatmentArea),
					new MySqlParameter("no_insurance_bill", (procedureCode.NoInsuranceBill ? 1 : 0)),
					new MySqlParameter("is_prosthesis", (procedureCode.IsProsthesis ? 1 : 0)),
					new MySqlParameter("is_radiology", (procedureCode.IsRadiology ? 1 : 0)),
					new MySqlParameter("is_hygiene", (procedureCode.IsHygiene ? 1 : 0)),
					new MySqlParameter("is_canadian_lab", (procedureCode.IsCanadianLab ? 1 : 0)),
					new MySqlParameter("is_taxed", (procedureCode.IsTaxed ? 1 : 0)),
					new MySqlParameter("is_multi_visit", (procedureCode.IsMultiVisit ? 1 : 0)),
					new MySqlParameter("alternate_code1", procedureCode.AlternateCode1 ?? ""),
					new MySqlParameter("medical_code", (object)procedureCode.MedicalCode ?? DBNull.Value),
					new MySqlParameter("paint_type", (int)procedureCode.PaintType),
					new MySqlParameter("graphic_color", procedureCode.GraphicColor.ToArgb()),
					new MySqlParameter("layman_term", procedureCode.LaymanTerm ?? ""),
					new MySqlParameter("base_units", procedureCode.BaseUnits),
					new MySqlParameter("substitution_code", (object)procedureCode.SubstitutionCode ?? DBNull.Value),
					new MySqlParameter("substitution_condition", (int)procedureCode.SubstitutionCondition),
					new MySqlParameter("drug_ndc", procedureCode.DrugNDC ?? ""),
					new MySqlParameter("revenue_code_default", procedureCode.RevenueCodeDefault ?? ""),
					new MySqlParameter("default_provider_id", (procedureCode.DefaultProviderId.HasValue ? (object)procedureCode.DefaultProviderId.Value : DBNull.Value)),
					new MySqlParameter("canada_time_units", procedureCode.CanadaTimeUnits),
					new MySqlParameter("default_note", procedureCode.DefaultNote ?? ""),
					new MySqlParameter("default_note_claim", procedureCode.DefaultNoteForClaim ?? ""),
					new MySqlParameter("default_note_tp", procedureCode.DefaultNoteForTreatmentPlan ?? ""),
					new MySqlParameter("last_modified_date", procedureCode.LastModifiedDate),
					new MySqlParameter("bypass_global_lock", (int)procedureCode.BypassGlobalLock));

		/// <summary>
		/// Updates the specified <see cref="ProcedureCode"/> in the database.
		/// </summary>
		/// <param name="procedureCode">The <see cref="ProcedureCode"/> to update.</param>
		private static void ExecuteUpdate(ProcedureCode procedureCode)
			=> Database.ExecuteNonQuery(
				"UPDATE `procedure_codes` SET " +
					"`description` = @description, " +
					"`short_description` = @short_description, " +
					"`time` = @time, " +
					"`procedure_category` = @procedure_category, " +
					"`treatment_area` = @treatment_area, " +
					"`no_insurance_bill` = @no_insurance_bill, " +
					"`is_prosthesis` = @is_prosthesis, " +
					"`is_radiology` = @is_radiology, " +
					"`is_hygiene` = @is_hygiene, " +
					"`is_canadian_lab` = @is_canadian_lab, " +
					"`is_taxed` = @is_taxed, " +
					"`is_multi_visit` = @is_multi_visit, " +
					"`alternate_code1` = @alternate_code1, " +
					"`medical_code` = @medical_code, " +
					"`paint_type` = @paint_type, " +
					"`graphic_color` = @graphic_color, " +
					"`layman_term` = @layman_term, " +
					"`base_units` = @base_units, " +
					"`substitution_code` = @substitution_code, " +
					"`substitution_condition` = @substitution_condition, " +
					"`drug_ndc` = @drug_ndc, " +
					"`revenue_code_default` = @revenue_code_default, " +
					"`default_provider_id` = @default_provider_id, " +
					"`canada_time_units` = @canada_time_units, " +
					"`default_note` = @default_note, " +
					"`default_note_claim` = @default_note_claim, " +
					"`default_note_tp` = @default_note_tp, " +
					"`bypass_global_lock` = @bypass_global_lock " +
				"WHERE `id` = @id",
					new MySqlParameter("id", procedureCode.Id),
					new MySqlParameter("description", procedureCode.Description ?? ""),
					new MySqlParameter("short_description", procedureCode.ShortDescription ?? ""),
					new MySqlParameter("time", procedureCode.Time ?? ""),
					new MySqlParameter("procedure_category", procedureCode.ProcedureCategory),
					new MySqlParameter("treatment_area", (int)procedureCode.TreatmentArea),
					new MySqlParameter("no_insurance_bill", (procedureCode.NoInsuranceBill ? 1 : 0)),
					new MySqlParameter("is_prosthesis", (procedureCode.IsProsthesis ? 1 : 0)),
					new MySqlParameter("is_radiology", (procedureCode.IsRadiology ? 1 : 0)),
					new MySqlParameter("is_hygiene", (procedureCode.IsHygiene ? 1 : 0)),
					new MySqlParameter("is_canadian_lab", (procedureCode.IsCanadianLab ? 1 : 0)),
					new MySqlParameter("is_taxed", (procedureCode.IsTaxed ? 1 : 0)),
					new MySqlParameter("is_multi_visit", (procedureCode.IsMultiVisit ? 1 : 0)),
					new MySqlParameter("alternate_code1", procedureCode.AlternateCode1 ?? ""),
					new MySqlParameter("medical_code", (object)procedureCode.MedicalCode ?? DBNull.Value),
					new MySqlParameter("paint_type", (int)procedureCode.PaintType),
					new MySqlParameter("graphic_color", procedureCode.GraphicColor.ToArgb()),
					new MySqlParameter("layman_term", procedureCode.LaymanTerm ?? ""),
					new MySqlParameter("base_units", procedureCode.BaseUnits),
					new MySqlParameter("substitution_code", (object)procedureCode.SubstitutionCode ?? DBNull.Value),
					new MySqlParameter("substitution_condition", (int)procedureCode.SubstitutionCondition),
					new MySqlParameter("drug_ndc", procedureCode.DrugNDC ?? ""),
					new MySqlParameter("revenue_code_default", procedureCode.RevenueCodeDefault ?? ""),
					new MySqlParameter("default_provider_id", (procedureCode.DefaultProviderId.HasValue ? (object)procedureCode.DefaultProviderId.Value : DBNull.Value)),
					new MySqlParameter("canada_time_units", procedureCode.CanadaTimeUnits),
					new MySqlParameter("default_note", procedureCode.DefaultNote ?? ""),
					new MySqlParameter("default_note_claim", procedureCode.DefaultNoteForClaim ?? ""),
					new MySqlParameter("default_note_tp", procedureCode.DefaultNoteForTreatmentPlan ?? ""),
					new MySqlParameter("last_modified_date", procedureCode.LastModifiedDate),
					new MySqlParameter("bypass_global_lock", (int)procedureCode.BypassGlobalLock));

		/// <summary>
		/// Deletes a single <see cref="ProcedureCode"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="ProcedureCode"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `procedure_codes` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="ProcedureCode"/> object from the database.
		/// </summary>
		/// <param name="procedureCode">The <see cref="ProcedureCode"/> to delete.</param>
		private static void ExecuteDelete(ProcedureCode procedureCode)
			=> ExecuteDelete(procedureCode.Id);
	}
}
