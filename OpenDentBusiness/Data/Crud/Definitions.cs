//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;

namespace Imedisoft.Data
{
	public partial class Definitions
	{
		public static Definition FromReader(MySqlDataReader dataReader)
		{
			return new Definition
			{
				Id = (long)dataReader["id"],
				Category = (string)dataReader["category"],
				Name = (string)dataReader["name"],
				Value = (string)dataReader["value"],
				Taxonomy = (string)dataReader["taxonomy"],
				Color = Color.FromArgb((int)dataReader["color"]),
				SortOrder = (int)dataReader["sort_order"],
				IsHidden = (Convert.ToInt32(dataReader["is_hidden"]) == 1)
			};
		}

		/// <summary>
		/// Selects a single Definition object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Definition SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Definition"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Definition"/> to select.</param>
		public static Definition SelectOne(long id)
			=> SelectOne("SELECT * FROM `definitions` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Definition"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Definition> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Definition"/> into the database.
		/// </summary>
		/// <param name="definition">The <see cref="Definition"/> to insert into the database.</param>
		private static long ExecuteInsert(Definition definition)
			=> definition.Id = Database.ExecuteInsert(
				"INSERT INTO `definitions` " +
				"(`category`, `name`, `value`, `taxonomy`, `color`, `sort_order`, `is_hidden`) " +
				"VALUES (" +
					"@category, @name, @value, @taxonomy, @color, @sort_order, @is_hidden" +
				")",
					new MySqlParameter("category", definition.Category ?? ""),
					new MySqlParameter("name", definition.Name ?? ""),
					new MySqlParameter("value", definition.Value ?? ""),
					new MySqlParameter("taxonomy", definition.Taxonomy ?? ""),
					new MySqlParameter("color", definition.Color.ToArgb()),
					new MySqlParameter("sort_order", definition.SortOrder),
					new MySqlParameter("is_hidden", (definition.IsHidden ? 1 : 0)));

		/// <summary>
		/// Updates the specified <see cref="Definition"/> in the database.
		/// </summary>
		/// <param name="definition">The <see cref="Definition"/> to update.</param>
		private static void ExecuteUpdate(Definition definition)
			=> Database.ExecuteNonQuery(
				"UPDATE `definitions` SET " +
					"`category` = @category, " +
					"`name` = @name, " +
					"`value` = @value, " +
					"`taxonomy` = @taxonomy, " +
					"`color` = @color, " +
					"`sort_order` = @sort_order, " +
					"`is_hidden` = @is_hidden " +
				"WHERE `id` = @id",
					new MySqlParameter("id", definition.Id),
					new MySqlParameter("category", definition.Category ?? ""),
					new MySqlParameter("name", definition.Name ?? ""),
					new MySqlParameter("value", definition.Value ?? ""),
					new MySqlParameter("taxonomy", definition.Taxonomy ?? ""),
					new MySqlParameter("color", definition.Color.ToArgb()),
					new MySqlParameter("sort_order", definition.SortOrder),
					new MySqlParameter("is_hidden", (definition.IsHidden ? 1 : 0)));

		/// <summary>
		/// Deletes a single <see cref="Definition"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Definition"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `definitions` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Definition"/> object from the database.
		/// </summary>
		/// <param name="definition">The <see cref="Definition"/> to delete.</param>
		private static void ExecuteDelete(Definition definition)
			=> ExecuteDelete(definition.Id);
	}
}
