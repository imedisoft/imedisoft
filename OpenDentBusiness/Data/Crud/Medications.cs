//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Imedisoft.Data
{
	public partial class Medications
	{
		public static Medication FromReader(MySqlDataReader dataReader)
		{
			return new Medication
			{
				Id = (long)dataReader["id"],
				Name = (string)dataReader["name"],
				GenericId = dataReader["generic_id"] as long?,
				Notes = (string)dataReader["notes"],
				LastModifiedDate = (DateTime)dataReader["last_modified_date"],
				RxCui = (string)dataReader["rx_cui"]
			};
		}

		/// <summary>
		/// Selects a single Medication object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Medication SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Medication"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Medication"/> to select.</param>
		public static Medication SelectOne(long id)
			=> SelectOne("SELECT * FROM `medications` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Medication"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Medication> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Medication"/> into the database.
		/// </summary>
		/// <param name="medication">The <see cref="Medication"/> to insert into the database.</param>
		private static long ExecuteInsert(Medication medication)
			=> medication.Id = Database.ExecuteInsert(
				"INSERT INTO `medications` " +
				"(`name`, `generic_id`, `notes`, `rx_cui`) " +
				"VALUES (" +
					"@name, @generic_id, @notes, @rx_cui" +
				")",
					new MySqlParameter("name", medication.Name ?? ""),
					new MySqlParameter("generic_id", (medication.GenericId.HasValue ? (object)medication.GenericId.Value : DBNull.Value)),
					new MySqlParameter("notes", medication.Notes ?? ""),
					new MySqlParameter("last_modified_date", medication.LastModifiedDate),
					new MySqlParameter("rx_cui", medication.RxCui ?? ""));

		/// <summary>
		/// Updates the specified <see cref="Medication"/> in the database.
		/// </summary>
		/// <param name="medication">The <see cref="Medication"/> to update.</param>
		private static void ExecuteUpdate(Medication medication)
			=> Database.ExecuteNonQuery(
				"UPDATE `medications` SET " +
					"`name` = @name, " +
					"`generic_id` = @generic_id, " +
					"`notes` = @notes, " +
					"`rx_cui` = @rx_cui " +
				"WHERE `id` = @id",
					new MySqlParameter("id", medication.Id),
					new MySqlParameter("name", medication.Name ?? ""),
					new MySqlParameter("generic_id", (medication.GenericId.HasValue ? (object)medication.GenericId.Value : DBNull.Value)),
					new MySqlParameter("notes", medication.Notes ?? ""),
					new MySqlParameter("last_modified_date", medication.LastModifiedDate),
					new MySqlParameter("rx_cui", medication.RxCui ?? ""));

		/// <summary>
		/// Deletes a single <see cref="Medication"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Medication"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `medications` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Medication"/> object from the database.
		/// </summary>
		/// <param name="medication">The <see cref="Medication"/> to delete.</param>
		private static void ExecuteDelete(Medication medication)
			=> ExecuteDelete(medication.Id);
	}
}
