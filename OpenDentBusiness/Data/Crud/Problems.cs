//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Imedisoft.Data
{
	public partial class Problems
	{
		public static Problem FromReader(MySqlDataReader dataReader)
		{
			return new Problem
			{
				Id = (long)dataReader["id"],
				ProblemDefId = (long)dataReader["problem_def_id"],
				PatientId = (long)dataReader["patient_id"],
				PatientNote = (string)dataReader["patient_note"],
				Status = (ProblemStatus)Convert.ToInt32(dataReader["status"]),
				FunctionalStatus = (FunctionalStatus)Convert.ToInt32(dataReader["functional_status"]),
				DateStart = dataReader["date_start"] as DateTime?,
				DateStop = dataReader["date_stop"] as DateTime?,
				SnomedProblemType = (string)dataReader["snomed_problem_type"],
				LastModifiedDate = (DateTime)dataReader["last_modified_date"]
			};
		}

		/// <summary>
		/// Selects a single Disease object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Problem SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Problem"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Problem"/> to select.</param>
		public static Problem SelectOne(long id)
			=> SelectOne("SELECT * FROM `problems` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Problem"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Problem> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Problem"/> into the database.
		/// </summary>
		/// <param name="disease">The <see cref="Problem"/> to insert into the database.</param>
		private static long ExecuteInsert(Problem disease)
			=> disease.Id = Database.ExecuteInsert(
				"INSERT INTO `problems` " +
				"(`problem_def_id`, `patient_id`, `patient_note`, `status`, `functional_status`, `date_start`, `date_stop`, `snomed_problem_type`) " +
				"VALUES (" +
					"@problem_def_id, @patient_id, @patient_note, @status, @functional_status, @date_start, @date_stop, @snomed_problem_type" +
				")",
					new MySqlParameter("problem_def_id", disease.ProblemDefId),
					new MySqlParameter("patient_id", disease.PatientId),
					new MySqlParameter("patient_note", disease.PatientNote ?? ""),
					new MySqlParameter("status", (int)disease.Status),
					new MySqlParameter("functional_status", (int)disease.FunctionalStatus),
					new MySqlParameter("date_start", (disease.DateStart.HasValue ? (object)disease.DateStart.Value : DBNull.Value)),
					new MySqlParameter("date_stop", (disease.DateStop.HasValue ? (object)disease.DateStop.Value : DBNull.Value)),
					new MySqlParameter("snomed_problem_type", disease.SnomedProblemType ?? ""),
					new MySqlParameter("last_modified_date", disease.LastModifiedDate));

		/// <summary>
		/// Updates the specified <see cref="Problem"/> in the database.
		/// </summary>
		/// <param name="disease">The <see cref="Problem"/> to update.</param>
		private static void ExecuteUpdate(Problem disease)
			=> Database.ExecuteNonQuery(
				"UPDATE `problems` SET " +
					"`problem_def_id` = @problem_def_id, " +
					"`patient_id` = @patient_id, " +
					"`patient_note` = @patient_note, " +
					"`status` = @status, " +
					"`functional_status` = @functional_status, " +
					"`date_start` = @date_start, " +
					"`date_stop` = @date_stop, " +
					"`snomed_problem_type` = @snomed_problem_type " +
				"WHERE `id` = @id",
					new MySqlParameter("id", disease.Id),
					new MySqlParameter("problem_def_id", disease.ProblemDefId),
					new MySqlParameter("patient_id", disease.PatientId),
					new MySqlParameter("patient_note", disease.PatientNote ?? ""),
					new MySqlParameter("status", (int)disease.Status),
					new MySqlParameter("functional_status", (int)disease.FunctionalStatus),
					new MySqlParameter("date_start", (disease.DateStart.HasValue ? (object)disease.DateStart.Value : DBNull.Value)),
					new MySqlParameter("date_stop", (disease.DateStop.HasValue ? (object)disease.DateStop.Value : DBNull.Value)),
					new MySqlParameter("snomed_problem_type", disease.SnomedProblemType ?? ""),
					new MySqlParameter("last_modified_date", disease.LastModifiedDate));

		/// <summary>
		/// Deletes a single <see cref="Problem"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Problem"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `problems` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Problem"/> object from the database.
		/// </summary>
		/// <param name="disease">The <see cref="Problem"/> to delete.</param>
		private static void ExecuteDelete(Problem disease)
			=> ExecuteDelete(disease.Id);
	}
}
