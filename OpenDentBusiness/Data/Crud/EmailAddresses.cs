//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;

namespace Imedisoft.Data
{
	public partial class EmailAddresses
	{
		public static EmailAddress FromReader(MySqlDataReader dataReader)
		{
			return new EmailAddress
			{
				Id = (long)dataReader["id"],
				EmailAutographId = dataReader["email_autograph_id"] as long?,
				SmtpServer = (string)dataReader["smtp_server"],
				SmtpUsername = (string)dataReader["smtp_username"],
				SmtpPassword = (string)dataReader["smtp_password"],
				SmtpPort = (int)dataReader["smtp_port"],
				UseSSL = (Convert.ToInt32(dataReader["use_ssl"]) == 1),
				SenderAddress = (string)dataReader["sender_address"],
				Pop3Server = (string)dataReader["pop3_server"],
				Pop3Port = (int)dataReader["pop3_port"],
				UserId = dataReader["user_id"] as long?,
				AccessToken = (string)dataReader["access_token"],
				RefreshToken = (string)dataReader["refresh_token"]
			};
		}

		/// <summary>
		/// Selects a single EmailAddress object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static EmailAddress SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="EmailAddress"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="EmailAddress"/> to select.</param>
		public static EmailAddress SelectOne(long id)
			=> SelectOne("SELECT * FROM `email_addresses` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="EmailAddress"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<EmailAddress> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="EmailAddress"/> into the database.
		/// </summary>
		/// <param name="emailAddress">The <see cref="EmailAddress"/> to insert into the database.</param>
		private static long ExecuteInsert(EmailAddress emailAddress)
			=> emailAddress.Id = Database.ExecuteInsert(
				"INSERT INTO `email_addresses` " +
				"(`email_autograph_id`, `smtp_server`, `smtp_username`, `smtp_password`, `smtp_port`, `use_ssl`, `sender_address`, `pop3_server`, `pop3_port`, `user_id`, `access_token`, `refresh_token`) " +
				"VALUES (" +
					"@email_autograph_id, @smtp_server, @smtp_username, @smtp_password, @smtp_port, @use_ssl, @sender_address, @pop3_server, @pop3_port, @user_id, @access_token, @refresh_token" +
				")",
					new MySqlParameter("email_autograph_id", (emailAddress.EmailAutographId.HasValue ? (object)emailAddress.EmailAutographId.Value : DBNull.Value)),
					new MySqlParameter("smtp_server", emailAddress.SmtpServer ?? ""),
					new MySqlParameter("smtp_username", emailAddress.SmtpUsername ?? ""),
					new MySqlParameter("smtp_password", emailAddress.SmtpPassword ?? ""),
					new MySqlParameter("smtp_port", emailAddress.SmtpPort),
					new MySqlParameter("use_ssl", (emailAddress.UseSSL ? 1 : 0)),
					new MySqlParameter("sender_address", emailAddress.SenderAddress ?? ""),
					new MySqlParameter("pop3_server", emailAddress.Pop3Server ?? ""),
					new MySqlParameter("pop3_port", emailAddress.Pop3Port),
					new MySqlParameter("user_id", (emailAddress.UserId.HasValue ? (object)emailAddress.UserId.Value : DBNull.Value)),
					new MySqlParameter("access_token", emailAddress.AccessToken ?? ""),
					new MySqlParameter("refresh_token", emailAddress.RefreshToken ?? ""));

		/// <summary>
		/// Updates the specified <see cref="EmailAddress"/> in the database.
		/// </summary>
		/// <param name="emailAddress">The <see cref="EmailAddress"/> to update.</param>
		private static void ExecuteUpdate(EmailAddress emailAddress)
			=> Database.ExecuteNonQuery(
				"UPDATE `email_addresses` SET " +
					"`email_autograph_id` = @email_autograph_id, " +
					"`smtp_server` = @smtp_server, " +
					"`smtp_username` = @smtp_username, " +
					"`smtp_password` = @smtp_password, " +
					"`smtp_port` = @smtp_port, " +
					"`use_ssl` = @use_ssl, " +
					"`sender_address` = @sender_address, " +
					"`pop3_server` = @pop3_server, " +
					"`pop3_port` = @pop3_port, " +
					"`user_id` = @user_id, " +
					"`access_token` = @access_token, " +
					"`refresh_token` = @refresh_token " +
				"WHERE `id` = @id",
					new MySqlParameter("id", emailAddress.Id),
					new MySqlParameter("email_autograph_id", (emailAddress.EmailAutographId.HasValue ? (object)emailAddress.EmailAutographId.Value : DBNull.Value)),
					new MySqlParameter("smtp_server", emailAddress.SmtpServer ?? ""),
					new MySqlParameter("smtp_username", emailAddress.SmtpUsername ?? ""),
					new MySqlParameter("smtp_password", emailAddress.SmtpPassword ?? ""),
					new MySqlParameter("smtp_port", emailAddress.SmtpPort),
					new MySqlParameter("use_ssl", (emailAddress.UseSSL ? 1 : 0)),
					new MySqlParameter("sender_address", emailAddress.SenderAddress ?? ""),
					new MySqlParameter("pop3_server", emailAddress.Pop3Server ?? ""),
					new MySqlParameter("pop3_port", emailAddress.Pop3Port),
					new MySqlParameter("user_id", (emailAddress.UserId.HasValue ? (object)emailAddress.UserId.Value : DBNull.Value)),
					new MySqlParameter("access_token", emailAddress.AccessToken ?? ""),
					new MySqlParameter("refresh_token", emailAddress.RefreshToken ?? ""));

		/// <summary>
		/// Deletes a single <see cref="EmailAddress"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="EmailAddress"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `email_addresses` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="EmailAddress"/> object from the database.
		/// </summary>
		/// <param name="emailAddress">The <see cref="EmailAddress"/> to delete.</param>
		private static void ExecuteDelete(EmailAddress emailAddress)
			=> ExecuteDelete(emailAddress.Id);
	}
}
