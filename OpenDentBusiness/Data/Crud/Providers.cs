//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;

namespace Imedisoft.Data
{
	public partial class Providers
	{
		public static Provider FromReader(MySqlDataReader dataReader)
		{
			return new Provider
			{
				Id = (long)dataReader["id"],
				Abbr = (string)dataReader["abbr"],
				SortOrder = (int)dataReader["sort_order"],
				LastName = (string)dataReader["last_name"],
				FirstName = (string)dataReader["first_name"],
				Initials = (string)dataReader["initials"],
				Suffix = (string)dataReader["suffix"],
				FeeScheduleId = (long)dataReader["fee_schedule_id"],
				Specialty = (long)dataReader["specialty"],
				SSN = (string)dataReader["ssn"],
				UsingTIN = (Convert.ToInt32(dataReader["using_tin"]) == 1),
				DeaNumber = dataReader["dea_number"] as string,
				StateLicense = dataReader["state_license"] as string,
				StateRxID = dataReader["state_rx_id"] as string,
				StateWhereLicensed = dataReader["state_where_licensed"] as string,
				Color = Color.FromArgb((int)dataReader["color"]),
				ColorOutline = Color.FromArgb((int)dataReader["color_outline"]),
				HasSignature = (Convert.ToInt32(dataReader["has_signature"]) == 1),
				MedicaidID = (string)dataReader["medicaid_id"],
				SchoolClassId = dataReader["school_class_id"] as long?,
				NationalProviderID = (string)dataReader["national_provider_id"],
				CanadianOfficeNumber = (string)dataReader["canadian_office_number"],
				LastModifiedDate = (DateTime)dataReader["last_modified_date"],
				TaxonomyCodeOverride = (string)dataReader["taxonomy_code_override"],
				EcwID = (string)dataReader["ecw_id"],
				EmailAddressId = dataReader["email_address_id"] as long?,
				EhrMuStage = (int)dataReader["ehr_mu_stage"],
				BillingOverrideProviderId = dataReader["billing_override_provider_id"] as long?,
				CustomID = (string)dataReader["custom_id"],
				SchedulingNote = (string)dataReader["scheduling_note"],
				Birthdate = dataReader["birthdate"] as DateTime?,
				WebSchedDescription = (string)dataReader["web_sched_description"],
				WebSchedImageLocation = (string)dataReader["web_sched_image_location"],
				HourlyProductionGoal = (double)dataReader["hourly_production_goal"],
				TerminationDate = dataReader["termination_date"] as DateTime?,
				Status = (ProviderStatus)Convert.ToInt32(dataReader["status"]),
				IsSecondary = (Convert.ToInt32(dataReader["is_secondary"]) == 1),
				IsNotPerson = (Convert.ToInt32(dataReader["is_not_person"]) == 1),
				IsInstructor = (Convert.ToInt32(dataReader["is_instructor"]) == 1),
				IsCDAnet = (Convert.ToInt32(dataReader["is_cda_net"]) == 1),
				IsErxEnabled = (ErxEnabledStatus)Convert.ToInt32(dataReader["is_erx_enabled"]),
				IsHiddenReport = (Convert.ToInt32(dataReader["is_hidden_report"]) == 1),
				IsHidden = (Convert.ToInt32(dataReader["is_hidden"]) == 1)
			};
		}

		/// <summary>
		/// Selects a single Provider object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Provider SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Provider"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Provider"/> to select.</param>
		public static Provider SelectOne(long id)
			=> SelectOne("SELECT * FROM `providers` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Provider"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Provider> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Provider"/> into the database.
		/// </summary>
		/// <param name="provider">The <see cref="Provider"/> to insert into the database.</param>
		private static long ExecuteInsert(Provider provider)
			=> provider.Id = Database.ExecuteInsert(
				"INSERT INTO `providers` " +
				"(`abbr`, `sort_order`, `last_name`, `first_name`, `initials`, `suffix`, `fee_schedule_id`, `specialty`, `ssn`, `using_tin`, `dea_number`, `state_license`, `state_rx_id`, `state_where_licensed`, `color`, `color_outline`, `has_signature`, `medicaid_id`, `school_class_id`, `national_provider_id`, `canadian_office_number`, `taxonomy_code_override`, `ecw_id`, `email_address_id`, `ehr_mu_stage`, `billing_override_provider_id`, `custom_id`, `scheduling_note`, `birthdate`, `web_sched_description`, `web_sched_image_location`, `hourly_production_goal`, `termination_date`, `status`, `is_secondary`, `is_not_person`, `is_instructor`, `is_cda_net`, `is_erx_enabled`, `is_hidden_report`, `is_hidden`) " +
				"VALUES (" +
					"@abbr, @sort_order, @last_name, @first_name, @initials, @suffix, @fee_schedule_id, @specialty, @ssn, @using_tin, @dea_number, @state_license, @state_rx_id, @state_where_licensed, @color, @color_outline, @has_signature, @medicaid_id, @school_class_id, @national_provider_id, @canadian_office_number, @taxonomy_code_override, @ecw_id, @email_address_id, @ehr_mu_stage, @billing_override_provider_id, @custom_id, @scheduling_note, @birthdate, @web_sched_description, @web_sched_image_location, @hourly_production_goal, @termination_date, @status, @is_secondary, @is_not_person, @is_instructor, @is_cda_net, @is_erx_enabled, @is_hidden_report, @is_hidden" +
				")",
					new MySqlParameter("abbr", provider.Abbr ?? ""),
					new MySqlParameter("sort_order", provider.SortOrder),
					new MySqlParameter("last_name", provider.LastName ?? ""),
					new MySqlParameter("first_name", provider.FirstName ?? ""),
					new MySqlParameter("initials", provider.Initials ?? ""),
					new MySqlParameter("suffix", provider.Suffix ?? ""),
					new MySqlParameter("fee_schedule_id", provider.FeeScheduleId),
					new MySqlParameter("specialty", provider.Specialty),
					new MySqlParameter("ssn", provider.SSN ?? ""),
					new MySqlParameter("using_tin", (provider.UsingTIN ? 1 : 0)),
					new MySqlParameter("dea_number", (object)provider.DeaNumber ?? DBNull.Value),
					new MySqlParameter("state_license", (object)provider.StateLicense ?? DBNull.Value),
					new MySqlParameter("state_rx_id", (object)provider.StateRxID ?? DBNull.Value),
					new MySqlParameter("state_where_licensed", (object)provider.StateWhereLicensed ?? DBNull.Value),
					new MySqlParameter("color", provider.Color.ToArgb()),
					new MySqlParameter("color_outline", provider.ColorOutline.ToArgb()),
					new MySqlParameter("has_signature", (provider.HasSignature ? 1 : 0)),
					new MySqlParameter("medicaid_id", provider.MedicaidID ?? ""),
					new MySqlParameter("school_class_id", (provider.SchoolClassId.HasValue ? (object)provider.SchoolClassId.Value : DBNull.Value)),
					new MySqlParameter("national_provider_id", provider.NationalProviderID ?? ""),
					new MySqlParameter("canadian_office_number", provider.CanadianOfficeNumber ?? ""),
					new MySqlParameter("last_modified_date", provider.LastModifiedDate),
					new MySqlParameter("taxonomy_code_override", provider.TaxonomyCodeOverride ?? ""),
					new MySqlParameter("ecw_id", provider.EcwID ?? ""),
					new MySqlParameter("email_address_id", (provider.EmailAddressId.HasValue ? (object)provider.EmailAddressId.Value : DBNull.Value)),
					new MySqlParameter("ehr_mu_stage", provider.EhrMuStage),
					new MySqlParameter("billing_override_provider_id", (provider.BillingOverrideProviderId.HasValue ? (object)provider.BillingOverrideProviderId.Value : DBNull.Value)),
					new MySqlParameter("custom_id", provider.CustomID ?? ""),
					new MySqlParameter("scheduling_note", provider.SchedulingNote ?? ""),
					new MySqlParameter("birthdate", (provider.Birthdate.HasValue ? (object)provider.Birthdate.Value : DBNull.Value)),
					new MySqlParameter("web_sched_description", provider.WebSchedDescription ?? ""),
					new MySqlParameter("web_sched_image_location", provider.WebSchedImageLocation ?? ""),
					new MySqlParameter("hourly_production_goal", provider.HourlyProductionGoal),
					new MySqlParameter("termination_date", (provider.TerminationDate.HasValue ? (object)provider.TerminationDate.Value : DBNull.Value)),
					new MySqlParameter("status", (int)provider.Status),
					new MySqlParameter("is_secondary", (provider.IsSecondary ? 1 : 0)),
					new MySqlParameter("is_not_person", (provider.IsNotPerson ? 1 : 0)),
					new MySqlParameter("is_instructor", (provider.IsInstructor ? 1 : 0)),
					new MySqlParameter("is_cda_net", (provider.IsCDAnet ? 1 : 0)),
					new MySqlParameter("is_erx_enabled", (int)provider.IsErxEnabled),
					new MySqlParameter("is_hidden_report", (provider.IsHiddenReport ? 1 : 0)),
					new MySqlParameter("is_hidden", (provider.IsHidden ? 1 : 0)));

		/// <summary>
		/// Updates the specified <see cref="Provider"/> in the database.
		/// </summary>
		/// <param name="provider">The <see cref="Provider"/> to update.</param>
		private static void ExecuteUpdate(Provider provider)
			=> Database.ExecuteNonQuery(
				"UPDATE `providers` SET " +
					"`abbr` = @abbr, " +
					"`sort_order` = @sort_order, " +
					"`last_name` = @last_name, " +
					"`first_name` = @first_name, " +
					"`initials` = @initials, " +
					"`suffix` = @suffix, " +
					"`fee_schedule_id` = @fee_schedule_id, " +
					"`specialty` = @specialty, " +
					"`ssn` = @ssn, " +
					"`using_tin` = @using_tin, " +
					"`dea_number` = @dea_number, " +
					"`state_license` = @state_license, " +
					"`state_rx_id` = @state_rx_id, " +
					"`state_where_licensed` = @state_where_licensed, " +
					"`color` = @color, " +
					"`color_outline` = @color_outline, " +
					"`has_signature` = @has_signature, " +
					"`medicaid_id` = @medicaid_id, " +
					"`school_class_id` = @school_class_id, " +
					"`national_provider_id` = @national_provider_id, " +
					"`canadian_office_number` = @canadian_office_number, " +
					"`taxonomy_code_override` = @taxonomy_code_override, " +
					"`ecw_id` = @ecw_id, " +
					"`email_address_id` = @email_address_id, " +
					"`ehr_mu_stage` = @ehr_mu_stage, " +
					"`billing_override_provider_id` = @billing_override_provider_id, " +
					"`custom_id` = @custom_id, " +
					"`scheduling_note` = @scheduling_note, " +
					"`birthdate` = @birthdate, " +
					"`web_sched_description` = @web_sched_description, " +
					"`web_sched_image_location` = @web_sched_image_location, " +
					"`hourly_production_goal` = @hourly_production_goal, " +
					"`termination_date` = @termination_date, " +
					"`status` = @status, " +
					"`is_secondary` = @is_secondary, " +
					"`is_not_person` = @is_not_person, " +
					"`is_instructor` = @is_instructor, " +
					"`is_cda_net` = @is_cda_net, " +
					"`is_erx_enabled` = @is_erx_enabled, " +
					"`is_hidden_report` = @is_hidden_report, " +
					"`is_hidden` = @is_hidden " +
				"WHERE `id` = @id",
					new MySqlParameter("id", provider.Id),
					new MySqlParameter("abbr", provider.Abbr ?? ""),
					new MySqlParameter("sort_order", provider.SortOrder),
					new MySqlParameter("last_name", provider.LastName ?? ""),
					new MySqlParameter("first_name", provider.FirstName ?? ""),
					new MySqlParameter("initials", provider.Initials ?? ""),
					new MySqlParameter("suffix", provider.Suffix ?? ""),
					new MySqlParameter("fee_schedule_id", provider.FeeScheduleId),
					new MySqlParameter("specialty", provider.Specialty),
					new MySqlParameter("ssn", provider.SSN ?? ""),
					new MySqlParameter("using_tin", (provider.UsingTIN ? 1 : 0)),
					new MySqlParameter("dea_number", (object)provider.DeaNumber ?? DBNull.Value),
					new MySqlParameter("state_license", (object)provider.StateLicense ?? DBNull.Value),
					new MySqlParameter("state_rx_id", (object)provider.StateRxID ?? DBNull.Value),
					new MySqlParameter("state_where_licensed", (object)provider.StateWhereLicensed ?? DBNull.Value),
					new MySqlParameter("color", provider.Color.ToArgb()),
					new MySqlParameter("color_outline", provider.ColorOutline.ToArgb()),
					new MySqlParameter("has_signature", (provider.HasSignature ? 1 : 0)),
					new MySqlParameter("medicaid_id", provider.MedicaidID ?? ""),
					new MySqlParameter("school_class_id", (provider.SchoolClassId.HasValue ? (object)provider.SchoolClassId.Value : DBNull.Value)),
					new MySqlParameter("national_provider_id", provider.NationalProviderID ?? ""),
					new MySqlParameter("canadian_office_number", provider.CanadianOfficeNumber ?? ""),
					new MySqlParameter("last_modified_date", provider.LastModifiedDate),
					new MySqlParameter("taxonomy_code_override", provider.TaxonomyCodeOverride ?? ""),
					new MySqlParameter("ecw_id", provider.EcwID ?? ""),
					new MySqlParameter("email_address_id", (provider.EmailAddressId.HasValue ? (object)provider.EmailAddressId.Value : DBNull.Value)),
					new MySqlParameter("ehr_mu_stage", provider.EhrMuStage),
					new MySqlParameter("billing_override_provider_id", (provider.BillingOverrideProviderId.HasValue ? (object)provider.BillingOverrideProviderId.Value : DBNull.Value)),
					new MySqlParameter("custom_id", provider.CustomID ?? ""),
					new MySqlParameter("scheduling_note", provider.SchedulingNote ?? ""),
					new MySqlParameter("birthdate", (provider.Birthdate.HasValue ? (object)provider.Birthdate.Value : DBNull.Value)),
					new MySqlParameter("web_sched_description", provider.WebSchedDescription ?? ""),
					new MySqlParameter("web_sched_image_location", provider.WebSchedImageLocation ?? ""),
					new MySqlParameter("hourly_production_goal", provider.HourlyProductionGoal),
					new MySqlParameter("termination_date", (provider.TerminationDate.HasValue ? (object)provider.TerminationDate.Value : DBNull.Value)),
					new MySqlParameter("status", (int)provider.Status),
					new MySqlParameter("is_secondary", (provider.IsSecondary ? 1 : 0)),
					new MySqlParameter("is_not_person", (provider.IsNotPerson ? 1 : 0)),
					new MySqlParameter("is_instructor", (provider.IsInstructor ? 1 : 0)),
					new MySqlParameter("is_cda_net", (provider.IsCDAnet ? 1 : 0)),
					new MySqlParameter("is_erx_enabled", (int)provider.IsErxEnabled),
					new MySqlParameter("is_hidden_report", (provider.IsHiddenReport ? 1 : 0)),
					new MySqlParameter("is_hidden", (provider.IsHidden ? 1 : 0)));

		/// <summary>
		/// Deletes a single <see cref="Provider"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Provider"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `providers` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Provider"/> object from the database.
		/// </summary>
		/// <param name="provider">The <see cref="Provider"/> to delete.</param>
		private static void ExecuteDelete(Provider provider)
			=> ExecuteDelete(provider.Id);
	}
}
