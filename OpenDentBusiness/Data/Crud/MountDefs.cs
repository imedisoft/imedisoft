//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using System.Drawing;

namespace Imedisoft.Data
{
    public partial class MountDefs
	{
		public static MountDef FromReader(MySqlDataReader dataReader)
		{
			return new MountDef
			{
				Id = (long)dataReader["id"],
				Description = (string)dataReader["description"],
				Width = (int)dataReader["width"],
				Height = (int)dataReader["height"],
				BackColor = Color.FromArgb((int)dataReader["back_color"]),
				SortOrder = (int)dataReader["sort_order"]
			};
		}

		/// <summary>
		/// Selects a single MountDef object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static MountDef SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="MountDef"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="MountDef"/> to select.</param>
		public static MountDef SelectOne(long id)
			=> SelectOne("SELECT * FROM `mount_defs` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="MountDef"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<MountDef> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="MountDef"/> into the database.
		/// </summary>
		/// <param name="mountDef">The <see cref="MountDef"/> to insert into the database.</param>
		private static long ExecuteInsert(MountDef mountDef)
			=> mountDef.Id = Database.ExecuteInsert(
				"INSERT INTO `mount_defs` " +
				"(`description`, `width`, `height`, `back_color`, `sort_order`) " +
				"VALUES (" +
					"@description, @width, @height, @back_color, @sort_order" +
				")",
					new MySqlParameter("description", mountDef.Description ?? ""),
					new MySqlParameter("width", mountDef.Width),
					new MySqlParameter("height", mountDef.Height),
					new MySqlParameter("back_color", mountDef.BackColor.ToArgb()),
					new MySqlParameter("sort_order", mountDef.SortOrder));

		/// <summary>
		/// Updates the specified <see cref="MountDef"/> in the database.
		/// </summary>
		/// <param name="mountDef">The <see cref="MountDef"/> to update.</param>
		private static void ExecuteUpdate(MountDef mountDef)
			=> Database.ExecuteNonQuery(
				"UPDATE `mount_defs` SET " +
					"`description` = @description, " +
					"`width` = @width, " +
					"`height` = @height, " +
					"`back_color` = @back_color, " +
					"`sort_order` = @sort_order " +
				"WHERE `id` = @id",
					new MySqlParameter("id", mountDef.Id),
					new MySqlParameter("description", mountDef.Description ?? ""),
					new MySqlParameter("width", mountDef.Width),
					new MySqlParameter("height", mountDef.Height),
					new MySqlParameter("back_color", mountDef.BackColor.ToArgb()),
					new MySqlParameter("sort_order", mountDef.SortOrder));

		/// <summary>
		/// Deletes a single <see cref="MountDef"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="MountDef"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `mount_defs` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="MountDef"/> object from the database.
		/// </summary>
		/// <param name="mountDef">The <see cref="MountDef"/> to delete.</param>
		private static void ExecuteDelete(MountDef mountDef)
			=> ExecuteDelete(mountDef.Id);
	}
}
