//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;

namespace Imedisoft.Data
{
    public partial class PerioMeasures
	{
		public static PerioMeasure FromReader(MySqlDataReader dataReader)
		{
			return new PerioMeasure
			{
				Id = (long)dataReader["id"],
				PerioExamId = (long)dataReader["perio_exam_id"],
				SequenceType = (PerioSequenceType)Convert.ToInt32(dataReader["sequence_type"]),
				Tooth = (int)dataReader["tooth"],
				ToothValue = (int)dataReader["tooth_value"],
				MB = (int)dataReader["mb"],
				B = (int)dataReader["b"],
				DB = (int)dataReader["db"],
				ML = (int)dataReader["ml"],
				L = (int)dataReader["l"],
				DL = (int)dataReader["dl"],
				AddedOnDate = (DateTime)dataReader["added_on_date"],
				LastModifiedDate = (DateTime)dataReader["last_modified_date"]
			};
		}

		/// <summary>
		/// Selects a single PerioMeasure object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static PerioMeasure SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="PerioMeasure"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="PerioMeasure"/> to select.</param>
		public static PerioMeasure SelectOne(long id)
			=> SelectOne("SELECT * FROM `perio_measures` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="PerioMeasure"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<PerioMeasure> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="PerioMeasure"/> into the database.
		/// </summary>
		/// <param name="perioMeasure">The <see cref="PerioMeasure"/> to insert into the database.</param>
		private static long ExecuteInsert(PerioMeasure perioMeasure)
			=> perioMeasure.Id = Database.ExecuteInsert(
				"INSERT INTO `perio_measures` " +
				"(`perio_exam_id`, `sequence_type`, `tooth`, `tooth_value`, `mb`, `b`, `db`, `ml`, `l`, `dl`) " +
				"VALUES (" +
					"@perio_exam_id, @sequence_type, @tooth, @tooth_value, @mb, @b, @db, @ml, @l, @dl" +
				")",
					new MySqlParameter("perio_exam_id", perioMeasure.PerioExamId),
					new MySqlParameter("sequence_type", (int)perioMeasure.SequenceType),
					new MySqlParameter("tooth", perioMeasure.Tooth),
					new MySqlParameter("tooth_value", perioMeasure.ToothValue),
					new MySqlParameter("mb", perioMeasure.MB),
					new MySqlParameter("b", perioMeasure.B),
					new MySqlParameter("db", perioMeasure.DB),
					new MySqlParameter("ml", perioMeasure.ML),
					new MySqlParameter("l", perioMeasure.L),
					new MySqlParameter("dl", perioMeasure.DL),
					new MySqlParameter("added_on_date", perioMeasure.AddedOnDate),
					new MySqlParameter("last_modified_date", perioMeasure.LastModifiedDate));

		/// <summary>
		/// Updates the specified <see cref="PerioMeasure"/> in the database.
		/// </summary>
		/// <param name="perioMeasure">The <see cref="PerioMeasure"/> to update.</param>
		private static void ExecuteUpdate(PerioMeasure perioMeasure)
			=> Database.ExecuteNonQuery(
				"UPDATE `perio_measures` SET " +
					"`perio_exam_id` = @perio_exam_id, " +
					"`sequence_type` = @sequence_type, " +
					"`tooth` = @tooth, " +
					"`tooth_value` = @tooth_value, " +
					"`mb` = @mb, " +
					"`b` = @b, " +
					"`db` = @db, " +
					"`ml` = @ml, " +
					"`l` = @l, " +
					"`dl` = @dl " +
				"WHERE `id` = @id",
					new MySqlParameter("id", perioMeasure.Id),
					new MySqlParameter("perio_exam_id", perioMeasure.PerioExamId),
					new MySqlParameter("sequence_type", (int)perioMeasure.SequenceType),
					new MySqlParameter("tooth", perioMeasure.Tooth),
					new MySqlParameter("tooth_value", perioMeasure.ToothValue),
					new MySqlParameter("mb", perioMeasure.MB),
					new MySqlParameter("b", perioMeasure.B),
					new MySqlParameter("db", perioMeasure.DB),
					new MySqlParameter("ml", perioMeasure.ML),
					new MySqlParameter("l", perioMeasure.L),
					new MySqlParameter("dl", perioMeasure.DL),
					new MySqlParameter("added_on_date", perioMeasure.AddedOnDate),
					new MySqlParameter("last_modified_date", perioMeasure.LastModifiedDate));

		/// <summary>
		/// Deletes a single <see cref="PerioMeasure"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="PerioMeasure"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `perio_measures` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="PerioMeasure"/> object from the database.
		/// </summary>
		/// <param name="perioMeasure">The <see cref="PerioMeasure"/> to delete.</param>
		private static void ExecuteDelete(PerioMeasure perioMeasure)
			=> ExecuteDelete(perioMeasure.Id);
	}
}
