//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Imedisoft.Data
{
	public partial class SecurityLogHashes
	{
		public static SecurityLogHash FromReader(MySqlDataReader dataReader)
		{
			return new SecurityLogHash
			{
				SecurityLogId = (long)dataReader["security_log_id"],
				Hash = (string)dataReader["hash"]
			};
		}

		/// <summary>
		/// Selects a single SecurityLogHash object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static SecurityLogHash SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="SecurityLogHash"/> object with the specified key from the database.
		/// </summary>
		/// <param name="security_log_id">The primary key of the <see cref="SecurityLogHash"/> to select.</param>
		public static SecurityLogHash SelectOne(long security_log_id)
			=> SelectOne("SELECT * FROM `security_log_hashes` WHERE `security_log_id` = " + security_log_id);

		/// <summary>
		/// Selects multiple <see cref="SecurityLogHash"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<SecurityLogHash> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="SecurityLogHash"/> into the database.
		/// </summary>
		/// <param name="securityLogHash">The <see cref="SecurityLogHash"/> to insert into the database.</param>
		private static void ExecuteInsert(SecurityLogHash securityLogHash)
			=> Database.ExecuteNonQuery(
				"INSERT INTO `security_log_hashes` " +
				"(`security_log_id`, `hash`) " +
				"VALUES (" +
					"@security_log_id, @hash" +
				")",
					new MySqlParameter("security_log_id", securityLogHash.SecurityLogId),
					new MySqlParameter("hash", securityLogHash.Hash ?? ""));

		/// <summary>
		/// Updates the specified <see cref="SecurityLogHash"/> in the database.
		/// </summary>
		/// <param name="securityLogHash">The <see cref="SecurityLogHash"/> to update.</param>
		private static void ExecuteUpdate(SecurityLogHash securityLogHash)
			=> Database.ExecuteNonQuery(
				"UPDATE `security_log_hashes` SET " +
					"`hash` = @hash " +
				"WHERE `security_log_id` = @security_log_id",
					new MySqlParameter("security_log_id", securityLogHash.SecurityLogId),
					new MySqlParameter("hash", securityLogHash.Hash ?? ""));

		/// <summary>
		/// Deletes a single <see cref="SecurityLogHash"/> object from the database.
		/// </summary>
		/// <param name="security_log_id">The primary key of the <see cref="SecurityLogHash"/> to delete.</param>
		private static void ExecuteDelete(long security_log_id)
			 => Database.ExecuteNonQuery("DELETE FROM `security_log_hashes` WHERE `security_log_id` = " + security_log_id);

		/// <summary>
		/// Deletes the specified <see cref="SecurityLogHash"/> object from the database.
		/// </summary>
		/// <param name="securityLogHash">The <see cref="SecurityLogHash"/> to delete.</param>
		private static void ExecuteDelete(SecurityLogHash securityLogHash)
			=> ExecuteDelete(securityLogHash.SecurityLogId);
	}
}
