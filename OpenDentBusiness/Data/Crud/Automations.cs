//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;

namespace Imedisoft.Data
{
	public partial class Automations
	{
		public static Automation FromReader(MySqlDataReader dataReader)
		{
			return new Automation
			{
				Id = (long)dataReader["id"],
				Description = (string)dataReader["description"],
				Trigger = (AutomationTrigger)Convert.ToInt32(dataReader["trigger"]),
				Action = (AutomationAction)Convert.ToInt32(dataReader["action"]),
				ProcedureCodes = (string)dataReader["procedure_codes"],
				SheetDefinitionId = dataReader["sheet_definition_id"] as long?,
				CommType = dataReader["comm_type"] as long?,
				MessageContent = (string)dataReader["message_content"],
				AppointmentTypeId = dataReader["appointment_type_id"] as long?,
				PatientStatus = (PatientStatus)Convert.ToInt32(dataReader["patient_status"])
			};
		}

		/// <summary>
		/// Selects a single Automation object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static Automation SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Automation"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Automation"/> to select.</param>
		public static Automation SelectOne(long id)
			=> SelectOne("SELECT * FROM `automations` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Automation"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<Automation> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Automation"/> into the database.
		/// </summary>
		/// <param name="automation">The <see cref="Automation"/> to insert into the database.</param>
		private static long ExecuteInsert(Automation automation)
			=> automation.Id = Database.ExecuteInsert(
				"INSERT INTO `automations` " +
				"(`description`, `trigger`, `action`, `procedure_codes`, `sheet_definition_id`, `comm_type`, `message_content`, `appointment_type_id`, `patient_status`) " +
				"VALUES (" +
					"@description, @trigger, @action, @procedure_codes, @sheet_definition_id, @comm_type, @message_content, @appointment_type_id, @patient_status" +
				")",
					new MySqlParameter("description", automation.Description ?? ""),
					new MySqlParameter("trigger", (int)automation.Trigger),
					new MySqlParameter("action", (int)automation.Action),
					new MySqlParameter("procedure_codes", automation.ProcedureCodes ?? ""),
					new MySqlParameter("sheet_definition_id", (automation.SheetDefinitionId.HasValue ? (object)automation.SheetDefinitionId.Value : DBNull.Value)),
					new MySqlParameter("comm_type", (automation.CommType.HasValue ? (object)automation.CommType.Value : DBNull.Value)),
					new MySqlParameter("message_content", automation.MessageContent ?? ""),
					new MySqlParameter("appointment_type_id", (automation.AppointmentTypeId.HasValue ? (object)automation.AppointmentTypeId.Value : DBNull.Value)),
					new MySqlParameter("patient_status", (int)automation.PatientStatus));

		/// <summary>
		/// Updates the specified <see cref="Automation"/> in the database.
		/// </summary>
		/// <param name="automation">The <see cref="Automation"/> to update.</param>
		private static void ExecuteUpdate(Automation automation)
			=> Database.ExecuteNonQuery(
				"UPDATE `automations` SET " +
					"`description` = @description, " +
					"`trigger` = @trigger, " +
					"`action` = @action, " +
					"`procedure_codes` = @procedure_codes, " +
					"`sheet_definition_id` = @sheet_definition_id, " +
					"`comm_type` = @comm_type, " +
					"`message_content` = @message_content, " +
					"`appointment_type_id` = @appointment_type_id, " +
					"`patient_status` = @patient_status " +
				"WHERE `id` = @id",
					new MySqlParameter("id", automation.Id),
					new MySqlParameter("description", automation.Description ?? ""),
					new MySqlParameter("trigger", (int)automation.Trigger),
					new MySqlParameter("action", (int)automation.Action),
					new MySqlParameter("procedure_codes", automation.ProcedureCodes ?? ""),
					new MySqlParameter("sheet_definition_id", (automation.SheetDefinitionId.HasValue ? (object)automation.SheetDefinitionId.Value : DBNull.Value)),
					new MySqlParameter("comm_type", (automation.CommType.HasValue ? (object)automation.CommType.Value : DBNull.Value)),
					new MySqlParameter("message_content", automation.MessageContent ?? ""),
					new MySqlParameter("appointment_type_id", (automation.AppointmentTypeId.HasValue ? (object)automation.AppointmentTypeId.Value : DBNull.Value)),
					new MySqlParameter("patient_status", (int)automation.PatientStatus));

		/// <summary>
		/// Deletes a single <see cref="Automation"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="Automation"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `automations` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Automation"/> object from the database.
		/// </summary>
		/// <param name="automation">The <see cref="Automation"/> to delete.</param>
		private static void ExecuteDelete(Automation automation)
			=> ExecuteDelete(automation.Id);
	}
}
