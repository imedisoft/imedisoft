//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data.Models;
using MySql.Data.MySqlClient;
using OpenDentBusiness;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Imedisoft.Data
{
	public partial class SecurityLogs
	{
		public static SecurityLog FromReader(MySqlDataReader dataReader)
		{
			return new SecurityLog
			{
				Id = (long)dataReader["id"],
				Type = (Permissions)Convert.ToInt32(dataReader["type"]),
				UserId = (long)dataReader["user_id"],
				LogDate = (DateTime)dataReader["log_date"],
				LogMessage = (string)dataReader["log_message"],
				LogSource = (SecurityLogSource)Convert.ToInt32(dataReader["log_source"]),
				PatientId = dataReader["patient_id"] as long?,
				MachineName = (string)dataReader["machine_name"],
				ObjectId = dataReader["object_id"] as long?,
				ObjectDate = dataReader["object_date"] as DateTime?
			};
		}

		/// <summary>
		/// Selects a single SecurityLog object from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static SecurityLog SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="SecurityLog"/> object with the specified key from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="SecurityLog"/> to select.</param>
		public static SecurityLog SelectOne(long id)
			=> SelectOne("SELECT * FROM `security_logs` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="SecurityLog"/> objects from the database using the specified SQL command.
		/// </summary>
		/// <param name="command">The SELECT command to execute.</param>
		/// <param name="parameters">The (optional) command parameters.</param>
		public static IEnumerable<SecurityLog> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="SecurityLog"/> into the database.
		/// </summary>
		/// <param name="securityLog">The <see cref="SecurityLog"/> to insert into the database.</param>
		private static long ExecuteInsert(SecurityLog securityLog)
			=> securityLog.Id = Database.ExecuteInsert(
				"INSERT INTO `security_logs` " +
				"(`type`, `user_id`, `log_message`, `log_source`, `patient_id`, `machine_name`, `object_id`, `object_date`) " +
				"VALUES (" +
					"@type, @user_id, @log_message, @log_source, @patient_id, @machine_name, @object_id, @object_date" +
				")",
					new MySqlParameter("type", (int)securityLog.Type),
					new MySqlParameter("user_id", securityLog.UserId),
					new MySqlParameter("log_date", securityLog.LogDate),
					new MySqlParameter("log_message", securityLog.LogMessage ?? ""),
					new MySqlParameter("log_source", (int)securityLog.LogSource),
					new MySqlParameter("patient_id", (securityLog.PatientId.HasValue ? (object)securityLog.PatientId.Value : DBNull.Value)),
					new MySqlParameter("machine_name", securityLog.MachineName ?? ""),
					new MySqlParameter("object_id", (securityLog.ObjectId.HasValue ? (object)securityLog.ObjectId.Value : DBNull.Value)),
					new MySqlParameter("object_date", (securityLog.ObjectDate.HasValue ? (object)securityLog.ObjectDate.Value : DBNull.Value)));

		/// <summary>
		/// Updates the specified <see cref="SecurityLog"/> in the database.
		/// </summary>
		/// <param name="securityLog">The <see cref="SecurityLog"/> to update.</param>
		private static void ExecuteUpdate(SecurityLog securityLog)
			=> Database.ExecuteNonQuery(
				"UPDATE `security_logs` SET " +
					"`type` = @type, " +
					"`user_id` = @user_id, " +
					"`log_message` = @log_message, " +
					"`log_source` = @log_source, " +
					"`patient_id` = @patient_id, " +
					"`machine_name` = @machine_name, " +
					"`object_id` = @object_id, " +
					"`object_date` = @object_date " +
				"WHERE `id` = @id",
					new MySqlParameter("id", securityLog.Id),
					new MySqlParameter("type", (int)securityLog.Type),
					new MySqlParameter("user_id", securityLog.UserId),
					new MySqlParameter("log_date", securityLog.LogDate),
					new MySqlParameter("log_message", securityLog.LogMessage ?? ""),
					new MySqlParameter("log_source", (int)securityLog.LogSource),
					new MySqlParameter("patient_id", (securityLog.PatientId.HasValue ? (object)securityLog.PatientId.Value : DBNull.Value)),
					new MySqlParameter("machine_name", securityLog.MachineName ?? ""),
					new MySqlParameter("object_id", (securityLog.ObjectId.HasValue ? (object)securityLog.ObjectId.Value : DBNull.Value)),
					new MySqlParameter("object_date", (securityLog.ObjectDate.HasValue ? (object)securityLog.ObjectDate.Value : DBNull.Value)));

		/// <summary>
		/// Deletes a single <see cref="SecurityLog"/> object from the database.
		/// </summary>
		/// <param name="id">The primary key of the <see cref="SecurityLog"/> to delete.</param>
		private static void ExecuteDelete(long id)
			 => Database.ExecuteNonQuery("DELETE FROM `security_logs` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="SecurityLog"/> object from the database.
		/// </summary>
		/// <param name="securityLog">The <see cref="SecurityLog"/> to delete.</param>
		private static void ExecuteDelete(SecurityLog securityLog)
			=> ExecuteDelete(securityLog.Id);
	}
}
