//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class Allergies
	{
		public static Allergy FromReader(MySqlDataReader dataReader)
		{
			return new Allergy
			{
				Id = (long)dataReader["id"],
				AllergyDefId = (long)dataReader["allergy_def_id"],
				PatientId = (long)dataReader["patient_id"],
				Reaction = (string)dataReader["reaction"],
				StatusIsActive = (Convert.ToInt32(dataReader["status_is_active"]) == 1),
				DateLastModified = (DateTime)dataReader["date_last_modified"],
				DateAdverseReaction = (DateTime)dataReader["date_adverse_reaction"],
				SnomedReaction = (string)dataReader["snomed_reaction"]
			};
		}

		/// <summary>
		/// Selects a single Allergy object from the database using the specified SQL command.
		/// </summary>
		public static Allergy SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="Allergy"/> object with the specified key from the database.
		/// </summary>
		public static Allergy SelectOne(Int64 id)
			=> SelectOne("SELECT * FROM `allergies` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="Allergy"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<Allergy> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="Allergy"/> into the database.
		/// </summary>
		public static long Insert(Allergy allergy)
			=> allergy.Id = Database.ExecuteInsert(
				"INSERT INTO `allergies` " +
				"(`allergy_def_id`, `patient_id`, `reaction`, `status_is_active`, `date_last_modified`, `date_adverse_reaction`, `snomed_reaction`) " +
				"VALUES (" +
					"@allergy_def_id, @patient_id, @reaction, @status_is_active, @date_last_modified, @date_adverse_reaction, @snomed_reaction" +
				")");

		/// <summary>
		/// Updates the specified <see cref="Allergy"/> in the database.
		/// </summary>
		public static void Update(Allergy allergy)
			=> Database.ExecuteNonQuery(
				"UPDATE `allergies` SET " +
					"`allergy_def_id` = @allergy_def_id, " +
					"`patient_id` = @patient_id, " +
					"`reaction` = @reaction, " +
					"`status_is_active` = @status_is_active, " +
					"`date_last_modified` = @date_last_modified, " +
					"`date_adverse_reaction` = @date_adverse_reaction, " +
					"`snomed_reaction` = @snomed_reaction " +
				"WHERE `id` = @id",
					new MySqlParameter("id", allergy.Id),
					new MySqlParameter("allergy_def_id", allergy.AllergyDefId),
					new MySqlParameter("patient_id", allergy.PatientId),
					new MySqlParameter("reaction", allergy.Reaction ?? ""),
					new MySqlParameter("status_is_active", (allergy.StatusIsActive ? 1 : 0)),
					new MySqlParameter("date_last_modified", allergy.DateLastModified),
					new MySqlParameter("date_adverse_reaction", allergy.DateAdverseReaction),
					new MySqlParameter("snomed_reaction", allergy.SnomedReaction ?? ""));

		/// <summary>
		/// Updates the specified <see cref="Allergy"/> in the database.
		/// </summary>
		public static bool Update(Allergy allergiesNew, Allergy allergiesOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (allergiesNew.AllergyDefId != allergiesOld.AllergyDefId)
			{
				updates.Add("`allergy_def_id` = @allergy_def_id");
				parameters.Add(new MySqlParameter("allergy_def_id", allergiesNew.AllergyDefId));
			}

			if (allergiesNew.PatientId != allergiesOld.PatientId)
			{
				updates.Add("`patient_id` = @patient_id");
				parameters.Add(new MySqlParameter("patient_id", allergiesNew.PatientId));
			}

			if (allergiesNew.Reaction != allergiesOld.Reaction)
			{
				updates.Add("`reaction` = @reaction");
				parameters.Add(new MySqlParameter("reaction", allergiesNew.Reaction ?? ""));
			}

			if (allergiesNew.StatusIsActive != allergiesOld.StatusIsActive)
			{
				updates.Add("`status_is_active` = @status_is_active");
				parameters.Add(new MySqlParameter("status_is_active", (allergiesNew.StatusIsActive ? 1 : 0)));
			}

			if (allergiesNew.DateLastModified != allergiesOld.DateLastModified)
			{
				updates.Add("`date_last_modified` = @date_last_modified");
				parameters.Add(new MySqlParameter("date_last_modified", allergiesNew.DateLastModified));
			}

			if (allergiesNew.DateAdverseReaction != allergiesOld.DateAdverseReaction)
			{
				updates.Add("`date_adverse_reaction` = @date_adverse_reaction");
				parameters.Add(new MySqlParameter("date_adverse_reaction", allergiesNew.DateAdverseReaction));
			}

			if (allergiesNew.SnomedReaction != allergiesOld.SnomedReaction)
			{
				updates.Add("`snomed_reaction` = @snomed_reaction");
				parameters.Add(new MySqlParameter("snomed_reaction", allergiesNew.SnomedReaction ?? ""));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("id", allergiesNew.Id));

			Database.ExecuteNonQuery("UPDATE `allergies` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `id` = @id",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="Allergy"/> object from the database.
		/// </summary>
		public static void Delete(Int64 id)
			 => Database.ExecuteNonQuery("DELETE FROM `allergies` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="Allergy"/> object from the database.
		/// </summary>
		public static void Delete(Allergy allergy)
			=> Delete(allergy.Id);
	}
}
