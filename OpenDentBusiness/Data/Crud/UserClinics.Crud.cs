//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Imedisoft.Data;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;

namespace OpenDentBusiness
{
	public partial class UserClinics
	{
		public static UserClinic FromReader(MySqlDataReader dataReader)
		{
			return new UserClinic
			{
				Id = (long)dataReader["id"],
				UserId = (long)dataReader["user_id"],
				ClinicId = (long)dataReader["clinic_id"]
			};
		}

		/// <summary>
		/// Selects a single UserClinic object from the database using the specified SQL command.
		/// </summary>
		public static UserClinic SelectOne(string command, params MySqlParameter[] parameters)
			=> Database.SelectOne(command, FromReader, parameters);

		/// <summary>
		/// Selects the <see cref="UserClinic"/> object with the specified key from the database.
		/// </summary>
		public static UserClinic SelectOne(Int64 id)
			=> SelectOne("SELECT * FROM `user_clinics` WHERE `id` = " + id);

		/// <summary>
		/// Selects multiple <see cref="UserClinic"/> objects from the database using the specified SQL command.
		/// </summary>
		public static IEnumerable<UserClinic> SelectMany(string command, params MySqlParameter[] parameters)
			=> Database.SelectMany(command, FromReader, parameters);

		/// <summary>
		/// Inserts the specified <see cref="UserClinic"/> into the database.
		/// </summary>
		public static long Insert(UserClinic userClinic)
			=> userClinic.Id = Database.ExecuteInsert(
				"INSERT INTO `user_clinics` " +
				"(`user_id`, `clinic_id`) " +
				"VALUES (" +
					"@user_id, @clinic_id" +
				")");

		/// <summary>
		/// Updates the specified <see cref="UserClinic"/> in the database.
		/// </summary>
		public static void Update(UserClinic userClinic)
			=> Database.ExecuteNonQuery(
				"UPDATE `user_clinics` SET " +
					"`user_id` = @user_id, " +
					"`clinic_id` = @clinic_id " +
				"WHERE `id` = @id",
					new MySqlParameter("id", userClinic.Id),
					new MySqlParameter("user_id", userClinic.UserId),
					new MySqlParameter("clinic_id", userClinic.ClinicId));

		/// <summary>
		/// Updates the specified <see cref="UserClinic"/> in the database.
		/// </summary>
		public static bool Update(UserClinic user_clinicsNew, UserClinic user_clinicsOld)
		{
			var updates = new List<string>();
			var parameters = new List<MySqlParameter>();

			if (user_clinicsNew.UserId != user_clinicsOld.UserId)
			{
				updates.Add("`user_id` = @user_id");
				parameters.Add(new MySqlParameter("user_id", user_clinicsNew.UserId));
			}

			if (user_clinicsNew.ClinicId != user_clinicsOld.ClinicId)
			{
				updates.Add("`clinic_id` = @clinic_id");
				parameters.Add(new MySqlParameter("clinic_id", user_clinicsNew.ClinicId));
			}

			if (updates.Count == 0) return false;

			parameters.Add(new MySqlParameter("id", user_clinicsNew.Id));

			Database.ExecuteNonQuery("UPDATE `user_clinics` " +
				"SET " + string.Join(", ", updates) + " " +
				"WHERE `id` = @id",
					parameters.ToArray());

			return true;
		}

		/// <summary>
		/// Deletes a single <see cref="UserClinic"/> object from the database.
		/// </summary>
		public static void Delete(Int64 id)
			 => Database.ExecuteNonQuery("DELETE FROM `user_clinics` WHERE `id` = " + id);

		/// <summary>
		/// Deletes the specified <see cref="UserClinic"/> object from the database.
		/// </summary>
		public static void Delete(UserClinic userClinic)
			=> Delete(userClinic.Id);
	}
}
