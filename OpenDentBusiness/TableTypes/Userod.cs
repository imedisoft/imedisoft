using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using Imedisoft.Data.Annotations;

namespace OpenDentBusiness
{
    /// <summary>
    /// (User OD since "user" is a reserved word)
    /// Users are a completely separate entity from Providers and Employees even though they can be linked.
    /// A usernumber can never be changed, ensuring a permanent way to record database entries and leave an audit trail.
    /// A user can be a provider, employee, or neither.
    /// </summary>
    [Table]
    public class Userod : TableBase
    {
        [PrimaryKey]
        [Column(Name = "UserNum")]
        public long Id;

        /// <summary>
        /// The username of the user.
        /// </summary>
        public string UserName;

        /// <summary>
        ///     <para>
        ///         The password of the user in a hashed format.
        ///     </para>
        ///     <para>
        ///         The value of this field should be generated by 
        ///         <see cref="Password.Hash(string, PasswordAlgorithm)"/> and can be verified
        ///         by the <see cref="Password.Verify(string, string)"/> method.
        ///     </para>
        /// </summary>
        [Column("Password")]
        public string PasswordHash;

        /// <summary>
        /// Cannot be used if provnum is used.
        /// Used for timecards to block access by other users.
        /// </summary>
        [Column("EmployeeNum"), ForeignKey(typeof(Employee), nameof(Employee.EmployeeNum))]
        public long EmployeeId;

        /// <summary>
        ///     <para>
        ///         The default clinic for the user. New patients registered by this user default to this clinic.
        ///     </para>
        ///     <para>
        ///         May be null for users that have no default clinic or when clinics are disabled.
        ///     </para>
        /// </summary> 	
        [Column("ClinicNum"), ForeignKey(typeof(Clinic), nameof(Clinic.ClinicNum))]
        public long ClinicId;

        /// <summary>
        /// Cannot be used if EmployeeNum is used.
        /// It is possible to have multiple userods attached to a single provider.
        /// </summary>
        [Column("ProvNum"), ForeignKey(typeof(Provider), nameof(Provider.ProvNum))]
        public long ProviderId;

        /// <summary>
        /// Set true to hide user from login list.
        /// </summary>
        public bool IsHidden;

        /// <summary>
        ///     <para>
        ///         The ID of the task list that serves as the inbox for the user. Can be NULL if no inbox has been setup for the user.
        ///     </para>
        ///     <para>
        ///         Tasks sent to a user will be moved into this list.
        ///     </para>
        /// </summary>
        [ForeignKey(typeof(TaskList), nameof(TaskList.Id))]
        public long? InboxTaskListId;

        /// <summary>
        ///     <para>
        ///         The ID of the root task list of the user.
        ///     </para>
        ///     <para>
        ///         If set to NULL the user can access all task lists at the trunk level.
        ///     </para>
        /// </summary>
        [ForeignKey(typeof(TaskList), nameof(TaskList.Id))]
        public long? RootTaskListId;

        /// <summary> Defaults to 3 (regular user) unless specified. Helps populates the Anesthetist, Surgeon, Assistant and Circulator dropdowns properly on FormAnestheticRecord/// </summary>
        public int AnesthProvType;

        ///<summary>If set to true, the BlockSubsc button will start out pressed for this user.</summary>
        public bool DefaultHidePopups;

        ///<summary>Gets set to true if strong passwords are turned on, and this user changes their password to a strong password.  We don't store actual passwords, so this flag is the only way to tell.</summary>
        public bool PasswordIsStrong;

        ///<summary>When true, prevents user from having access to clinics that are not in the corresponding userclinic table.
        ///Many places throughout the program will optionally remove the 'All' option from this user when true.</summary>
        public bool ClinicIsRestricted;

        ///<summary>If set to true, the BlockInbox button will start out pressed for this user.</summary>
        public bool InboxHidePopups;

        ///<summary>FK to userod.UserNum.  The user num within the Central Manager database.  Only editable via CEMT.  Can change when CEMT syncs.</summary>
        public long UserNumCEMT;

        /// <summary>
        /// The date and time of the most recent log in failure for this user. Set to MinValue after user logs in successfully.
        /// </summary>
        [Column("DateTFail")]
        public DateTime FailedLoginDateTime;

        /// <summary>
        /// The number of times this user has failed to log into their account. Set to 0 after user logs in successfully.
        /// </summary>
        public byte FailedAttempts;

        /// <summary>The username for the ActiveDirectory user to link the account to.</summary>
        public string DomainUser;

        ///<summary>Boolean.  If true, the user's password needs to be reset on next login.</summary>
        public bool IsPasswordResetRequired;

        ///<summary>A hashed pin that is used for mobile web validation on eClipboard. Not used in OD proper.</summary>
        public string MobileWebPin;

        ///<summary>The number of attempts the mobile web pin has failed. Reset on successful attempt.</summary>
        public byte MobileWebPinFailedAttempts;

        ///<summary>Minimum date if last login date and time is unknown.
        ///Otherwise contians the last date and time this user successfully logged in.</summary>
        public DateTime DateTLastLogin;

        public Userod Copy() 
            => (Userod)MemberwiseClone();

        public override string ToString() 
            => UserName;

        public bool IsInUserGroup(long userGroupNum) 
            => Userods.IsInUserGroup(Id, userGroupNum);

        /// <summary>
        /// Gets all of the usergroups attached to this user.
        /// </summary>
        public List<UserGroup> GetGroups(bool includeCEMT = false) => UserGroups.GetForUser(Id, includeCEMT).ToList();
    }
}
